{"version":3,"sources":["webpack:///./resources/modules/front-app/src/js/components/FrontPopupWrapper.js","webpack:///./resources/modules/front-app/src/js/components/altrp-offcanvas/AltrpOffcanvas.js","webpack:///./resources/modules/front-app/src/js/components/FrontPopup.js"],"names":["window","styled","div","settings","styles","width_popup_layout","size","unit","dimensionsControllerToStyles","getResponsiveSetting","popup_close_button_height_size","popup_close_button_width_size","popup_close_button_border_type","popup_close_button_border_color","colorPickedHex","popup_close_button_background_color","shadowControllerToStyles","popup_close_icon_height_size","popup_close_icon_width_size","time_offcanvas","props","state","elementId","template","getId","show","offcanvasRef","React","offcanvasContentRef","bind","hide","hideButton","mainContent","document","getElementsByClassName","this","setState","addEventListener","animations_offcanvas","direction_offcanvas","style","width","left","e","path","includes","current","close","hideAnimation","setTimeout","removeEventListener","prevProps","classes","classesWrapper","content","rootElement","componentClass","element","children","close_cursor_offcanvas","overflow_visible_offcanvas","closeButton","switcher_close_button_popup_layout","className","popup_close_icon_alignment","onClick","AltrpImage","image","popup_close_icon","default","assetType","name","ref","ReactDOM","autoHide","autoHideTimeout","autoHideDuration","universal","getElementById","Component","FrontPopup","ElementWrapper","isVisible","frontElementsFabric","parseData","data","page","models","isShownOnScroll","getContent","popupTrigger","_","get","on_scroll","to_element","getSettings","popupID","closePopup","popupGUID","rootElementSettings","rootElementId","push","overlay_close_popup_layout","height_popup_layout","horizontal_position_popup_layout","vertical_position_popup_layout","closeButtonCondition","lazy","url","maxHeight","Number","height_custom_popup_layout","popup","join","undefined","popup_close_click_on_dark_area","stopPropagation","autoHeight","renderThumbHorizontal","renderTrackHorizontal","renderTrackVertical","autoHeightMin","autoHeightMax","createElement","type_popup","AltrpOffcanvas","reactRedux","connect","scrollPosition","dispatch","togglePopup"],"mappings":"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","file":"3825.editor.js","sourcesContent":["\r\nimport { getResponsiveSetting } from '../helpers';\r\nimport { shadowControllerToStyles, dimensionsControllerToStyles } from '../helpers/styles';\r\n\r\n\r\nconst FrontPopupWrapper = window.styled.div`\r\n& .popup-content {\r\n  ${({settings}) => {\r\n    let styles = \"\";\r\n\r\n    if(settings.width_popup_layout && settings.width_popup_layout.size)\r\n    styles += `width: ${settings.width_popup_layout.size} ${settings.width_popup_layout.unit};`;\r\n\r\n    return styles;\r\n  }}\r\n}\r\n& .popup-close-button {\r\n  ${({settings}) => {\r\n    let styles = \"\";\r\n    styles += dimensionsControllerToStyles(getResponsiveSetting(settings, 'popup_close_button_padding'));\r\n\r\n    if(settings.popup_close_button_height_size && settings.popup_close_button_height_size.size) {\r\n      let {size, unit} = getResponsiveSetting(settings, 'popup_close_button_height_size');\r\n      styles += `height: ${size}${unit};`;\r\n    }\r\n\r\n    if(settings.popup_close_button_width_size && settings.popup_close_button_width_size.size) {\r\n      let {size, unit} = getResponsiveSetting(settings, 'popup_close_button_width_size');\r\n      styles += `width: ${size}${unit};`\r\n    }\r\n\r\n    if(settings.popup_close_button_border_type) {\r\n      styles += dimensionsControllerToStyles(getResponsiveSetting(settings, \"popup_close_button_border_width\"), \"border\");\r\n      styles += `border-style: ${getResponsiveSetting(settings, \"popup_close_button_border_type\")};`;\r\n      if(settings.popup_close_button_border_color && settings.popup_close_button_border_color.colorPickedHex)\r\n        styles += `border-color: ${getResponsiveSetting(settings, \"popup_close_button_border_color.colorPickedHex\")};`;\r\n    }\r\n    styles += dimensionsControllerToStyles(getResponsiveSetting(settings, \"popup_close_button_border_radius\"), \"border-radius\");\r\n    if(settings.popup_close_button_background_color) {\r\n      styles += `background-color: ${getResponsiveSetting(settings, \"popup_close_button_background_color\").colorPickedHex} !important;`;\r\n    }\r\n\r\n    styles += shadowControllerToStyles(getResponsiveSetting(settings, \"popup_close_button_box_shadow\"));\r\n\r\n    return styles;\r\n  }}\r\n}\r\n& .popup-close-button:hover {\r\n  ${({settings}) => {\r\n    let styles = '';\r\n    let popupCloseButtonPadding = getResponsiveSetting(settings, 'popup_close_button_padding', ':hover');\r\n    styles += popupCloseButtonPadding;\r\n    return styles;\r\n  }}\r\n}\r\n& .popup-close-button-icon {\r\n  ${({settings}) => {\r\n    let styles = '';\r\n    if(settings.popup_close_icon_height_size && settings.popup_close_icon_height_size.size) {\r\n      let {size, unit} = getResponsiveSetting(settings, 'popup_close_icon_height_size');\r\n      styles += `height: ${size}${unit};`\r\n    }\r\n    if(settings.popup_close_icon_width_size && settings.popup_close_icon_width_size.size) {\r\n      let {size, unit} = getResponsiveSetting(settings, 'popup_close_icon_width_size');\r\n      styles += `width: ${size}${unit};`\r\n    }\r\n    return styles;\r\n  }}\r\n}\r\n& .altrp-offcanvas {\r\n  ${({settings}) => {\r\n    let styles ='';\r\n    if(settings.time_offcanvas  && settings.time_offcanvas.size) {\r\n      styles += `animation-duration: ${settings.time_offcanvas.size}${settings.time_offcanvas.unit} !important;`\r\n    }\r\n    return styles;\r\n  }}\r\n}\r\n`\r\n\r\nexport default FrontPopupWrapper;\r\n","import { isEditor } from \"../../helpers\";\r\nimport \"./altrp-offcanvas.scss\";\r\nimport TemplateLoader from \"../../../../../editor/src/js/components/template-loader/TemplateLoader\";\r\nimport ReactDOM from \"react-dom\";\r\nimport React, { Component } from \"react\";\r\nimport AltrpImage from \"../../../../../editor/src/js/components/altrp-image/AltrpImage\";\r\nimport { Scrollbars } from \"react-custom-scrollbars\";\r\nimport FrontPopupWrapper from \"../FrontPopupWrapper\";\r\n\r\nclass OffcanvasWidget extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      settings: props.settings,\r\n      elementId: props.template.getId(),\r\n      show: false\r\n    };\r\n\r\n    this.offcanvasRef = React.createRef();\r\n    this.offcanvasContentRef = React.createRef();\r\n\r\n    this.show = this.show.bind(this);\r\n    this.hide = this.hide.bind(this);\r\n    this.hideButton = this.hideButton.bind(this);\r\n    this.mainContent = document.getElementsByClassName(\"main-content\")[0];\r\n  }\r\n\r\n  show() {\r\n    this.setState({\r\n      show: true\r\n    });\r\n    document.addEventListener(\"click\", this.hide);\r\n    if (this.state.settings.animations_offcanvas === \"push\") {\r\n      if (this.state.settings.direction_offcanvas === \"left\") {\r\n        this.mainContent.style.width = \"70%\";\r\n        this.mainContent.style.left = \"30%\";\r\n      } else if (this.state.settings.direction_offcanvas === \"right\") {\r\n        this.mainContent.style.width = \"70%\";\r\n      }\r\n    }\r\n  }\r\n\r\n  hide(e) {\r\n    if (!e.path.includes(this.offcanvasContentRef.current)) {\r\n      this.props.close();\r\n      this.setState(state => {\r\n        return {\r\n          ...state,\r\n          hideAnimation: true\r\n        };\r\n      });\r\n      setTimeout(() => {\r\n        this.setState({\r\n          hideAnimation: false,\r\n          show: false\r\n        });\r\n      }, 200);\r\n      document.removeEventListener(\"click\", this.hide);\r\n    }\r\n    this.mainContent.style.width = \"100%\";\r\n    this.mainContent.style.left = \"0\";\r\n  }\r\n\r\n  hideButton() {\r\n    this.setState(state => {\r\n      return {\r\n        ...state,\r\n        hideAnimation: true\r\n      };\r\n    });\r\n    setTimeout(() => {\r\n      this.setState({\r\n        hideAnimation: false,\r\n        show: false\r\n      });\r\n      document.removeEventListener(\"click\", this.hide);\r\n    }, 200);\r\n    this.props.close();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.show !== prevProps.show) {\r\n      this.show();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let classes = \"altrp-offcanvas\";\r\n\r\n    switch (this.state.settings.direction_offcanvas) {\r\n      case \"left\":\r\n        classes += \" altrp-offcanvas-left altrp-offcanvas-vertical\";\r\n        break;\r\n      case \"right\":\r\n        classes += \" altrp-offcanvas-right altrp-offcanvas-vertical\";\r\n        break;\r\n      case \"top\":\r\n        classes += \" altrp-offcanvas-top altrp-offcanvas-horizontal\";\r\n        break;\r\n      case \"bottom\":\r\n        classes += \" altrp-offcanvas-bottom altrp-offcanvas-horizontal\";\r\n        break;\r\n      case \"topLeft\":\r\n        classes +=\r\n          \" altrp-offcanvas-top-left altrp-offcanvas-horizontal altrp-offcanvas-vertical\";\r\n        break;\r\n      case \"topRight\":\r\n        classes +=\r\n          \" altrp-offcanvas-top-right altrp-offcanvas-horizontal altrp-offcanvas-vertical\";\r\n        break;\r\n      case \"bottomLeft\":\r\n        classes +=\r\n          \" altrp-offcanvas-bottom-left altrp-offcanvas-horizontal altrp-offcanvas-vertical\";\r\n        break;\r\n      case \"bottomRight\":\r\n        classes +=\r\n          \" altrp-offcanvas-bottom-right altrp-offcanvas-horizontal altrp-offcanvas-vertical\";\r\n        break;\r\n    }\r\n\r\n    let classesWrapper = \"\";\r\n    switch (this.state.settings.animations_offcanvas) {\r\n      case \"push\":\r\n        classesWrapper += \" altrp-offcanvas-animation-push\";\r\n        break;\r\n      case \"reveal\":\r\n        classesWrapper += \" altrp-offcanvas-animation-reveal\";\r\n        break;\r\n      case \"none\":\r\n        classesWrapper += \" altrp-offcanvas-animation-none\";\r\n        break;\r\n      default:\r\n        classesWrapper += \" altrp-offcanvas-animation-slide\";\r\n    }\r\n\r\n    let content = \"\";\r\n    let rootElement = this.props.template;\r\n\r\n    if (rootElement) {\r\n      content = React.createElement(rootElement.componentClass, {\r\n        element: rootElement,\r\n        children: rootElement.children\r\n      });\r\n    }\r\n    classesWrapper += ` altrp-offcanvas-wrapper-cursor-${\r\n      this.state.settings.close_cursor_offcanvas\r\n    } ${\r\n      this.state.settings.overflow_visible_offcanvas\r\n        ? \"altrp-offcanvas-wrapper-overflow-visible\"\r\n        : \"\"\r\n    }`;\r\n\r\n    const closeButton = this.state.settings\r\n      .switcher_close_button_popup_layout ? (\r\n      <div\r\n        className={\r\n          \"altrp-offcanvas-button popup-close-button\" +\r\n          ` altrp-offcanvas-button-${this.state.settings.popup_close_icon_alignment}`\r\n        }\r\n        onClick={this.hideButton}\r\n      >\r\n        <AltrpImage\r\n          image={this.state.settings.popup_close_icon}\r\n          default={{ assetType: \"icon\", name: \"deleteOne\" }}\r\n          className=\"altrp-offcanvas-button-icon popup-close-button-icon\"\r\n        />\r\n      </div>\r\n    ) : (\r\n      \"\"\r\n    );\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"altrp-offcanvas-ref\" ref={this.offcanvasRef} />\r\n        {ReactDOM.createPortal(\r\n          <FrontPopupWrapper settings={this.state.settings}>\r\n            <div\r\n              className={\r\n                \"altrp-offcanvas-wrapper\" +\r\n                (this.state.show ? \" altrp-offcanvas-wrapper-show\" : \"\") +\r\n                ` ${this.state.elementId}-altrp-offcanvas` +\r\n                (this.state.hideAnimation\r\n                  ? \" altrp-offcanvas-wrapper-animation-hide\"\r\n                  : \"\") +\r\n                classesWrapper\r\n              }\r\n            >\r\n              <div className={classes} ref={this.offcanvasContentRef}>\r\n                <Scrollbars\r\n                  autoHide\r\n                  autoHideTimeout={1000}\r\n                  autoHideDuration={200}\r\n                  universal={true}\r\n                >\r\n                  {closeButton}\r\n\r\n                  {content}\r\n                </Scrollbars>\r\n              </div>\r\n            </div>\r\n          </FrontPopupWrapper>,\r\n          document.getElementById(\"front-app\")\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OffcanvasWidget;\r\n","import { Scrollbars } from \"react-custom-scrollbars\";\r\nimport AltrpOffcanvas from \"./altrp-offcanvas/AltrpOffcanvas\";\r\nimport { togglePopup } from \"../store/popup-trigger/actions\";\r\nimport AltrpImage from \"../../../../editor/src/js/components/altrp-image/AltrpImage\";\r\nimport FrontPopupWrapper from \"./FrontPopupWrapper\";\r\n\r\nclass FrontPopup extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.ElementWrapper = props.ElementWrapper || window.ElementWrapper;\r\n    this.state = {\r\n      isVisible: false,\r\n      rootElement: window.frontElementsFabric.parseData(\r\n        this.props.template.data,\r\n        null,\r\n        this.props.page,\r\n        this.props.models\r\n      ),\r\n      isShownOnScroll: false\r\n    };\r\n\r\n    this.close = this.close.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    switch (this.state.rootElement.getContent(\"type_popup\")) {\r\n      case \"popup\":\r\n        // const { on_page_load, on_click, inactivity, on_exit, to_element } = _.get(this.props, 'template.triggers.data', {});\r\n\r\n        // if (on_page_load || on_page_load === 0) {\r\n        //   setTimeout(() => this.setState({ isVisible: true }), on_page_load * 1000)\r\n        // }\r\n        //\r\n        // if (on_click) {\r\n        //   this.clickCounter = 0;\r\n        //   document.addEventListener('click', () => {\r\n        //     this.clickCounter += 1;\r\n        //     if (this.clickCounter === +on_click) {\r\n        //       this.clickCounter = 0;\r\n        //       this.setState({ isVisible: true });\r\n        //     }\r\n        //   })\r\n        // }\r\n        //\r\n        // if (inactivity) {\r\n        //   this.inactivityTimeout = setTimeout(() => this.setState({ isVisible: true }), inactivity * 1000);\r\n        //\r\n        //   this.resetTimer = () => {\r\n        //     clearTimeout(this.inactivityTimeout);\r\n        //     this.inactivityTimeout = setTimeout(() => this.setState({ isVisible: true }), inactivity * 1000);\r\n        //   };\r\n        //\r\n        //   const events = ['mousedown', 'keydown', 'touchstart'];\r\n        //   events.forEach(event => {\r\n        //     document.addEventListener(event, this.resetTimer, true);\r\n        //   });\r\n        // }\r\n        //\r\n        // if (on_exit) {\r\n        //   // window.addEventListener('beforeunload', (event) => {\r\n        //   //   // Отмените событие, как указано в стандарте.\r\n        //   //   event.preventDefault();\r\n        //   //   this.setState({ isVisible: true })\r\n        //   //   // Хром требует установки возвратного значения.\r\n        //   //   event.returnValue = '';\r\n        //   // });\r\n        //   document.addEventListener('mouseleave', () => this.setState({ isVisible: true }))\r\n        // }\r\n\r\n        // if (to_element) {\r\n        //   const htmlCollection = document.getElementsByClassName(to_element);\r\n        //   console.log(htmlCollection);\r\n        //   this.elements = []\r\n        //   for (let index = 0; index < htmlCollection.length; index++) {\r\n        //     const element = htmlCollection[index];\r\n        //     this.elements[index] = getTopPosition(element);\r\n        //   }\r\n        //   console.log(this.elements);\r\n        // }\r\n        break;\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    let { popupTrigger } = this.props;\r\n    const { on_scroll, to_element } = _.get(\r\n      this.props,\r\n      \"template.triggers.data\",\r\n      {}\r\n    );\r\n    const { isShownOnScroll } = this.state;\r\n    switch (this.state.rootElement.getSettings(\"type_popup\", \"popup\")) {\r\n      case \"popup\":\r\n        // if (on_scroll && !isShownOnScroll && on_scroll.size <= this.props.scrollPosition.top * 100) {\r\n        //   this.setState({ isVisible: true, isShownOnScroll: true });\r\n        //\r\n        // }\r\n        // if (this.resetTimer && this.props.scrollPosition.top !== prevProps.scrollPosition.top) {\r\n        //\r\n        //  this.resetTimer();\r\n        //\r\n        // }\r\n        // if (to_element && this.props.scrollPosition.top !== prevProps.scrollPosition.top) {\r\n        //\r\n        //  // console.log(this.elements)\r\n        //\r\n        //  console.log(this.props.scrollPosition.scrollTop)\r\n        //  const { scrollTop, clientHeight } = this.props.scrollPosition;\r\n        //\r\n        //  for (let index = 0; index < this.elements.length; index++) {\r\n        //\r\n        //    const element = this.elements[index];\r\n        //\r\n        //     if (isElementTopInViewport(element, scrollTop, clientHeight)) {\r\n        //\r\n        //      this.setState({ isVisible: true });\r\n        //       // this.elements.splice(index, 1);\r\n        //     }\r\n        //   }\r\n\r\n        // }\r\n        if (popupTrigger !== prevProps.popupTrigger) {\r\n          this.setState({\r\n            isVisible:\r\n              popupTrigger.popupID === _.get(this.props, \"template.guid\")\r\n          });\r\n        }\r\n        break;\r\n      case \"offcanvas\":\r\n        // if (on_scroll && !isShownOnScroll && on_scroll.size <= this.props.scrollPosition.top * 100) {\r\n        //   this.setState({ isVisible: true, isShownOnScroll: true });\r\n        // }\r\n        //\r\n        // if (this.resetTimer && this.props.scrollPosition.top !== prevProps.scrollPosition.top) {\r\n        //   this.resetTimer();\r\n        // }\r\n\r\n        // if (to_element && this.props.scrollPosition.top !== prevProps.scrollPosition.top) {\r\n        //   // console.log(this.elements)\r\n        //   console.log(this.props.scrollPosition.scrollTop)\r\n        //   const { scrollTop, clientHeight } = this.props.scrollPosition;\r\n\r\n        //   for (let index = 0; index < this.elements.length; index++) {\r\n        //     const element = this.elements[index];\r\n\r\n        //     if (isElementTopInViewport(element, scrollTop, clientHeight)) {\r\n        //       this.setState({ isVisible: true });\r\n        //       // this.elements.splice(index, 1);\r\n        //     }\r\n        //   }\r\n\r\n        // }\r\n        if (popupTrigger !== prevProps.popupTrigger) {\r\n          this.setState({\r\n            isVisible:\r\n              popupTrigger.popupID === _.get(this.props, \"template.guid\")\r\n          });\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  close() {\r\n    this.setState({ isVisible: false, isShownOnScroll: false });\r\n    this.props.closePopup();\r\n  }\r\n\r\n  render() {\r\n    const { isVisible } = this.state;\r\n    let classes = [`app-popup`];\r\n    // const { positioning_custom_top } = this.props.template.data.rootElementSettings;\r\n    const rootElement = this.state.rootElement;\r\n    rootElement.popupGUID = _.get(this.props, \"template.guid\");\r\n    const rootElementSettings = rootElement.getSettings(\"\");\r\n    const rootElementId = rootElement.getId();\r\n\r\n    classes.push(`${rootElementId}-app-popup`);\r\n    const overlayCondition =\r\n      rootElementSettings.overlay_close_popup_layout || true;\r\n\r\n    if (overlayCondition) {\r\n      classes.push(\"app-popup-overlay\");\r\n    }\r\n\r\n    //height popup\r\n    switch (rootElementSettings.height_popup_layout) {\r\n      case \"fitToScreen\":\r\n        classes.push(\"app-popup-height-fit-to-screen\");\r\n        break;\r\n      case \"custom\":\r\n        classes.push(\"app-popup-height-custom\");\r\n        break;\r\n    }\r\n\r\n    //horizontal position horizontal_position_popup_layout\r\n    switch (rootElementSettings.horizontal_position_popup_layout) {\r\n      case \"left\":\r\n        classes.push(\"app-popup-horizontal-left\");\r\n        break;\r\n      case \"center\":\r\n        classes.push(\"app-popup-horizontal-center\");\r\n        break;\r\n      case \"right\":\r\n        classes.push(\"app-popup-horizontal-right\");\r\n        break;\r\n      default:\r\n        classes.push(\"app-popup-horizontal-center\");\r\n    }\r\n\r\n    //vertical position vertical_position_popup_layout\r\n    switch (rootElementSettings.vertical_position_popup_layout) {\r\n      case \"top\":\r\n        classes.push(\"app-popup-vertical-top\");\r\n        break;\r\n      case \"center\":\r\n        classes.push(\"app-popup-vertical-center\");\r\n        break;\r\n      case \"bottom\":\r\n        classes.push(\"app-popup-vertical-bottom\");\r\n        break;\r\n      default:\r\n        classes.push(\"app-popup-vertical-center\");\r\n    }\r\n\r\n    // let styleButtonClose = {};\r\n\r\n    // if(rootElementSettings.popup_close_button_height_size && rootElementSettings.popup_close_button_height_size.size)\r\n    //   styleButtonClose.height = rootElementSettings.popup_close_button_height_size.size + rootElementSettings.popup_close_button_height_size.unit;\r\n    // if(rootElementSettings.popup_close_button_width_size && rootElementSettings.popup_close_button_width_size.size)\r\n    //   styleButtonClose.width = rootElementSettings.popup_close_button_width_size.size + rootElementSettings.popup_close_button_width_size.unit;\r\n\r\n    // if(rootElementSettings.popup_close_button_padding) {\r\n    //   styleButtonClose.paddingTop = rootElementSettings.popup_close_button_padding.top + rootElementSettings.popup_close_button_padding.unit;\r\n    //   styleButtonClose.paddingRight = rootElementSettings.popup_close_button_padding.right + rootElementSettings.popup_close_button_padding.unit;\r\n    //   styleButtonClose.paddingBottom = rootElementSettings.popup_close_button_padding.bottom + rootElementSettings.popup_close_button_padding.unit;\r\n    //   styleButtonClose.paddingLeft = rootElementSettings.popup_close_button_padding.left + rootElementSettings.popup_close_button_padding.unit;\r\n    // }\r\n\r\n    // if(rootElementSettings.popup_close_button_border_type && rootElementSettings.popup_close_button_border_type !== \"none\") {\r\n    //   styleButtonClose.borderTopWidth = rootElementSettings.popup_close_button_border_width.top + rootElementSettings.popup_close_button_border_width.unit;\r\n    //   styleButtonClose.borderRightWidth = rootElementSettings.popup_close_button_border_width.right + rootElementSettings.popup_close_button_border_width.unit;\r\n    //   styleButtonClose.borderBottomWidth = rootElementSettings.popup_close_button_border_width.bottom + rootElementSettings.popup_close_button_border_width.unit;\r\n    //   styleButtonClose.borderLeftWidth = rootElementSettings.popup_close_button_border_width.left + rootElementSettings.popup_close_button_border_width.unit;\r\n    //   styleButtonClose.borderStyle = rootElementSettings.popup_close_button_border_type;\r\n    //   if(rootElementSettings.popup_close_button_border_color && rootElementSettings.popup_close_button_border_color.colorPickedHex)\r\n    //     styleButtonClose.borderColor = rootElementSettings.popup_close_button_border_color.colorPickedHex;\r\n    // }\r\n\r\n    // if(rootElementSettings.popup_close_button_border_radius) {\r\n    //   let borderRadiusTop = (rootElementSettings.popup_close_button_border_radius.top ? rootElementSettings.popup_close_button_border_radius.top : \"0\") + rootElementSettings.popup_close_button_border_radius.unit;\r\n    //   let borderRadiusRight = (rootElementSettings.popup_close_button_border_radius.right ? rootElementSettings.popup_close_button_border_radius.right : \"0\") + rootElementSettings.popup_close_button_border_radius.unit;\r\n    //   let borderRadiusBottom = (rootElementSettings.popup_close_button_border_radius.bottom ? rootElementSettings.popup_close_button_border_radius.bottom : \"0\") + rootElementSettings.popup_close_button_border_radius.unit;\r\n    //   let borderRadiusLeft = (rootElementSettings.popup_close_button_border_radius.left ?  rootElementSettings.popup_close_button_border_radius.left  : \"0\")+ rootElementSettings.popup_close_button_border_radius.unit;\r\n    //   styleButtonClose.borderRadius = `${borderRadiusTop} ${borderRadiusRight} ${borderRadiusBottom} ${borderRadiusLeft}`;\r\n    // }\r\n\r\n    // if(rootElementSettings.popup_close_button_background_color) {\r\n    //   styleButtonClose.backgroundColor = rootElementSettings.popup_close_button_background_color.colorPickedHex;\r\n    // }\r\n\r\n    // if(rootElementSettings.popup_close_button_box_shadow) {\r\n    //   let type = rootElementSettings.popup_close_button_box_shadow.type;\r\n    //   let offsetX = rootElementSettings.popup_close_button_box_shadow.horizontal;\r\n    //   let offsetY = rootElementSettings.popup_close_button_box_shadow.vertical;\r\n    //   let blurRadius = rootElementSettings.popup_close_button_box_shadow.blur;\r\n    //   let spreadRadius = rootElementSettings.popup_close_button_box_shadow.spread;\r\n    //   let color = rootElementSettings.popup_close_button_box_shadow.colorPickedHex;\r\n    //   styleButtonClose.boxShadow = `${type} ${offsetX}px ${offsetY}px ${blurRadius}px ${spreadRadius} ${color}`;\r\n    // }\r\n\r\n    let content = \"\";\r\n    const closeButtonCondition =\r\n      rootElementSettings.switcher_close_button_popup_layout || true;\r\n    let { popup_close_icon_alignment } = rootElementSettings;\r\n    popup_close_icon_alignment = popup_close_icon_alignment || \"right\";\r\n    const closeButton = closeButtonCondition ? (\r\n      <button\r\n        className={\r\n          \"popup-close-button\" +\r\n          (popup_close_icon_alignment === \"right\"\r\n            ? \" popup-close-button-right\"\r\n            : \" popup-close-button-left\")\r\n        }\r\n        onClick={() => {\r\n          this.setState({ isVisible: false });\r\n          this.props.closePopup();\r\n        }}\r\n      >\r\n        <AltrpImage\r\n          image={rootElementSettings.popup_close_icon}\r\n          lazy={false}\r\n          default={{\r\n            assetType: \"icon\",\r\n            name: \"deleteOne\",\r\n            url: \"/img/nullImage.png\"\r\n          }}\r\n          className=\"popup-close-button-icon\"\r\n        />\r\n      </button>\r\n    ) : null;\r\n\r\n    let maxHeight = \"100%\";\r\n\r\n    if (rootElementSettings.height_popup_layout === \"custom\") {\r\n      maxHeight =\r\n        Number(rootElementSettings.height_custom_popup_layout.size) || 0;\r\n    }\r\n\r\n    const popup = isVisible ? (\r\n      <FrontPopupWrapper\r\n        settings={rootElementSettings}\r\n        className={classes.join(\" \")}\r\n        onClick={() => {\r\n          if (\r\n            rootElementSettings.popup_close_click_on_dark_area === undefined ||\r\n            rootElementSettings.popup_close_click_on_dark_area\r\n          ) {\r\n            this.setState({ isVisible: false });\r\n            this.props.closePopup();\r\n          }\r\n        }}\r\n      >\r\n        <div\r\n          className=\"popup-window\"\r\n          // style={{ top: positioning_custom_top.size + positioning_custom_top.unit}}\r\n          onClick={e => e.stopPropagation()}\r\n        >\r\n          {closeButton}\r\n\r\n          <Scrollbars\r\n            autoHide\r\n            autoHeight\r\n            renderThumbHorizontal={props => (\r\n              <div {...props} className=\"popup-scrollbar-vertical\" />\r\n            )}\r\n            renderTrackHorizontal={() => (\r\n              <div className=\"popup-scrollbar-track-horizontal\" />\r\n            )}\r\n            renderTrackVertical={props => (\r\n              <div {...props} className=\"popup-scrollbar-track-vertical\" />\r\n            )}\r\n            className=\"popup-scrollbar\"\r\n            autoHeightMin={100}\r\n            autoHeightMax={maxHeight}\r\n            autoHideTimeout={1000}\r\n            autoHideDuration={200}\r\n          >\r\n            <div className=\"popup-content\">\r\n              {React.createElement(rootElement.componentClass, {\r\n                element: rootElement,\r\n                ElementWrapper :this.ElementWrapper,\r\n                children: rootElement.children\r\n              })}\r\n            </div>\r\n          </Scrollbars>\r\n        </div>\r\n      </FrontPopupWrapper>\r\n    ) : null;\r\n    const type = rootElementSettings.type_popup || \"popup\";\r\n    switch (type) {\r\n      case \"popup\":\r\n        content = popup;\r\n        break;\r\n      case \"offcanvas\":\r\n        content = (\r\n          <AltrpOffcanvas\r\n            close={this.close}\r\n            show={this.state.isVisible}\r\n            settings={rootElementSettings}\r\n            template={rootElement}\r\n          />\r\n        );\r\n        break;\r\n    }\r\n    return content;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    scrollPosition: state.scrollPosition,\r\n    popupTrigger: state.popupTrigger\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    closePopup: () => dispatch(togglePopup(null))\r\n  };\r\n};\r\n\r\nexport default window.reactRedux.connect(mapStateToProps, mapDispatchToProps)(FrontPopup);\r\n"],"sourceRoot":""}