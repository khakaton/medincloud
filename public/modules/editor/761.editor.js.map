{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/components/widgets/InputTextWidget.js"],"names":["moment","window","altrpHelpers","globalDefaults","push","AltrpFieldContainer","styled","div","settings","content_label_position_type","InputTextWidget","props","timeInput","handleEnter","e","keyCode","preventDefault","inputs","Array","from","document","querySelectorAll","index","indexOf","target","undefined","focus","element","getSettings","create_allowed","create_label","create_url","createItem","debounceDispatch","_","debounce","value","dispatchFieldValueToStore","onFocus","focus_actions","isEditor","actionsManager","default","callAllWidgetActions","getIdForAction","onBlur","editor","get","getData","userInput","formId","getFormId","fieldName","getFieldId","replaceContentWithData","isObject","appStore","dispatch","changeFormFieldValue","change_actions","inputValue","create_data","select2_multiple","currentModel","getCurrentModel","data","parseParamsFromString","url","parseURLTemplate","setState","state","isDisabled","resource","Resource","route","post","res","success","newOption","label","options","unshift","selectStateManager","menuIsOpen","console","error","component","elementDecorator","onChange","bind","defaultValue","getContent","parseOptionsFromSettings","paramsForUpdate","altrpSelectRef","React","createRef","this","prevProps","prevState","getProperty","contentLoaded","currentDataStorage","content_options","model_for_options","isEqual","dynamic","formsStore","updateOptions","updateValue","content_calculation","altrpforms","prevContext","altrpdata","altrpmodel","altrpuser","currentUser","altrppagestate","altrpPageState","altrpresponses","altrpmeta","altrpMeta","context","currentDataStorageLoaded","changedField","altrpstorage","getDataFromLocalStorage","replace","eval","message","getId","path","formData","AltrpModel","isEmpty","JSON","stringify","getRoute","getQueried","filters","isArray","getAll","valueToDispatch","cloneDeep","change_change_end","change_change_end_delay","clearTimeout","setTimeout","optionsDynamicSetting","getDynamicSetting","convertData","sortBy","o","toString","content_readonly","label_icon","classLabel","styleLabel","getResponsiveSetting","marginBottom","label_style_spacing","size","unit","marginTop","marginRight","position","zIndex","content_label","className","style","content_required","assetType","renderAssetIcon","autocomplete","content_autocomplete","isClearable","content_clearable","input","type","name","getName","readOnly","autoComplete","placeholder","content_placeholder","position_css_classes","onKeyDown","id","position_css_id","onClick","Component"],"mappings":"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","file":"761.editor.js","sourcesContent":["import {\r\n  convertData,\r\n  isEditor,\r\n  parseOptionsFromSettings,\r\n  parseParamsFromString,\r\n  parseURLTemplate,\r\n  replaceContentWithData,\r\n  renderAssetIcon,\r\n  getDataFromLocalStorage\r\n} from \"../../../../../front-app/src/js/helpers\";\r\nimport Resource from \"../../classes/Resource\";\r\nimport { changeFormFieldValue } from \"../../../../../front-app/src/js/store/forms-data-storage/actions\";\r\nimport AltrpModel from \"../../classes/AltrpModel\";\r\nimport AltrpInput from \"../altrp-input/AltrpInput\";\r\n\r\nconst { moment } = window.altrpHelpers;\r\n(window.globalDefaults = window.globalDefaults || []).push(`\r\n.altrp-field-label_text-widget{\r\n    width: 100%;\r\n}\r\n.bp3-icon_text-widget img{\r\n  width: 16px;\r\n  height: 16px;\r\n  object-fit: contain;\r\n  pointer-events: none;\r\n}\r\n.bp3-icon_text-widget svg{\r\n  width: 16px;\r\n  height: 16px;\r\n  pointer-events: none;\r\n}\r\n.bp3-icon_right{\r\n    margin: 7px;\r\n}\r\n.altrp-field {\r\n  border-style: solid;\r\n  width: 100%;\r\n}\r\n.altrp-field-file{\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.altrp-label-icon svg,\r\n.altrp-label-icon img {\r\n  width: 20px;\r\n}\r\n.altrp-label-icon svg{\r\n  height: 20px;\r\n}\r\n.altrp-field-file__field{\r\n  display: none;\r\n}\r\n.altrp-field-file__placeholder{\r\n  display: none;\r\n}\r\n.altrp-field-file_empty .altrp-field-file__placeholder{\r\n  display: block;\r\n  padding: 10px 20px;\r\n  border: none;\r\n  cursor: pointer;\r\n  background-color: rgb(52,59,76);\r\n  color: #fff;\r\n}\r\n.input-clear-btn {\r\n  background: transparent;\r\n  padding: 0;\r\n  position: absolute;\r\n  bottom: calc(50% - 7px);\r\n  right: 15px;\r\n  display: none;\r\n}\r\n.input-clear-btn:hover {\r\n  font-weight: bold;\r\n}\r\n.altrp-field:hover + .input-clear-btn, .input-clear-btn:hover {\r\n  display: block;\r\n}\r\n.altrp-input-wrapper, .altrp-field-select2 {\r\n  position: relative;\r\n  flex-grow: 1;\r\n}\r\n.altrp-field-label--required::after {\r\n  content: \"*\";\r\n  color: red;\r\n  font-size: inherit;\r\n  padding-left: 10px;\r\n}\r\n.altrp-field-label {\r\n  font-size: 16px;\r\n  font-family: \"Open Sans\";\r\n  line-height: 1.5;\r\n  letter-spacing: 0;\r\n}\r\n.altrp-field-select2__single-value, .altrp-field {\r\n  font-size: 16px;\r\n  font-family: \"Open Sans\";\r\n  line-height: 1.5;\r\n  letter-spacing: 0;\r\n}\r\n.altrp-field-select2__control, .altrp-field {\r\n  text-align: left;\r\n  padding-top: 2px;\r\n  padding-right: 2px;\r\n  padding-bottom: 2px;\r\n  padding-left: 2px;\r\n  border-width: 1px;\r\n  border-color: #000;\r\n}\r\n.altrp-field-select2__control:hover{\r\n  border-width: 1px;\r\n  border-color: #000;\r\n}\r\n.altrp-field-container {\r\n  margin: 0;\r\n}\r\n.altrp-field::placeholder, .altrp-field-select2__placeholder {\r\n  font-size: 13px;\r\n  font-family: \"Open Sans\";\r\n  line-height: 1.5;\r\n  letter-spacing: 0;\r\n}\r\n.altrp-image-select {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n}\r\n.altrp-image-select img {\r\n  flex-grow: 1;\r\n  object-fit: contain;\r\n}\r\n.altrp-field {\r\n  overflow: hidden;\r\n  cursor: pointer;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n}\r\n.altrp-field.active {\r\n  border-color: lightcoral;\r\n}\r\n.altrp-field-label {\r\n  text-align: center;\r\n  display: block;\r\n}\r\n.altrp-pagination__select-size .altrp-field-select2__single-value {\r\n  font-size: 14px;\r\n}\r\n.altrp-pagination__select-size .altrp-field-select2__indicator-separator {\r\n  display: none;\r\n}\r\n.altrp-pagination__select-size .altrp-field-select2__indicator {\r\n  align-items: center;\r\n}\r\n.altrp-pagination__select-size .altrp-field-select2__control {\r\n  width: 100px;\r\n  min-height: 32px;\r\n  padding: 0;\r\n  border-radius: 0;\r\n  outline: none;\r\n  border-color: rgb(142,148,170);\r\n  -webkit-box-shadow: none;\r\n  -moz-box-shadow: none;\r\n  box-shadow: none;\r\n}\r\n.altrp-pagination__select-size .altrp-field-select2__control input {\r\n  border: none;\r\n}\r\n.altrp-field-select2 {\r\n  position: relative;\r\n  box-sizing: border-box;\r\n  pointer-events: none;\r\n}\r\n.altrp-field-select2__control {\r\n  webkit-align-items: center;\r\n  -webkit-box-align: center;\r\n  -ms-flex-align: center;\r\n  align-items: center;\r\n  background-color: hsl(0,0%,100%);\r\n  border-color: hsl(0,0%,80%);\r\n  border-style: solid;\r\n  border-width: 1px;\r\n  cursor: default;\r\n  display: -webkit-box;\r\n  display: -webkit-flex;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -webkit-flex-wrap: wrap;\r\n  -ms-flex-wrap: wrap;\r\n  flex-wrap: wrap;\r\n  -webkit-box-pack: justify;\r\n  -webkit-justify-content: space-between;\r\n  -ms-flex-pack: justify;\r\n  justify-content: space-between;\r\n  min-height: 38px;\r\n  outline: 0 !important;\r\n  position: relative;\r\n  -webkit-transition: all 100ms;\r\n  transition: all 100ms;\r\n  box-sizing: border-box;\r\n}\r\n.altrp-field-select2__value-container {\r\n  -webkit-align-items: center;\r\n  -webkit-box-align: center;\r\n  -ms-flex-align: center;\r\n  align-items: center;\r\n  display: -webkit-box;\r\n  display: -webkit-flex;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -webkit-flex: 1;\r\n  -ms-flex: 1;\r\n  flex: 1;\r\n  -webkit-flex-wrap: wrap;\r\n  -ms-flex-wrap: wrap;\r\n  flex-wrap: wrap;\r\n  padding: 2px 8px;\r\n  -webkit-overflow-scrolling: touch;\r\n  position: relative;\r\n  overflow: hidden;\r\n  box-sizing: border-box;\r\n}\r\n.altrp-field-select2__single-value {\r\n  color: hsl(0,0%,20%);\r\n  margin-left: 2px;\r\n  margin-right: 2px;\r\n  max-width: calc(100% - 8px);\r\n  overflow: hidden;\r\n  position: absolute;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n  top: 50%;\r\n  -webkit-transform: translateY(-50%);\r\n  -ms-transform: translateY(-50%);\r\n  transform: translateY(-50%);\r\n  box-sizing: border-box;\r\n}\r\n.altrp-field-select2__indicators {\r\n  -webkit-align-items: center;\r\n  -webkit-box-align: center;\r\n  -ms-flex-align: center;\r\n  align-items: center;\r\n  -webkit-align-self: stretch;\r\n  -ms-flex-item-align: stretch;\r\n  align-self: stretch;\r\n  display: -webkit-box;\r\n  display: -webkit-flex;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -webkit-flex-shrink: 0;\r\n  -ms-flex-negative: 0;\r\n  flex-shrink: 0;\r\n  box-sizing: border-box;\r\n}\r\n.altrp-field-select2__indicator-separator {\r\n  -webkit-align-self: stretch;\r\n  -ms-flex-item-align: stretch;\r\n  align-self: stretch;\r\n  background-color: hsl(0,0%,80%);\r\n  margin-bottom: 8px;\r\n  margin-top: 8px;\r\n  width: 1px;\r\n  box-sizing: border-box;\r\n}\r\n.altrp-field-select2__indicator {\r\n  color: hsl(0,0%,80%);\r\n  display: -webkit-box;\r\n  display: -webkit-flex;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  padding: 8px;\r\n  -webkit-transition: color 150ms;\r\n  transition: color 150ms;\r\n  box-sizing: border-box;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n.tba-placeholder {\r\n  display: flex;\r\n  justify-content: center;\r\n  font-size: 28px;\r\n  font-weight: bold;\r\n}\r\n.altrp-field-subgroup {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n}\r\n.altrp-field-option {\r\n  display: flex;\r\n  padding: 10px;\r\n}\r\n.altrp-field-option__label {\r\n  cursor: pointer;\r\n}\r\ntextarea.altrp-field {\r\n  display: block;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__placeholder {\r\n  white-space: nowrap;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__single-value {\r\n  font-size: 14px;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__indicator-separator {\r\n  display: none;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__indicator {\r\n  align-items: center;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__control {\r\n  width: 100%;\r\n  min-height: 19px;\r\n  padding: 0;\r\n  border-radius: 0;\r\n  outline: none;\r\n  border-color: rgb(142, 148, 170);\r\n  -webkit-box-shadow: none;\r\n  -moz-box-shadow: none;\r\n  box-shadow: none;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__control input {\r\n  border: none;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__value-container {\r\n  padding-top: 0;\r\n  padding-bottom: 0;\r\n  line-height: 13px;\r\n}\r\n.altrp-field-required {\r\n  color: red;\r\n  font-size: 18px;\r\n  padding-left: 10px;\r\n}\r\n.altrp-field-container-label {\r\n  display: flex;\r\n  flex-direction: row;\r\n}\r\n\r\n.altrp-field-label-container-left {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.altrp-field-label-container {\r\n  display: inline-flex;\r\n  align-items: center;\r\n}\r\n.altrp-field-select2__indicator.altrp-field-select2__dropdown-indicator {\r\n  padding: 0 8px;\r\n  max-height: 14px;\r\n  overflow: hidden;\r\n}\r\n.altrp-field-select2 .altrp-field-select2__value-container {\r\n  padding: 0px 8px;\r\n}\r\n.altrp-field-select2 .css-b8ldur-Input {\r\n  padding-bottom: 0px;\r\n  padding-top: 0px;\r\n  margin: 0 2px;\r\n}\r\n.altrp-field-select2 .altrp-field-select2__control {\r\n  min-height: 14px;\r\n}\r\n`)\r\n\r\nconst AltrpFieldContainer = styled.div`\r\n  ${({ settings: { content_label_position_type } }) => {\r\n    switch (content_label_position_type) {\r\n      case \"left\": {\r\n        return \"display: flex\";\r\n      }\r\n      case \"right\": {\r\n        return \"display:flex;flex-direction:row-reverse;justify-content:flex-end;\";\r\n      }\r\n    }\r\n    return \"\";\r\n  }}\r\n`;\r\n\r\nclass InputTextWidget extends Component {\r\n  timeInput = null;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    props.element.component = this;\r\n    if (window.elementDecorator) {\r\n      window.elementDecorator(this);\r\n    }\r\n    this.onChange = this.onChange.bind(this);\r\n    this.debounceDispatch = this.debounceDispatch.bind(this);\r\n\r\n    this.defaultValue = this.getContent(\"content_default_value\") || \"\";\r\n    this.state = {\r\n      settings: { ...props.element.getSettings() },\r\n      value: this.defaultValue,\r\n      options: parseOptionsFromSettings(\r\n        props.element.getSettings(\"content_options\")\r\n      ),\r\n      paramsForUpdate: null\r\n    };\r\n    this.altrpSelectRef = React.createRef();\r\n    if (this.getContent(\"content_default_value\")) {\r\n      this.dispatchFieldValueToStore(this.getContent(\"content_default_value\"));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Чистит значение\r\n   */\r\n  clearValue() {\r\n    this.onChange(\"\");\r\n    this.dispatchFieldValueToStore(\"\", true);\r\n  }\r\n\r\n  /**\r\n   * Обработка нажатия клавиши\r\n   * @param {{}} e\r\n   */\r\n  handleEnter = e => {\r\n    if (e.keyCode === 13) {\r\n      e.preventDefault();\r\n      const inputs = Array.from(document.querySelectorAll(\"input,select\"));\r\n      const index = inputs.indexOf(e.target);\r\n      if (index === undefined) return;\r\n      inputs[index + 1] && inputs[index + 1].focus();\r\n      const {\r\n        create_allowed,\r\n        create_label,\r\n        create_url\r\n      } = this.props.element.getSettings();\r\n      if (create_allowed && create_label && create_url) {\r\n        this.createItem(e);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Загрузка виджета\r\n   * @param {{}} prevProps\r\n   * @param {{}} prevState\r\n   */\r\n  async _componentDidMount(prevProps, prevState) {\r\n    if (this.props.element.getSettings(\"content_options\")) {\r\n      let options = parseOptionsFromSettings(\r\n        this.props.element.getSettings(\"content_options\")\r\n      );\r\n\r\n      this.setState(state => ({ ...state, options }));\r\n    }\r\n\r\n    let value = this.state.value;\r\n\r\n    /**\r\n     * Если динамическое значение загрузилось,\r\n     * то используем this.getContent для получение этого динамического значения\r\n     * старые динамические данные\r\n     * */\r\n    if (\r\n      _.get(value, \"dynamic\") &&\r\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\r\n    ) {\r\n      value = this.getContent(\"content_default_value\");\r\n    }\r\n\r\n    /**\r\n     * Если модель обновилась при смене URL\r\n     */\r\n    if (\r\n      prevProps &&\r\n      !prevProps.currentModel.getProperty(\"altrpModelUpdated\") &&\r\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\r\n    ) {\r\n      value = this.getContent(\"content_default_value\");\r\n      this.setState(\r\n        state => ({ ...state, value, contentLoaded: true }),\r\n        () => {\r\n          this.dispatchFieldValueToStore(value);\r\n        }\r\n      );\r\n      return;\r\n    }\r\n\r\n    if (\r\n      this.props.currentModel.getProperty(\"altrpModelUpdated\") &&\r\n      this.props.currentDataStorage.getProperty(\"currentDataStorageLoaded\") &&\r\n      !this.state.contentLoaded\r\n    ) {\r\n      value = this.getContent(\"content_default_value\");\r\n      this.setState(\r\n        state => ({ ...state, value, contentLoaded: true }),\r\n        () => {\r\n          this.dispatchFieldValueToStore(value);\r\n        }\r\n      );\r\n      return;\r\n    }\r\n\r\n    if (this.state.value !== value) {\r\n      this.setState(\r\n        state => ({ ...state, value }),\r\n        () => {\r\n          this.dispatchFieldValueToStore(value);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Получить url для запросов\r\n   */\r\n  getRoute() {\r\n    let url = this.props.element.getSettings(\"model_for_options\");\r\n\r\n    if (url.indexOf(\"/\") === -1) {\r\n      return `/ajax/models/${url}_options`;\r\n    }\r\n    if (url.indexOf(\"{{\") !== -1) {\r\n      url = replaceContentWithData(url);\r\n    }\r\n    return url;\r\n  }\r\n\r\n  /**\r\n   * Обновление виджета\r\n   */\r\n  async _componentDidUpdate(prevProps, prevState) {\r\n    const { content_options, model_for_options } = this.state.settings;\r\n\r\n    if (\r\n      prevProps &&\r\n      !prevProps.currentDataStorage.getProperty(\"currentDataStorageLoaded\") &&\r\n      this.props.currentDataStorage.getProperty(\"currentDataStorageLoaded\")\r\n    ) {\r\n      let value = this.getContent(\r\n        \"content_default_value\",\r\n        this.props.element.getSettings(\"select2_multiple\")\r\n      );\r\n      this.setState(\r\n        state => ({ ...state, value, contentLoaded: true }),\r\n        () => {\r\n          this.dispatchFieldValueToStore(value);\r\n        }\r\n      );\r\n    }\r\n\r\n    /**\r\n     * Если обновилась модель, то пробрасываем в стор новое значение (старый источник диамических данных)\r\n     */\r\n    if (\r\n      !_.isEqual(this.props.currentModel, prevProps.currentModel) &&\r\n      this.state.value &&\r\n      this.state.value.dynamic\r\n    ) {\r\n      this.dispatchFieldValueToStore(this.getContent(\"content_default_value\"));\r\n    }\r\n\r\n    /**\r\n     * Если обновилось хранилище данных формы, currentDataStorage или модель, то получаем новые опции c сервера\r\n     */\r\n    if (\r\n      this.props.formsStore !== prevProps.formsStore ||\r\n      this.props.currentModel !== prevProps.currentModel ||\r\n      this.props.currentDataStorage !== prevProps.currentDataStorage\r\n    ) {\r\n      this.updateOptions();\r\n    }\r\n    if (content_options && !model_for_options) {\r\n      let options = parseOptionsFromSettings(content_options);\r\n      if (!_.isEqual(options, this.state.options)) {\r\n        this.setState(state => ({ ...state, options }));\r\n      }\r\n    }\r\n    this.updateValue(prevProps);\r\n  }\r\n\r\n  /**\r\n   * Обновить значение если нужно\r\n   * @param {{}} prevProps\r\n   */\r\n  updateValue(prevProps) {\r\n\r\n    if (isEditor()) {\r\n      return;\r\n    }\r\n\r\n    let content_calculation = this.props.element.getSettings(\r\n      \"content_calculation\"\r\n    );\r\n    const altrpforms = this.props.formsStore;\r\n    const fieldName = this.props.element.getFieldId();\r\n    const formId = this.props.element.getFormId();\r\n\r\n    if (!content_calculation) {\r\n      /**\r\n       * Обновить значение, если formsStore изменилось из другого компонента\r\n       */\r\n      const path = `${formId}.${fieldName}`;\r\n      if (\r\n        this.props.formsStore !== prevProps.formsStore &&\r\n        _.get(altrpforms, path) !== this.state.value\r\n      ) {\r\n        this.setState(state => ({\r\n          ...state,\r\n          value: _.get(altrpforms, path)\r\n        }));\r\n      }\r\n      return;\r\n    }\r\n\r\n    const prevContext = {};\r\n    const altrpdata = this.props.currentDataStorage.getData();\r\n    const altrpmodel = this.props.currentModel.getData();\r\n    const altrpuser = this.props.currentUser.getData();\r\n    const altrppagestate = this.props.altrpPageState.getData();\r\n    const altrpresponses = this.props.altrpresponses.getData();\r\n    const altrpmeta = this.props.altrpMeta.getData();\r\n    const context = this.props.element.getCurrentModel().getData();\r\n\r\n    if (content_calculation.indexOf(\"altrpdata\") !== -1) {\r\n      context.altrpdata = altrpdata;\r\n      if (!altrpdata.currentDataStorageLoaded) {\r\n        prevContext.altrpdata = altrpdata;\r\n      } else {\r\n        prevContext.altrpdata = prevProps.currentDataStorage.getData();\r\n      }\r\n    }\r\n\r\n    if (content_calculation.indexOf(\"altrpforms\") !== -1) {\r\n      context.altrpforms = altrpforms;\r\n      /**\r\n       * Не производим вычисления, если изменилось текущее поле\r\n       */\r\n      if (`${formId}.${fieldName}` === altrpforms.changedField) {\r\n        prevContext.altrpforms = altrpforms;\r\n      } else {\r\n        prevContext.altrpforms = prevProps.formsStore;\r\n      }\r\n    }\r\n\r\n    if (content_calculation.indexOf(\"altrpmodel\") !== -1) {\r\n      context.altrpmodel = altrpmodel;\r\n      prevContext.altrpmodel = prevProps.currentModel.getData();\r\n    }\r\n\r\n    if (content_calculation.indexOf(\"altrpuser\") !== -1) {\r\n      context.altrpuser = altrpuser;\r\n      prevContext.altrpuser = prevProps.currentUser.getData();\r\n    }\r\n\r\n    if (content_calculation.indexOf(\"altrpuser\") !== -1) {\r\n      context.altrpuser = altrpuser;\r\n      prevContext.altrpuser = prevProps.currentUser.getData();\r\n    }\r\n\r\n    if (content_calculation.indexOf(\"altrppagestate\") !== -1) {\r\n      context.altrppagestate = altrppagestate;\r\n      prevContext.altrppagestate = prevProps.altrpPageState.getData();\r\n    }\r\n\r\n    if (content_calculation.indexOf(\"altrpmeta\") !== -1) {\r\n      context.altrpmeta = altrpmeta;\r\n      prevContext.altrpmeta = prevProps.altrpMeta.getData();\r\n    }\r\n\r\n    if (content_calculation.indexOf(\"altrpresponses\") !== -1) {\r\n      context.altrpresponses = altrpresponses;\r\n      prevContext.altrpresponses = prevProps.altrpresponses.getData();\r\n    }\r\n\r\n    if (content_calculation.indexOf(\"altrpstorage\") !== -1) {\r\n      context.altrpstorage = getDataFromLocalStorage(\"altrpstorage\", {});\r\n    }\r\n\r\n    if (\r\n      _.isEqual(prevProps.currentDataStorage, this.props.currentDataStorage) &&\r\n      _.isEqual(prevProps.currentUser, this.props.currentUser) &&\r\n      _.isEqual(prevProps.formsStore, this.props.formsStore) &&\r\n      _.isEqual(prevProps.altrpPageState, this.props.altrpPageState) &&\r\n      _.isEqual(prevProps.altrpMeta, this.props.altrpMeta) &&\r\n      _.isEqual(prevProps.altrpresponses, this.props.altrpresponses) &&\r\n      _.isEqual(prevProps.currentModel, this.props.currentModel)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    if (\r\n      !_.isEqual(prevProps.formsStore, this.props.formsStore) &&\r\n      `${formId}.${fieldName}` === altrpforms.changedField\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    let value = \"\";\r\n\r\n    try {\r\n      content_calculation = content_calculation\r\n        .replace(/}}/g, \"')\")\r\n        .replace(/{{/g, \"_.get(context, '\");\r\n      value = eval(content_calculation);\r\n      if (value === this.state.value) {\r\n        return;\r\n      }\r\n      this.setState(\r\n        state => ({ ...state, value }),\r\n        () => {\r\n          this.dispatchFieldValueToStore(value);\r\n        }\r\n      );\r\n    } catch (e) {\r\n      console.error(\r\n        \"Evaluate error in Input \" + e.message,\r\n        this.props.element.getId()\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Обновляет опции для селекта при обновлении данных, полей формы\r\n   */\r\n  async updateOptions() {\r\n    {\r\n      let formId = this.props.element.getFormId();\r\n      let paramsForUpdate = this.props.element.getSettings(\"params_for_update\");\r\n      let formData = _.get(this.props.formsStore, [formId], {});\r\n      paramsForUpdate = parseParamsFromString(\r\n        paramsForUpdate,\r\n        new AltrpModel(formData)\r\n      );\r\n      /**\r\n       * Сохраняем параметры запроса, и если надо обновляем опции\r\n       */\r\n      let options = [...this.state.options];\r\n\r\n      if (!_.isEqual(paramsForUpdate, this.state.paramsForUpdate)) {\r\n        if (!_.isEmpty(paramsForUpdate)) {\r\n          if (this.props.element.getSettings(\"params_as_filters\", false)) {\r\n            paramsForUpdate = JSON.stringify(paramsForUpdate);\r\n            options = await new Resource({\r\n              route: this.getRoute()\r\n            }).getQueried({ filters: paramsForUpdate });\r\n          } else {\r\n            options = await new Resource({ route: this.getRoute() }).getQueried(\r\n              paramsForUpdate\r\n            );\r\n          }\r\n          options = !_.isArray(options) ? options.data : options;\r\n          options = _.isArray(options) ? options : [];\r\n        } else if (this.state.paramsForUpdate) {\r\n          options = await new Resource({ route: this.getRoute() }).getAll();\r\n          options = !_.isArray(options) ? options.data : options;\r\n          options = _.isArray(options) ? options : [];\r\n        }\r\n\r\n        this.setState(state => ({\r\n          ...state,\r\n          paramsForUpdate,\r\n          options\r\n        }));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Изменение значения в виджете\r\n   * @param e\r\n   * @param  editor для получения изменений из CKEditor\r\n   */\r\n  onChange(e, editor = null) {\r\n    let value = \"\";\r\n    let valueToDispatch;\r\n\r\n    if (e && e.target) {\r\n      value = e.target.value;\r\n    }\r\n\r\n    if (e && e.value) {\r\n      value = e.value;\r\n    }\r\n\r\n    if (_.get(editor, \"getData\")) {\r\n      value = `<div class=\"ck ck-content\" style=\"width:100%\">${editor.getData()}</div>`;\r\n    }\r\n\r\n    if (_.isArray(e)) {\r\n      value = _.cloneDeep(e);\r\n    }\r\n\r\n    if (\r\n      this.props.element.getSettings(\"content_options_nullable\") &&\r\n      e &&\r\n      e.value === \"<null>\"\r\n    ) {\r\n      value = null;\r\n    }\r\n\r\n    this.setState(\r\n      state => ({\r\n        ...state,\r\n        value\r\n      }),\r\n      () => {\r\n        /**\r\n         * Обновляем хранилище только если не текстовое поле\r\n         */\r\n\r\n        const change_actions = this.props.element.getSettings(\"change_actions\");\r\n        const change_change_end = this.props.element.getSettings(\r\n          \"change_change_end\"\r\n        );\r\n        const change_change_end_delay = this.props.element.getSettings(\r\n          \"change_change_end_delay\"\r\n        );\r\n\r\n        if (change_actions && !change_change_end && !isEditor()) {\r\n          this.debounceDispatch(\r\n            valueToDispatch !== undefined ? valueToDispatch : value\r\n          );\r\n        }\r\n        if (change_actions && change_change_end && !isEditor()) {\r\n          this.timeInput && clearTimeout(this.timeInput);\r\n          this.timeInput = setTimeout(() => {\r\n            this.debounceDispatch(\r\n              valueToDispatch !== undefined ? valueToDispatch : value\r\n            );\r\n          }, change_change_end_delay);\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  debounceDispatch = _.debounce(\r\n    value => this.dispatchFieldValueToStore(value, true),\r\n    150\r\n  );\r\n\r\n  /**\r\n   * получить опции\r\n   */\r\n  getOptions() {\r\n    let options = [...this.state.options];\r\n    const optionsDynamicSetting = this.props.element.getDynamicSetting(\r\n      \"content_options\"\r\n    );\r\n\r\n    if (optionsDynamicSetting) {\r\n      options = convertData(optionsDynamicSetting, options);\r\n    }\r\n\r\n    if (!this.props.element.getSettings(\"sort_default\")) {\r\n      options = _.sortBy(options, o => o && (o.label ? o.label.toString() : o));\r\n    }\r\n\r\n    return options;\r\n  }\r\n\r\n  /**\r\n   * Для действие по фокусу\r\n   * @param e\r\n   * @return {Promise<void>}\r\n   */\r\n\r\n  onFocus = async e => {\r\n    const focus_actions = this.props.element.getSettings(\"focus_actions\");\r\n\r\n    if (focus_actions && !isEditor()) {\r\n      const actionsManager = (\r\n        await import(\r\n          /* webpackChunkName: 'ActionsManager' */\r\n          \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\r\n        )\r\n      ).default;\r\n      await actionsManager.callAllWidgetActions(\r\n        this.props.element.getIdForAction(),\r\n        \"focus\",\r\n        focus_actions,\r\n        this.props.element\r\n      );\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Потеря фокуса для оптимизации\r\n   * @param  e\r\n   * @param  editor для получения изменений из CKEditor\r\n   */\r\n\r\n  onBlur = async (e, editor = null) => {\r\n    this.dispatchFieldValueToStore(e.target.value, true);\r\n\r\n    if (_.get(editor, \"getData\")) {\r\n      this.dispatchFieldValueToStore(editor.getData(), true);\r\n    }\r\n\r\n    if (this.props.element.getSettings(\"actions\", []) && !isEditor()) {\r\n      const actionsManager = (\r\n        await import(\r\n          /* webpackChunkName: 'ActionsManager' */\r\n          \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\r\n        )\r\n      ).default;\r\n      await actionsManager.callAllWidgetActions(\r\n        this.props.element.getIdForAction(),\r\n        \"blur\",\r\n        this.props.element.getSettings(\"actions\", []),\r\n        this.props.element\r\n      );\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Передадим значение в хранилище формы\r\n   * @param {*} value\r\n   * @param {boolean} userInput true - имзенилось пользователем\r\n   */\r\n  dispatchFieldValueToStore = async (value, userInput = false) => {\r\n    let formId = this.props.element.getFormId();\r\n    let fieldName = this.props.element.getFieldId();\r\n\r\n    if (fieldName.indexOf(\"{{\") !== -1) {\r\n      fieldName = replaceContentWithData(fieldName);\r\n    }\r\n\r\n    if (_.isObject(this.props.appStore) && fieldName && formId) {\r\n      this.props.appStore.dispatch(\r\n        changeFormFieldValue(fieldName, value, formId, userInput)\r\n      );\r\n\r\n      if (userInput) {\r\n        const change_actions = this.props.element.getSettings(\"change_actions\");\r\n\r\n        if (change_actions && !isEditor()) {\r\n          const actionsManager = (\r\n            await import(\r\n              /* webpackChunkName: 'ActionsManager' */\r\n              \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\r\n            )\r\n          ).default;\r\n          await actionsManager.callAllWidgetActions(\r\n            this.props.element.getIdForAction(),\r\n            \"change\",\r\n            change_actions,\r\n            this.props.element\r\n          );\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Обработка добавления опции по ajax\r\n   * @param {SyntheticKeyboardEvent} e\r\n   */\r\n  createItem = async e => {\r\n    const keyCode = e.keyCode;\r\n    const { value: inputValue } = e.target;\r\n\r\n    if (keyCode !== 13 || !inputValue) {\r\n      return;\r\n    }\r\n\r\n    const {\r\n      create_url,\r\n      create_label,\r\n      create_data,\r\n      select2_multiple\r\n    } = this.props.element.getSettings();\r\n\r\n    if (!create_label && !create_url) {\r\n      return;\r\n    }\r\n\r\n    const currentModel = this.props.element.getCurrentModel();\r\n    let data = parseParamsFromString(create_data, currentModel, true);\r\n    data[create_label] = inputValue;\r\n    let url = parseURLTemplate(create_url, currentModel.getData());\r\n    this.setState(state => ({ ...state, isDisabled: true }));\r\n\r\n    try {\r\n      const resource = new Resource({\r\n        route: url\r\n      });\r\n      let res = await resource.post(data);\r\n\r\n      if (res.success && _.get(res, \"data.id\")) {\r\n        let newOption = {\r\n          label: inputValue,\r\n          value: _.get(res, \"data.id\")\r\n        };\r\n\r\n        this.setState(\r\n          state => ({ ...state, isDisabled: false }),\r\n          () => {\r\n            let options = [...this.state.options];\r\n            options.unshift(newOption);\r\n            let value = this.state.value;\r\n            if (select2_multiple) {\r\n              value = value ? [...value] : [];\r\n              value.push(_.get(res, \"data.id\"));\r\n            } else {\r\n              value = _.get(res, \"data.id\");\r\n            }\r\n\r\n            this.setState(\r\n              state => ({ ...state, options, value }),\r\n              () => {\r\n                const selectStateManager = _.get(\r\n                  this,\r\n                  \"altrpSelectRef.current.selectRef.current\"\r\n                );\r\n\r\n                if (selectStateManager) {\r\n                  selectStateManager.setState({\r\n                    menuIsOpen: false,\r\n                    inputValue: \"\"\r\n                  });\r\n                }\r\n              }\r\n            );\r\n          }\r\n        );\r\n      }\r\n      this.setState(state => ({ ...state, isDisabled: false }));\r\n    } catch (error) {\r\n      console.error(error);\r\n      this.setState(state => ({ ...state, isDisabled: false }));\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Взовращает имя для атрибута name\r\n   * @return {string}\r\n   */\r\n  getName() {\r\n    return `${this.props.element.getFormId()}[${this.props.element.getFieldId()}]`;\r\n  }\r\n\r\n  render() {\r\n    let label = null;\r\n    const settings = this.props.element.getSettings();\r\n    const {\r\n      content_readonly,\r\n      select2_multiple: isMultiple,\r\n      label_icon\r\n    } = settings;\r\n\r\n    let value = this.state.value;\r\n\r\n    if (\r\n      _.get(value, \"dynamic\") &&\r\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\r\n    ) {\r\n      value = this.getContent(\"content_default_value\");\r\n    }\r\n\r\n    /**\r\n     * Пока динамический контент загружается (Еесли это динамический контент),\r\n     * нужно вывести пустую строку\r\n     */\r\n\r\n    if (value && value.dynamic) {\r\n      value = \"\";\r\n    }\r\n\r\n    let classLabel = \"\";\r\n    let styleLabel = {};\r\n    const content_label_position_type = this.props.element.getResponsiveSetting(\r\n      \"content_label_position_type\"\r\n    );\r\n\r\n    switch (content_label_position_type) {\r\n      case \"top\":\r\n        styleLabel = {\r\n          marginBottom: this.state.settings.label_style_spacing\r\n            ? this.state.settings.label_style_spacing.size +\r\n            this.state.settings.label_style_spacing.unit\r\n            : 2 + \"px\"\r\n        };\r\n        classLabel = \"\";\r\n        break;\r\n      case \"bottom\":\r\n        styleLabel = {\r\n          marginTop: this.state.settings.label_style_spacing\r\n            ? this.state.settings.label_style_spacing.size +\r\n            this.state.settings.label_style_spacing.unit\r\n            : 2 + \"px\"\r\n        };\r\n        classLabel = \"\";\r\n        break;\r\n      case \"left\":\r\n        styleLabel = {\r\n          marginRight: this.state.settings.label_style_spacing\r\n            ? this.state.settings.label_style_spacing.size +\r\n            this.state.settings.label_style_spacing.unit\r\n            : 2 + \"px\"\r\n        };\r\n        classLabel = \"altrp-field-label-container-left\";\r\n        break;\r\n      case \"absolute\":\r\n        styleLabel = {\r\n          position: \"absolute\",\r\n          zIndex: 2\r\n        };\r\n        classLabel = \"\";\r\n        break;\r\n    }\r\n\r\n    if (this.state.settings.content_label) {\r\n      label = (\r\n        <div\r\n          className={\"altrp-field-label-container \" + classLabel}\r\n          style={styleLabel}\r\n        >\r\n          <label\r\n            className={`altrp-field-label ${this.state.settings.content_required\r\n              ? \"altrp-field-label--required\"\r\n              : \"\"\r\n              }`}\r\n          >\r\n            {this.state.settings.content_label}\r\n          </label>\r\n          {label_icon && label_icon.assetType && (\r\n            <span className=\"altrp-label-icon\">\r\n              {renderAssetIcon(label_icon)}\r\n            </span>\r\n          )}\r\n        </div>\r\n      );\r\n    } else {\r\n      label = null;\r\n    }\r\n\r\n    let autocomplete = \"off\";\r\n    if (this.state.settings.content_autocomplete) {\r\n      autocomplete = \"on\";\r\n    } else {\r\n      autocomplete = \"off\";\r\n    }\r\n\r\n    const isClearable = this.state.settings.content_clearable;\r\n\r\n    const input = (\r\n      <div className=\"altrp-input-wrapper\">\r\n        <AltrpInput\r\n          type=\"text\"\r\n          name={this.getName()}\r\n          value={value || \"\"}\r\n          element={this.props.element}\r\n          readOnly={content_readonly}\r\n          autoComplete={autocomplete}\r\n          placeholder={this.state.settings.content_placeholder}\r\n          className={\r\n            \"altrp-field \" + this.state.settings.position_css_classes\r\n          }\r\n          settings={this.props.element.getSettings()}\r\n          onKeyDown={this.handleEnter}\r\n          onChange={this.onChange}\r\n          onBlur={this.onBlur}\r\n          onFocus={this.onFocus}\r\n          id={this.state.settings.position_css_id}\r\n        />\r\n        {isClearable && (\r\n          <button\r\n            className=\"input-clear-btn\"\r\n            onClick={() => this.setState({ value: this.defaultValue })}\r\n          >\r\n            ✖\r\n          </button>\r\n        )}\r\n      </div>\r\n    );\r\n\r\n    return (\r\n      <AltrpFieldContainer\r\n        settings={settings}\r\n        className=\"altrp-field-container \"\r\n      >\r\n        {content_label_position_type === \"top\" ? label : \"\"}\r\n        {content_label_position_type === \"left\" ? label : \"\"}\r\n        {content_label_position_type === \"right\" ? label : \"\"}\r\n        {content_label_position_type === \"absolute\" ? label : \"\"}\r\n        {/* .altrp-field-label-container */}\r\n        {input}\r\n        {content_label_position_type === \"bottom\" ? label : \"\"}\r\n      </AltrpFieldContainer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputTextWidget;\r\n"],"sourceRoot":""}