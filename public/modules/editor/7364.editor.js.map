{"version":3,"sources":["webpack:///./resources/modules/admin/src/components/dashboard/services/getWidgetData.js","webpack:///./resources/modules/admin/src/components/dashboard/widgets/DynamicLineChart.js","webpack:///./resources/modules/admin/src/components/dashboard/widgets/DynamicPieChart.js","webpack:///./resources/modules/admin/src/components/dashboard/widgets/DynamicPointChart.js","webpack:///./resources/modules/admin/src/components/dashboard/widgets/DynamicTableWidget.js","webpack:///./resources/modules/admin/src/components/dashboard/widgets/EmptyWidget.js","webpack:///./resources/modules/admin/src/components/dashboard/widgets/Spinner.js"],"names":["queryString","obj","data","Object","keys","reduce","str","key","i","encodeURIComponent","join","console","log","getWidgetData","url","filter","params","JSON","parse","axios","status","Tooltip","regagroScheme","_","find","Schemes","value","colors","milkScheme","milkScheme2","format","widget","width","height","margin","keyIsDate","dataSource","lineWidth","pointSize","xScaleType","precision","colorScheme","curve","enableArea","enablePoints","pointColor","yMarker","yMarkerValue","yMarkerOrientation","yMarkerColor","yMarkerLabel","yMarkerWidth","xMarker","xMarkerValue","xMarkerOrientation","xMarkerColor","xMarkerLabel","xMarkerWidth","yMarkerLabelColor","xMarkerLabelColor","sort","tickRotation","bottomAxis","enableGridX","enableGridY","customColorSchemeChecker","customColors","constantsAxises","yScaleMax","widgetID","useCustomTooltips","useState","isLoading","setIsLoading","setData","getData","useCallback","length","source","charts","newData","map","item","currentKey","keyFormatted","moment","isValid","y","Number","x","id","forEach","index","sortBy","useEffect","uniq","includes","style","top","right","bottom","left","xFormat","yScale","max","type","xScale","markers","axisBottom","useMesh","tooltip","datum","enable","scheme","colorPickedHex","from","modifiers","enableSliceLabels","innerRadius","padAngle","cornerRadius","sortByValue","enableRadialLabels","isDashboard","nodeSize","customStyle","summary","useMemo","acc","object","className","maxHeight","dataset","textAlign","colSpan","text","role"],"mappings":"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","file":"7364.editor.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const queryString = (obj = {}) => {\r\n  let data = Object.keys(obj).reduce((str, key, i) => {\r\n    let delimiter, val;\r\n    delimiter = i === 0 ? \"?\" : \"&\";\r\n    key = encodeURIComponent(key);\r\n    val = encodeURIComponent(obj[key]);\r\n    return [str, delimiter, key, \"=\", val].join(\"\");\r\n  }, \"\");\r\n  console.log(\"RESULT ==>\", data);\r\n  return data;\r\n};\r\n\r\nexport const getWidgetData = async (url, filter) => {\r\n  let params = \"\";\r\n  if (typeof filter === \"object\") {\r\n    params = queryString(filter);\r\n  } else if (typeof filter !== \"undefined\") {\r\n    params = queryString(JSON.parse(filter));\r\n  }\r\n  try {\r\n    return await axios(url + params, {\r\n      // headers: [{ key: \"Cache-Control\", value: \"no-store\" }]\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n    return { status: 500 };\r\n  }\r\n};\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { ResponsiveLine } from \"@nivo/line\";\r\nTooltip;\r\nimport Spinner from \"./Spinner\";\r\nimport EmptyWidget from \"./EmptyWidget\";\r\n\r\nimport Schemes from \"../../../../../editor/src/js/components/altrp-dashboards/settings/NivoColorSchemes\";\r\nconst regagroScheme = _.find(Schemes, { value: \"regagro\" }).colors;\r\nconst milkScheme = _.find(Schemes, { value: \"milk\" }).colors;\r\nconst milkScheme2 = _.find(Schemes, { value: \"milk2\" }).colors;\r\n\r\nimport { getWidgetData } from \"../services/getWidgetData\";\r\nimport moment from \"moment\";\r\nimport Tooltip from \"./d3/Tooltip\";\r\n\r\nconst format = \"%d.%m.%Y\";\r\n\r\nconst DynamicLineChart = ({\r\n  widget,\r\n  width = `300px`,\r\n  height = `450px`,\r\n  margin,\r\n  keyIsDate,\r\n  dataSource = [],\r\n  lineWidth = 2,\r\n  pointSize = 10,\r\n  xScaleType = \"point\",\r\n  precision = \"month\",\r\n  colorScheme = \"red_grey\",\r\n  curve = \"linear\",\r\n  enableArea = false,\r\n  enablePoints = true,\r\n  pointColor,\r\n  yMarker = false,\r\n  yMarkerValue = 0,\r\n  yMarkerOrientation = \"vertical\",\r\n  yMarkerColor,\r\n  yMarkerLabel = \"\",\r\n  yMarkerWidth = 2,\r\n  xMarker = false,\r\n  xMarkerValue = 0,\r\n  xMarkerOrientation = \"vertical\",\r\n  xMarkerColor,\r\n  xMarkerLabel = \"\",\r\n  xMarkerWidth = 2,\r\n  yMarkerLabelColor,\r\n  xMarkerLabelColor,\r\n  sort = \"\",\r\n  tickRotation = 0,\r\n  bottomAxis = true,\r\n  enableGridX = true,\r\n  enableGridY = true,\r\n  customColorSchemeChecker = false,\r\n  customColors = [],\r\n  constantsAxises = [],\r\n  yScaleMax,\r\n  widgetID,\r\n  useCustomTooltips\r\n}) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [data, setData] = useState([]);\r\n  const markers = () => {\r\n    let markerY = {};\r\n    let markerX = {};\r\n    if (yMarker) {\r\n      markerY = {\r\n        axis: \"y\",\r\n        value: yMarkerValue,\r\n        lineStyle: {\r\n          stroke:\r\n            yMarkerColor != null ? yMarkerColor.colorPickedHex : \"#000000\",\r\n          strokeWidth: yMarkerWidth\r\n        },\r\n        textStyle: {\r\n          fill:\r\n            yMarkerLabelColor != null\r\n              ? yMarkerLabelColor.colorPickedHex\r\n              : \"#000000\"\r\n        },\r\n        legend: yMarkerLabel,\r\n        legendOrientation: yMarkerOrientation\r\n      };\r\n    }\r\n    if (xMarker) {\r\n      markerX = {\r\n        axis: \"x\",\r\n        value: xMarkerValue,\r\n        lineStyle: {\r\n          stroke:\r\n            xMarkerColor != null ? xMarkerColor.colorPickedHex : \"#000000\",\r\n          strokeWidth: xMarkerWidth\r\n        },\r\n        textStyle: {\r\n          fill:\r\n            xMarkerLabelColor != null\r\n              ? xMarkerLabelColor.colorPickedHex\r\n              : \"#000000\"\r\n        },\r\n        legend: xMarkerLabel,\r\n        legendOrientation: xMarkerOrientation\r\n      };\r\n    }\r\n    if (!yMarker && !xMarker) return [];\r\n    if (yMarker && !xMarker) return [markerY];\r\n    if (!yMarker && xMarker) return [markerX];\r\n\r\n    return [markerY, markerX];\r\n  };\r\n\r\n  const getData = useCallback(async () => {\r\n    setIsLoading(true);\r\n    if (dataSource.length == 0) {\r\n      const charts = await getWidgetData(widget.source, widget.filter);\r\n      if (charts.status === 200) {\r\n        const newData = charts.data.data.map(item => {\r\n          const currentKey = item.key;\r\n          const keyFormatted = !moment(currentKey).isValid()\r\n            ? currentKey\r\n            : moment(currentKey).format(\"DD.MM.YYYY\");\r\n          return {\r\n            y: Number(item.data),\r\n            x: keyIsDate ? keyFormatted : currentKey\r\n          };\r\n        });\r\n        let data = [\r\n          {\r\n            id: \"\",\r\n            data: newData\r\n          }\r\n        ];\r\n        setData(data || []);\r\n        setIsLoading(false);\r\n      }\r\n    } else {\r\n      if (\r\n        sort !== null &&\r\n        sort !== \"undefined\" &&\r\n        typeof dataSource !== \"undefined\"\r\n      ) {\r\n        switch (sort) {\r\n          case \"value\":\r\n            dataSource.forEach((item, index) => {\r\n              if (item.data.length > 0) {\r\n                dataSource[index].data = _.sortBy(item.data, [\"y\"]);\r\n              }\r\n            });\r\n            break;\r\n          case \"key\":\r\n            data.forEach((item, index) => {\r\n              if (item.data.length > 0) {\r\n                dataSource[index].data = _.sortBy(item.data, [\"x\"]);\r\n              }\r\n            });\r\n            break;\r\n\r\n          default:\r\n            // data = data;\r\n            break;\r\n        }\r\n      }\r\n      setData(dataSource || []);\r\n      setIsLoading(false);\r\n    }\r\n  }, [widget]);\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [getData]);\r\n\r\n  if (isLoading) return <Spinner />;\r\n\r\n  let matches = [];\r\n  let isNotEmpty = false;\r\n\r\n  matches = _.uniq(\r\n    data.map(item => {\r\n      return item.data.length > 0;\r\n    })\r\n  );\r\n\r\n  isNotEmpty = matches.includes(true);\r\n  if (!isNotEmpty) return <EmptyWidget />;\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          width: width,\r\n          height: height\r\n        }}\r\n      >\r\n        <ResponsiveLine\r\n          data={data}\r\n          margin={{\r\n            top: margin?.top || 30,\r\n            right: margin?.right || 30,\r\n            bottom: margin?.bottom || 30,\r\n            left: margin?.left || 30\r\n          }}\r\n          xFormat={xScaleType === \"time\" && \"time:%d.%m.%Y\"}\r\n          yScale={\r\n            yScaleMax\r\n              ? {\r\n                  max: yScaleMax,\r\n                  type: \"linear\"\r\n                }\r\n              : {\r\n                  type: \"linear\"\r\n                }\r\n          }\r\n          xScale={\r\n            xScaleType === \"time\"\r\n              ? { type: xScaleType, format: format, precision: precision }\r\n              : { type: xScaleType }\r\n          }\r\n          lineWidth={lineWidth}\r\n          markers={constantsAxises}\r\n          enableGridX={enableGridX}\r\n          enableGridY={enableGridY}\r\n          axisBottom={\r\n            bottomAxis &&\r\n            (xScaleType === \"time\"\r\n              ? {\r\n                  format: format,\r\n                  tickRotation: tickRotation\r\n                }\r\n              : {\r\n                  tickRotation: tickRotation\r\n                })\r\n          }\r\n          useMesh={true}\r\n          enableArea={enableArea}\r\n          enablePoints={enablePoints}\r\n          tooltip={datum => {\r\n            console.log(\"====================================\");\r\n            console.log(datum);\r\n            console.log(\"====================================\");\r\n            return (\r\n              <Tooltip\r\n                keyIsDate={keyIsDate}\r\n                datum={datum}\r\n                enable={useCustomTooltips}\r\n                widgetID={widgetID}\r\n              />\r\n            );\r\n          }}\r\n          // tooltip={datum => {\r\n          //   const tooltip = datum.point.data?.tooltip;\r\n          //   console.log(\"=============TOOLTIP==============\");\r\n          //   console.log(tooltip);\r\n          //   console.log(\"====================================\");\r\n          //   return tooltip.map(item => (\r\n          //     <div>{`${item?.label}:${item?.value}`}</div>\r\n          //   ));\r\n          // }}\r\n          pointSize={pointSize}\r\n          curve={curve}\r\n          colors={\r\n            customColorSchemeChecker && customColors.length > 0\r\n              ? customColors\r\n              : colorScheme === \"regagro\"\r\n              ? regagroScheme\r\n              : colorScheme === \"milk\"\r\n              ? milkScheme\r\n              : colorScheme === \"milk2\"\r\n              ? milkScheme2\r\n              : { scheme: colorScheme }\r\n          }\r\n          pointColor={\r\n            typeof pointColor !== \"undefined\" && pointColor !== null\r\n              ? pointColor.colorPickedHex\r\n              : { from: \"color\", modifiers: [] }\r\n          }\r\n          // legends={[\r\n          //   {\r\n          //     anchor: \"bottom-right\",\r\n          //     direction: \"column\",\r\n          //     justify: false,\r\n          //     translateX: 130,\r\n          //     translateY: 0,\r\n          //     itemsSpacing: 0,\r\n          //     itemDirection: \"left-to-right\",\r\n          //     itemWidth: 120,\r\n          //     itemHeight: 20,\r\n          //     itemOpacity: 0.75,\r\n          //     symbolSize: 12,\r\n          //     symbolShape: \"circle\",\r\n          //     symbolBorderColor: \"rgba(0, 0, 0, .5)\",\r\n          //     effects: [\r\n          //       {\r\n          //         on: \"hover\",\r\n          //         style: {\r\n          //           itemBackground: \"rgba(0, 0, 0, .03)\",\r\n          //           itemOpacity: 1\r\n          //         }\r\n          //       }\r\n          //     ]\r\n          //   }\r\n          // ]}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DynamicLineChart;\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { ResponsivePie } from \"@nivo/pie\";\r\nimport Spinner from \"./Spinner\";\r\nimport EmptyWidget from \"./EmptyWidget\";\r\n\r\nimport Schemes from \"../../../../../editor/src/js/components/altrp-dashboards/settings/NivoColorSchemes\";\r\nconst regagroScheme = _.find(Schemes, { value: \"regagro\" }).colors;\r\nconst milkScheme = _.find(Schemes, { value: \"milk\" }).colors;\r\nconst milkScheme2 = _.find(Schemes, { value: \"milk2\" }).colors;\r\n\r\nimport { getWidgetData } from \"../services/getWidgetData\";\r\nimport moment from \"moment\";\r\nimport TooltipPie from \"./d3/TooltipPie\";\r\n\r\nconst DynamicPieChart = ({\r\n  widget,\r\n  width = \"300px\",\r\n  height = \"450px\",\r\n  dataSource = [],\r\n  colorScheme = \"red_grey\",\r\n  enableSliceLabels = false,\r\n  innerRadius = 0,\r\n  padAngle = 0,\r\n  cornerRadius = 0,\r\n  sortByValue = 0,\r\n  enableRadialLabels = true,\r\n  sort = \"\",\r\n  tickRotation = 0,\r\n  bottomAxis = true,\r\n  keyIsDate = false,\r\n  isDashboard = false,\r\n  customColorSchemeChecker = false,\r\n  customColors = [],\r\n  yScaleMax,\r\n  widgetID,\r\n  useCustomTooltips,\r\n  margin\r\n}) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [data, setData] = useState([]);\r\n\r\n  const getData = useCallback(async () => {\r\n    setIsLoading(true);\r\n    if (dataSource.length == 0) {\r\n      const charts = await getWidgetData(widget.source, widget.filter);\r\n      if (charts.status === 200) {\r\n        const newData = charts.data.data.map(item => {\r\n          const currentKey = item.key;\r\n          const keyFormatted = !moment(currentKey).isValid()\r\n            ? currentKey\r\n            : moment(currentKey).format(\"DD.MM.YYYY\");\r\n\r\n          return {\r\n            value: Number(item.data),\r\n            id: keyIsDate ? keyFormatted : currentKey\r\n          };\r\n        });\r\n        let data = newData;\r\n        setData(data || []);\r\n        setIsLoading(false);\r\n      }\r\n    } else {\r\n      if (\r\n        sort !== null &&\r\n        sort !== \"undefined\" &&\r\n        typeof dataSource !== \"undefined\"\r\n      ) {\r\n        switch (sort) {\r\n          case \"value\":\r\n            dataSource = _.sortBy(dataSource, [\"value\"]);\r\n            break;\r\n          case \"key\":\r\n            dataSource = _.sortBy(dataSource, [\"id\"]);\r\n            break;\r\n          default:\r\n            dataSource = dataSource;\r\n            break;\r\n        }\r\n      }\r\n      setData(dataSource || []);\r\n      setIsLoading(false);\r\n    }\r\n  }, [widget]);\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [getData]);\r\n\r\n  if (isLoading) return <Spinner />;\r\n\r\n  if (!data || data.length === 0) return <EmptyWidget />;\r\n  return (\r\n    <>\r\n      <div style={{ height: height, width: width }}>\r\n        <ResponsivePie\r\n          data={data}\r\n          colors={{ scheme: colorScheme }}\r\n          margin={{\r\n            top: margin?.top || 30,\r\n            right: margin?.right || 30,\r\n            bottom: margin?.bottom || 30,\r\n            left: margin?.left || 30\r\n          }}\r\n          colors={\r\n            customColorSchemeChecker && customColors.length > 0\r\n              ? customColors\r\n              : colorScheme === \"regagro\"\r\n              ? regagroScheme\r\n              : colorScheme === \"milk\"\r\n              ? milkScheme\r\n              : colorScheme === \"milk2\"\r\n              ? milkScheme2\r\n              : { scheme: colorScheme }\r\n          }\r\n          tooltip={datum => (\r\n            <TooltipPie\r\n              enable={useCustomTooltips}\r\n              datum={datum}\r\n              widgetID={widgetID}\r\n            ></TooltipPie>\r\n          )}\r\n          innerRadius={innerRadius}\r\n          enableSliceLabels={enableSliceLabels}\r\n          padAngle={padAngle}\r\n          cornerRadius={cornerRadius}\r\n          sortByValue={sortByValue}\r\n          axisBottom={\r\n            bottomAxis && {\r\n              tickRotation: tickRotation\r\n            }\r\n          }\r\n          colors={\r\n            colorScheme === \"regagro\"\r\n              ? regagroScheme\r\n              : colorScheme === \"milk\"\r\n              ? milkScheme\r\n              : colorScheme === \"milk2\"\r\n              ? milkScheme2\r\n              : { scheme: colorScheme }\r\n          }\r\n          enableRadialLabels={enableRadialLabels}\r\n          // legends={\r\n          //   !isDashboard\r\n          //     ? [\r\n          //         {\r\n          //           anchor: \"right\",\r\n          //           direction: \"column\",\r\n          //           translateX: 80,\r\n          //           translateY: 0,\r\n          //           itemsSpacing: 2,\r\n          //           itemWidth: 60,\r\n          //           itemHeight: 14,\r\n          //           itemDirection: \"left-to-right\",\r\n          //           itemOpacity: 1,\r\n          //           symbolSize: 14,\r\n          //           symbolShape: \"circle\"\r\n          //         }\r\n          //       ]\r\n          //     : []\r\n          // }\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DynamicPieChart;\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\n\r\nimport { ResponsiveScatterPlot } from \"@nivo/scatterplot\";\r\n\r\nimport Schemes from \"../../../../../editor/src/js/components/altrp-dashboards/settings/NivoColorSchemes\";\r\nconst regagroScheme = _.find(Schemes, { value: \"regagro\" }).colors;\r\nconst milkScheme = _.find(Schemes, { value: \"milk\" }).colors;\r\nconst milkScheme2 = _.find(Schemes, { value: \"milk2\" }).colors;\r\n\r\nimport EmptyWidget from \"./EmptyWidget\";\r\n\r\nimport { getWidgetData } from \"../services/getWidgetData\";\r\nimport { customStyle } from \"../widgetTypes\";\r\nimport { Spinner } from \"react-bootstrap\";\r\nimport Tooltip from \"./d3/TooltipScatter\";\r\n\r\nimport moment from \"moment\";\r\nconst format = \"%d.%m.%Y\";\r\n\r\nconst PointChart = ({\r\n  widget,\r\n  width = `300px`,\r\n  height = `450px`,\r\n  dataSource = [],\r\n  xScaleType = \"point\",\r\n  colorScheme = \"red_grey\",\r\n  nodeSize = 6,\r\n  sort = \"\",\r\n  tickRotation = 0,\r\n  bottomAxis = true,\r\n  precision,\r\n  enableGridX = true,\r\n  enableGridY = true,\r\n  keyIsDate = false,\r\n  customColorSchemeChecker = false,\r\n  customColors = [],\r\n  constantsAxises = [],\r\n  yScaleMax,\r\n  widgetID,\r\n  useCustomTooltips,\r\n  margin\r\n}) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [data, setData] = useState([]);\r\n  const size = 4;\r\n  const fill = customStyle[0];\r\n  const getData = useCallback(async () => {\r\n    setIsLoading(true);\r\n    if (dataSource.length == 0) {\r\n      const charts = await getWidgetData(widget.source, widget.filter);\r\n      if (charts.status === 200 && typeof charts.data !== \"string\") {\r\n        const newData = charts.data.data.map(item => {\r\n          const currentKey = item.key;\r\n          const keyFormatted = !moment(currentKey).isValid()\r\n            ? currentKey\r\n            : moment(currentKey).format(\"DD.MM.YYYY\");\r\n          return {\r\n            y: Number(item.data),\r\n            x: keyIsDate ? keyFormatted : currentKey\r\n          };\r\n        });\r\n        let data = [\r\n          {\r\n            id: \"\",\r\n            data: newData\r\n          }\r\n        ];\r\n        setData(data);\r\n        setIsLoading(false);\r\n      }\r\n    } else {\r\n      if (\r\n        sort !== null &&\r\n        sort !== \"undefined\" &&\r\n        typeof dataSource !== \"undefined\"\r\n      ) {\r\n        switch (sort) {\r\n          case \"value\":\r\n            dataSource.forEach((item, index) => {\r\n              if (item.data.length > 0) {\r\n                dataSource[index].data = _.sortBy(item.data, [\"y\"]);\r\n              }\r\n            });\r\n            break;\r\n          case \"key\":\r\n            data.forEach((item, index) => {\r\n              if (item.data.length > 0) {\r\n                dataSource[index].data = _.sortBy(item.data, [\"x\"]);\r\n              }\r\n            });\r\n            break;\r\n\r\n          default:\r\n            // data = data;\r\n            break;\r\n        }\r\n      }\r\n      setData(dataSource || []);\r\n      setIsLoading(false);\r\n    }\r\n  }, [widget]);\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [getData]);\r\n\r\n  if (isLoading) return <Spinner />;\r\n\r\n  let matches = [];\r\n  let isNotEmpty = false;\r\n\r\n  matches = _.uniq(\r\n    data.map(item => {\r\n      return item.data.length > 0;\r\n    })\r\n  );\r\n\r\n  isNotEmpty = matches.includes(true);\r\n  if (!isNotEmpty) return <EmptyWidget />;\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          width: width,\r\n          height: height\r\n        }}\r\n      >\r\n        <ResponsiveScatterPlot\r\n          data={data}\r\n          colors={\r\n            customColorSchemeChecker && customColors.length > 0\r\n              ? customColors\r\n              : colorScheme === \"regagro\"\r\n              ? regagroScheme\r\n              : colorScheme === \"milk\"\r\n              ? milkScheme\r\n              : colorScheme === \"milk2\"\r\n              ? milkScheme2\r\n              : { scheme: colorScheme }\r\n          }\r\n          yScale={\r\n            yScaleMax\r\n              ? {\r\n                  max: yScaleMax,\r\n                  type: \"linear\"\r\n                }\r\n              : {\r\n                  type: \"linear\"\r\n                }\r\n          }\r\n          markers={constantsAxises}\r\n          margin={{\r\n            top: margin?.top || 30,\r\n            right: margin?.right || 30,\r\n            bottom: margin?.bottom || 30,\r\n            left: margin?.left || 30\r\n          }}\r\n          xFormat={xScaleType === \"time\" && \"time:%d.%m.%Y\"}\r\n          nodeSize={nodeSize}\r\n          xScale={\r\n            xScaleType === \"time\"\r\n              ? { type: xScaleType, format: format, precision: precision }\r\n              : { type: xScaleType }\r\n          }\r\n          tooltip={datum => (\r\n            <Tooltip\r\n              datum={datum}\r\n              enable={useCustomTooltips}\r\n              widgetID={widgetID}\r\n            />\r\n          )}\r\n          enableGridX={enableGridX}\r\n          enableGridY={enableGridY}\r\n          axisBottom={\r\n            bottomAxis &&\r\n            (xScaleType === \"time\"\r\n              ? {\r\n                  format: format,\r\n                  tickRotation: tickRotation\r\n                }\r\n              : {\r\n                  tickRotation: tickRotation\r\n                })\r\n          }\r\n          colors={\r\n            customColorSchemeChecker && customColors.length > 0\r\n              ? customColors\r\n              : colorScheme === \"regagro\"\r\n              ? regagroScheme\r\n              : colorScheme === \"milk\"\r\n              ? milkScheme\r\n              : colorScheme === \"milk2\"\r\n              ? milkScheme2\r\n              : { scheme: colorScheme }\r\n          }\r\n          // legends={[\r\n          //   {\r\n          //     anchor: \"bottom-right\",\r\n          //     direction: \"column\",\r\n          //     justify: false,\r\n          //     translateX: 130,\r\n          //     translateY: 0,\r\n          //     itemsSpacing: 0,\r\n          //     itemDirection: \"left-to-right\",\r\n          //     itemWidth: 120,\r\n          //     itemHeight: 20,\r\n          //     itemOpacity: 0.75,\r\n          //     symbolSize: 12,\r\n          //     symbolShape: \"circle\",\r\n          //     symbolBorderColor: \"rgba(0, 0, 0, .5)\",\r\n          //     effects: [\r\n          //       {\r\n          //         on: \"hover\",\r\n          //         style: {\r\n          //           itemBackground: \"rgba(0, 0, 0, .03)\",\r\n          //           itemOpacity: 1\r\n          //         }\r\n          //       }\r\n          //     ]\r\n          //   }\r\n          // ]}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default PointChart;\r\n","import React, { useState, useEffect, useCallback, useMemo } from \"react\";\r\n\r\nimport Spinner from \"./Spinner\";\r\nimport EmptyWidget from \"./EmptyWidget\";\r\n\r\nimport { getWidgetData } from \"../services/getWidgetData\";\r\nimport moment from \"moment\";\r\n\r\nconst DynamicTableWidget = ({\r\n  widget,\r\n  width,\r\n  keyIsDate,\r\n  dataSource = [],\r\n  height = 450,\r\n  sort = \"\",\r\n  tickRotation = 0\r\n}) => {\r\n  const [data, setData] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const getData = useCallback(async () => {\r\n    setIsLoading(true);\r\n    if (dataSource.length == 0) {\r\n      const charts = await getWidgetData(widget.source, widget.filter);\r\n      if (charts.status === 200 && typeof charts.data !== \"string\") {\r\n        const newData = charts.data.data.map(item => {\r\n          const currentKey = item.key;\r\n          const keyFormatted = !moment(currentKey).isValid()\r\n            ? currentKey\r\n            : moment(currentKey).format(\"DD.MM.YYYY\");\r\n          return {\r\n            y: Number(item.data),\r\n            x: keyIsDate ? keyFormatted : currentKey\r\n          };\r\n        });\r\n        let data = [\r\n          {\r\n            id: \"\",\r\n            data: newData\r\n          }\r\n        ];\r\n        setData(data);\r\n        setIsLoading(false);\r\n      }\r\n    } else {\r\n      if (\r\n        sort !== null &&\r\n        sort !== \"undefined\" &&\r\n        typeof dataSource !== \"undefined\"\r\n      ) {\r\n        switch (sort) {\r\n          case \"value\":\r\n            dataSource.forEach((item, index) => {\r\n              if (item.data.length > 0) {\r\n                dataSource[index].data = _.sortBy(item.data, [\"y\"]);\r\n              }\r\n            });\r\n            break;\r\n          case \"key\":\r\n            data.forEach((item, index) => {\r\n              if (item.data.length > 0) {\r\n                dataSource[index].data = _.sortBy(item.data, [\"x\"]);\r\n              }\r\n            });\r\n            break;\r\n\r\n          default:\r\n            // data = data;\r\n            break;\r\n        }\r\n      }\r\n      setData(dataSource || []);\r\n      setIsLoading(false);\r\n    }\r\n  }, [widget]);\r\n\r\n  const summary = useMemo(\r\n    () =>\r\n      data\r\n        .map(item => item.data.reduce((acc, object) => acc + object.y, 0))\r\n        .reduce((acc, item) => acc + item, 0),\r\n    [data]\r\n  );\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [getData]);\r\n\r\n  if (isLoading) return <Spinner />;\r\n\r\n  let matches = [];\r\n  let isNotEmpty = false;\r\n\r\n  matches = _.uniq(\r\n    data.map(item => {\r\n      return item.data.length > 0;\r\n    })\r\n  );\r\n\r\n  isNotEmpty = matches.includes(true);\r\n  if (!isNotEmpty) return <EmptyWidget />;\r\n\r\n  return (\r\n    <div className=\"widget-table\" style={{ maxHeight: `${height}px` }}>\r\n      <table className=\"vertical-table\">\r\n        <tbody>\r\n          {data.map((item, key) => {\r\n            const dataset = item.data.map((object, index) => {\r\n              return (\r\n                <tr key={`${key}${index}`}>\r\n                  <td>{object.x}</td>\r\n                  <td>{object.y}</td>\r\n                </tr>\r\n              );\r\n            });\r\n            return (\r\n              <React.Fragment key={key}>\r\n                <tr key={key} style={{ textAlign: \"center\" }}>\r\n                  <td colSpan={2}>{item.id}</td>\r\n                </tr>\r\n                {dataset}\r\n              </React.Fragment>\r\n            );\r\n          })}\r\n          <tr>\r\n            <td>ИТОГО</td>\r\n            <td>{summary}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DynamicTableWidget;\r\n","import React from \"react\";\r\n\r\nconst EmptyWidget = ({ text }) => {\r\n  return (\r\n    <div className=\"spinner-container\">\r\n      <div className=\"spinner-container__text\">{text ? text : \"Данные обрабатываются\"}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmptyWidget;\r\n","import React from \"react\";\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div className=\"spinner-container\">\r\n      <div\r\n        className=\"spinner-border\"\r\n        style={{ width: \"3rem\", height: \"3rem\" }}\r\n        role=\"status\"\r\n      >\r\n        <span className=\"sr-only\">Загрузка...</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n"],"sourceRoot":""}