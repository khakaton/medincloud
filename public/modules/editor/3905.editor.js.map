{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/components/altrp-carousel/AltrpCarouselWrapper.js","webpack:///./resources/modules/editor/src/js/components/altrp-carousel/AltrpCarousel.js"],"names":["styled","props","slideStyles","settings","border_color_slides_style","border_width_slides_style","border_type_slide","color","borderWidthStyled","getResponsiveSetting","ArrowIcon","TemplateLoader","window","altrpHelpers","next","bind","previous","state","activeSlide","openLightBox","sliderImages","this","slides_repeater","forEach","image","setState","img","image_slides_repeater","url","push","prevProps","sliderImagesArray","getDataByPath","_","isArray","isObject","map","item","get","isEqual","synchronized_id","split","id","anotherSlider","getComponentByElementId","pushSliderToSynchronize","carousel","carouselsToSynchronize","filter","indexOf","index","slider","slickGoTo","slickNext","slickPrev","carouselContainerClasses","arrows_navigation_content","slides","dotsClasses","sliderClasses","dots_navigation_content","dots_position_navigation_content","slidesMap","arrows","customPaging","idx","active","innerSlider","currentSlide","className","dotsClass","dots","infinite","infinite_loop_additional_content","pauseOnHover","pause_on_interaction_loop_additional_content","autoplay","autoplay_additional_content","autoplaySpeed","Number","transition_autoplay_duration_additional_content","speed","transition_duration_additional_content","slidesToShow","per_view_slides_content","slidesToScroll","to_scroll_slides_content","rows","per_row_slides_content","afterChange","current","beforeChange","setSlide","adaptiveHeight","slide","typeSlide","switch_slides_repeater","media","name","assetType","content","renderAsset","templateId","card_slides_repeater","key","onClick","onDoubleClick","lightbox_slides_content","overlay_select_heading_additional_content","overlay_text_repeater","isEditor","prevArrow","nextArrow","arrowsClasses","arrows_position_navigation_content","lightbox","imagesSrcs","AltrpLightbox","images","onCloseRequest","color_lightbox_style","ref","c","Component"],"mappings":"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","file":"3905.editor.js","sourcesContent":["import styled from 'styled-components';\r\nimport {dimensionsControllerToStyles, borderWidthStyled} from \"../../../../../front-app/src/js/helpers/styles\";\r\nimport {getResponsiveSetting} from \"../../../../../front-app/src/js/helpers\";\r\n\r\nconst AltrpCarouselWrapper = styled.div`\r\n& .altrp-carousel-slide{\r\n${(props)=>{\r\n  let slideStyles = '';\r\n  const {settings} = props;\r\n  const {\r\n    border_color_slides_style,\r\n    border_width_slides_style,\r\n    border_type_slide,\r\n  } = settings;\r\n  if(border_color_slides_style){\r\n    slideStyles += `border-color:${border_color_slides_style.color};`\r\n  }\r\n  if(border_type_slide){\r\n    slideStyles += `border-style:${border_type_slide};`\r\n  }\r\n  if(border_width_slides_style) {\r\n    slideStyles += borderWidthStyled(border_width_slides_style)\r\n  }\r\n  return slideStyles;\r\n}}\r\n}\r\n& .slick-current .altrp-carousel-slide{\r\n${(props)=>{\r\n  let slideStyles = '';\r\n  const {settings} = props;\r\n  const \r\n    border_color_slides_style = getResponsiveSetting(settings, 'border_color_slides_style', '.active'),\r\n    border_width_slides_style = getResponsiveSetting(settings, 'border_width_slides_style', '.active'),\r\n    border_type_slide = getResponsiveSetting(settings, 'border_type_slide', '.active');\r\n  \r\n  if(border_color_slides_style){\r\n    slideStyles += `border-color:${border_color_slides_style.color};`\r\n  }\r\n  if(border_type_slide){\r\n    slideStyles += `border-style:${border_type_slide};`\r\n  }\r\n  if(border_width_slides_style) {\r\n    slideStyles += borderWidthStyled(border_width_slides_style)\r\n  }\r\n  return slideStyles;\r\n}}\r\n}`;\r\n\r\nexport default AltrpCarouselWrapper;","import React, {Component} from \"react\";\r\nimport Slider from \"react-slick\";\r\nimport AltrpLightbox from \"../altrp-lightbox/AltrpLightbox\";\r\n\r\nimport ArrowIcon from \"../../../svgs/arrow.svg\"\r\nimport (\"slick-carousel/slick/slick.scss\");\r\nimport (\"slick-carousel/slick/slick-theme.scss\");\r\nimport ('./altrp-carousel.scss');\r\nimport {\r\n  getComponentByElementId,\r\n  getDataByPath,\r\n  getResponsiveSetting,\r\n  isEditor,\r\n  renderAsset\r\n} from \"../../../../../front-app/src/js/helpers\";\r\nconst {TemplateLoader} = window.altrpHelpers;\r\nimport AltrpCarouselWrapper from \"./AltrpCarouselWrapper\";\r\n\r\n/**\r\n * Компонент Карусли\r\n */\r\nclass AltrpCarousel extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.next = this.next.bind(this);\r\n    this.previous = this.previous.bind(this);\r\n    this.state = {\r\n      activeSlide: 0,\r\n      openLightBox: false,\r\n      sliderImages: []\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.slides_repeater.forEach(image => {\r\n      this.setState((state) => {\r\n\r\n        let img = {...image.image_slides_repeater} || {};\r\n        img.url = img.url || '/img/nullImage.png';\r\n\r\n        state.sliderImages.push(img.url);\r\n        return ({...state});\r\n      });\r\n    });\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if(this.props.slides_repeater !== prevProps.slides_repeater\r\n        && getResponsiveSetting(this.props, 'slides_item_source', '', 'custom') !== 'custom') {\r\n      let sliderImagesArray = [];\r\n      this.props.slides_repeater.forEach(image => {\r\n        let img = {...image.image_slides_repeater} || {};\r\n        img.url = img.url || '/img/nullImage.png';\r\n        sliderImagesArray.push(img.url);\r\n      });\r\n      this.setState((state) => ({...state, sliderImages: sliderImagesArray}));\r\n    }\r\n    if(getResponsiveSetting(this.props, 'slides_item_source', '', 'custom') === 'path'){\r\n\r\n      let sliderImages = getDataByPath(getResponsiveSetting(this.props, 'slides_path'));\r\n      if(! _.isArray(sliderImages) && _.isObject(sliderImages)){\r\n        sliderImages = [sliderImages];\r\n      } else if(! _.isArray(sliderImages)){\r\n        sliderImages = [];\r\n      }\r\n      sliderImages = sliderImages.map(item => _.get(item, 'media.url') ? _.get(item, 'media.url') : item.url);\r\n      if(!_.isEqual(sliderImages, this.state.sliderImages)){\r\n        this.setState((state) => ({...state, sliderImages}));\r\n      }\r\n    }\r\n    let {synchronized_id} = this.props;\r\n    if(synchronized_id){\r\n      synchronized_id = synchronized_id.split(',');\r\n      synchronized_id.forEach(id=>{\r\n        let anotherSlider = getComponentByElementId(id);\r\n        if(anotherSlider){\r\n          this.pushSliderToSynchronize(anotherSlider);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Добавляем компонент слайдера к синхронизируемым\r\n   */\r\n  pushSliderToSynchronize(carousel){\r\n    if(_.isArray(carousel)){\r\n      this.carouselsToSynchronize = [...carousel];\r\n      this.carouselsToSynchronize = this.carouselsToSynchronize.filter(carousel=> carousel !== this);\r\n      return;\r\n    }\r\n    const carouselsToSynchronize = this.carouselsToSynchronize || [];\r\n    carousel = _.get(carousel, 'elementRef.current.carousel.current');\r\n    if(carousel && carouselsToSynchronize.indexOf(carousel) === -1){\r\n      carouselsToSynchronize.push(carousel);\r\n      carouselsToSynchronize.push(this);\r\n      carouselsToSynchronize.forEach(carousel=>{\r\n        carousel.pushSliderToSynchronize(carouselsToSynchronize);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   *\r\n   * @param {int} index\r\n   */\r\n  setSlide(index){\r\n    this.slider.slickGoTo(index)\r\n  }\r\n  next() {\r\n    this.slider.slickNext();\r\n  }\r\n\r\n  previous() {\r\n    this.slider.slickPrev();\r\n  }\r\n\r\n  render(){\r\n    let carouselContainerClasses = \"altrp-carousel-container\";\r\n\r\n    carouselContainerClasses += (!this.props.arrows_navigation_content ? \" altrp-carousel-container-no-arrow\" : \"\");\r\n\r\n    //точки\r\n    let slides = getResponsiveSetting(this.props,'slides_repeater', '', []) ;\r\n\r\n\r\n    let dotsClasses = \"altrp-carousel-dots\";\r\n\r\n    let sliderClasses = \"altrp-carousel-slides\";\r\n\r\n    //позиция точек\r\n    if(this.props.dots_navigation_content) {\r\n      switch (this.props.dots_position_navigation_content) {\r\n        case \"topLeft\":\r\n          dotsClasses += \" altrp-carousel-dots-top-left\";\r\n          sliderClasses += \" altrp-carousel-slides-dots-top\";\r\n          break;\r\n        case \"top\":\r\n          dotsClasses += \" altrp-carousel-dots-top\";\r\n          sliderClasses += \" altrp-carousel-slides-dots-top\";\r\n          break;\r\n        case \"topRight\":\r\n          dotsClasses += \" altrp-carousel-dots-top-right\";\r\n          sliderClasses += \" altrp-carousel-slides-dots-top\";\r\n          break;\r\n        case \"bottomLeft\":\r\n          dotsClasses += \" altrp-carousel-dots-bottom-left\";\r\n          sliderClasses += \" altrp-carousel-slides-dots-bottom\";\r\n          break;\r\n        case \"bottom\":\r\n          sliderClasses += \" altrp-carousel-slides-dots-bottom\";\r\n          break;\r\n        case \"bottomRight\":\r\n          dotsClasses += \" altrp-carousel-dots-bottom-right\";\r\n          sliderClasses += \" altrp-carousel-slides-dots-bottom\";\r\n          break\r\n      }\r\n    }\r\n    // настройки слайдера\r\n    let settings = {\r\n      arrows: false,\r\n      customPaging: (idx) => {\r\n        let active = false;\r\n        if(this.slider){\r\n          active = this.slider.innerSlider.state.currentSlide === idx;\r\n        }\r\n        return (\r\n            <a>\r\n              <div className={'altrp-carousel-paging ' + (active ? 'active' : '')}/>\r\n            </a>\r\n        )},\r\n      dotsClass: dotsClasses,\r\n      dots: this.props.dots_navigation_content,\r\n      infinite: this.props.infinite_loop_additional_content,\r\n      pauseOnHover: this.props.pause_on_interaction_loop_additional_content,\r\n      autoplay: this.props.autoplay_additional_content,\r\n      className: sliderClasses,\r\n      autoplaySpeed: Number(this.props.transition_autoplay_duration_additional_content),\r\n      speed: Number(this.props.transition_duration_additional_content),\r\n      slidesToShow: Number(this.props.per_view_slides_content),\r\n      slidesToScroll: Number(this.props.to_scroll_slides_content),\r\n      rows: Number(this.props.per_row_slides_content),\r\n      afterChange: current => this.setState({ activeSlide: current }),\r\n      beforeChange: (current, next) => {\r\n        this.carouselsToSynchronize && this.carouselsToSynchronize.forEach(carousel => {carousel.setSlide(next)})\r\n      },\r\n      adaptiveHeight: true,\r\n    };\r\n\r\n    // слайды\r\n    const itemsSourceType = getResponsiveSetting(this.props, 'slides_item_source', '', 'custom');\r\n    let slidesMap;\r\n    switch(itemsSourceType){\r\n      case 'custom':{\r\n        slidesMap = slides.map((slide, idx) => {\r\n          const typeSlide = slide.switch_slides_repeater || false;\r\n          let media = slide.image_slides_repeater ? {...slide.image_slides_repeater} : {};\r\n\r\n          media.url = media.url || '/img/nullImage.png';\r\n          media.name = media.name || 'null';\r\n          media.assetType = media.assetType || 'mediaBackground';\r\n          if(media.assetType === 'media') {\r\n            media.assetType = 'mediaBackground';\r\n          }\r\n\r\n          let content = renderAsset(media, {\r\n            className: 'altrp-carousel-slide-img',\r\n          });\r\n\r\n          if(typeSlide === true) {\r\n            content = <TemplateLoader templateId={slide.card_slides_repeater}/>\r\n          }\r\n\r\n          return (\r\n              <div className=\"altrp-carousel-slide\" key={idx}\r\n                   onClick={()=>{\r\n                     this.slider.slickGoTo(idx);\r\n                   }}\r\n                   onDoubleClick={ () => {\r\n                     this.slider.slickGoTo(idx);\r\n                     if(this.props.lightbox_slides_content) {\r\n                       this.setState((state) => ({\r\n                         ...state,\r\n                         openLightBox: true\r\n                       }))\r\n                     }\r\n                   }}\r\n              >\r\n                {\r\n                  content\r\n                }\r\n                {\r\n                  this.props.overlay_select_heading_additional_content === \"text\" ? (\r\n                      <div className=\"altrp-carousel-slide-overlay\">\r\n                        <p className=\"altrp-carousel-slide-overlay-text\">{slide.overlay_text_repeater}</p>\r\n                      </div>\r\n                  ) : null\r\n                }\r\n              </div>\r\n          );\r\n        });\r\n      }break;\r\n      case 'path':{\r\n        if(isEditor()){\r\n          slidesMap = [\r\n            (\r\n              <div className=\"altrp-carousel-slide\" key={1}>{\r\n                renderAsset({\r\n                  url: '/img/nullImage.png',\r\n                  assetType: 'mediaBackground',\r\n                }, {\r\n                  key: 1,\r\n                  className: 'altrp-carousel-slide-img',\r\n                })\r\n              }</div>\r\n            ),\r\n            (\r\n              <div className=\"altrp-carousel-slide\" key={2}>{\r\n                renderAsset({\r\n                  url: '/img/nullImage.png',\r\n                  assetType: 'mediaBackground',\r\n                }, {\r\n                  key: 1,\r\n                  className: 'altrp-carousel-slide-img',\r\n                })\r\n              }</div>\r\n            ),\r\n            (\r\n              <div className=\"altrp-carousel-slide\" key={3}>{\r\n                renderAsset({\r\n                  url: '/img/nullImage.png',\r\n                  assetType: 'mediaBackground',\r\n                }, {\r\n                  key: 1,\r\n                  className: 'altrp-carousel-slide-img',\r\n                })\r\n              }</div>\r\n            ),\r\n            (\r\n              <div className=\"altrp-carousel-slide\" key={4}>{\r\n                renderAsset({\r\n                  url: '/img/nullImage.png',\r\n                  assetType: 'mediaBackground',\r\n                }, {\r\n                  key: 1,\r\n                  className: 'altrp-carousel-slide-img',\r\n                })\r\n              }</div>\r\n            ),\r\n            (\r\n              <div className=\"altrp-carousel-slide\" key={5}>{\r\n                renderAsset({\r\n                  url: '/img/nullImage.png',\r\n                  assetType: 'mediaBackground',\r\n                }, {\r\n                  key: 1,\r\n                  className: 'altrp-carousel-slide-img',\r\n                })\r\n              }</div>\r\n            ),\r\n            (\r\n              <div className=\"altrp-carousel-slide\" key={6}>{\r\n                renderAsset({\r\n                  url: '/img/nullImage.png',\r\n                  assetType: 'mediaBackground',\r\n                }, {\r\n                  key: 1,\r\n                  className: 'altrp-carousel-slide-img',\r\n                })\r\n              }</div>\r\n            ),\r\n          ];\r\n        } else {\r\n          slidesMap = getDataByPath(getResponsiveSetting(this.props, 'slides_path'));\r\n          if(! _.isArray(slidesMap) && _.isObject(slidesMap)){\r\n            slidesMap = [slidesMap];\r\n          } else if(! _.isArray(slidesMap)){\r\n            slidesMap = [];\r\n          }\r\n          slidesMap = slidesMap.map((media, idx)=>{\r\n            if(_.isObject(media.media)){\r\n              media = media.media;\r\n            }\r\n\r\n            media.url = media.url || '/img/nullImage.png';\r\n            media.name = media.name || 'null';\r\n            media.assetType = media.assetType || 'mediaBackground';\r\n            if(media.assetType === 'media') {\r\n              media.assetType = 'mediaBackground';\r\n            }\r\n\r\n            let content = renderAsset(media, {\r\n              className: 'altrp-carousel-slide-img',\r\n            });\r\n\r\n            return (\r\n                <div className=\"altrp-carousel-slide\" key={idx}\r\n                     onClick={()=>{\r\n                       this.slider.slickGoTo(idx);\r\n                     }}\r\n                     onDoubleClick={ () => {\r\n                       this.slider.slickGoTo(idx);\r\n                       if(this.props.lightbox_slides_content) {\r\n                         this.setState((state) => ({\r\n                           ...state,\r\n                           openLightBox: true\r\n                         }))\r\n                       }\r\n                     }}\r\n                >\r\n                  {\r\n                    content\r\n                  }\r\n                </div>\r\n            );\r\n          });\r\n        }\r\n      }break;\r\n    }\r\n\r\n    //позиция стрелок\r\n    let prevArrow = \"\";\r\n    let nextArrow = \"\";\r\n\r\n    let arrowsClasses = \"\";\r\n\r\n    switch (this.props.arrows_position_navigation_content) {\r\n      case \"topLeft\":\r\n        arrowsClasses += \" altrp-carousel-arrow-top-left altrp-carousel-arrow-top-wrapper\";\r\n        break;\r\n      case \"top\":\r\n        arrowsClasses += \" altrp-carousel-arrow-top altrp-carousel-arrow-top-wrapper\"\r\n        break;\r\n      case \"topRight\":\r\n        arrowsClasses += \" altrp-carousel-arrow-top-right altrp-carousel-arrow-top-wrapper\"\r\n        break;\r\n      case \"bottomLeft\":\r\n        arrowsClasses += \" altrp-carousel-arrow-bottom-left altrp-carousel-arrow-bottom-wrapper\"\r\n        break;\r\n      case \"bottom\":\r\n        arrowsClasses += \" altrp-carousel-arrow-bottom altrp-carousel-arrow-bottom-wrapper\"\r\n        break;\r\n      case \"bottomRight\":\r\n        arrowsClasses += \" altrp-carousel-arrow-bottom-right altrp-carousel-arrow-bottom-wrapper\"\r\n        break\r\n    }\r\n\r\n    //стрелки\r\n    prevArrow = this.props.arrows_navigation_content ? (\r\n        <div className=\"altrp-carousel-arrow-prev altrp-carousel-arrow\" onClick={this.previous}>\r\n          <ArrowIcon/>\r\n        </div>\r\n      ) : \"\";\r\n\r\n    nextArrow = this.props.arrows_navigation_content ? (\r\n      <div className=\"altrp-carousel-arrow-next altrp-carousel-arrow\" onClick={this.next}>\r\n        <ArrowIcon/>\r\n      </div>\r\n    ) : \"\";\r\n\r\n    let lightbox = \"\";\r\n    if(this.props.lightbox_slides_content) {\r\n      const imagesSrcs = this.props.slides_repeater.map(img => {\r\n        if(img.image_slides_repeater) {\r\n          return img.image_slides_repeater.url\r\n        } else return '/img/nullImage.png'\r\n      });\r\n      lightbox =  this.state.openLightBox ? (\r\n        <AltrpLightbox\r\n          images={imagesSrcs}\r\n          current={this.state.activeSlide}\r\n          settings={{\r\n            onCloseRequest: () => this.setState({openLightBox: false})\r\n          }}\r\n          color={this.props.color_lightbox_style}\r\n        />\r\n      ) : \"\"\r\n\r\n    }\r\n\r\n    return <AltrpCarouselWrapper settings={{...this.props}} className=\"altrp-carousel\">\r\n      {\r\n        this.props.lightbox_slides_content ? lightbox : \"\"\r\n      }\r\n      { this.props.arrows_position_navigation_content === \"center\" ?\r\n        prevArrow\r\n        : \"\"\r\n      }\r\n      <div className={carouselContainerClasses}>\r\n        {\r\n          this.props.arrows_position_navigation_content !== \"center\" ? (\r\n            <div className={\"altrp-carousel-arrows-container\" + arrowsClasses}>\r\n              {prevArrow}\r\n              {nextArrow}\r\n            </div>\r\n          ) : \"\"\r\n        }\r\n        <Slider ref={c => (this.slider = c)}\r\n                {...settings}>\r\n          {\r\n            slidesMap\r\n          }\r\n        </Slider>\r\n      </div>\r\n      { this.props.arrows_position_navigation_content === \"center\" ? nextArrow : \"\" }\r\n    </AltrpCarouselWrapper>\r\n  }\r\n}\r\n\r\nexport default AltrpCarousel\r\n"],"sourceRoot":""}