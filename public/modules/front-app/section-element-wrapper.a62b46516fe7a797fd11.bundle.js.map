{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/classes/AltrpModel.js","webpack:///./resources/modules/editor/src/js/components/widgets/styled-components/ElementWrapperComponent.js","webpack:///./resources/modules/front-app/src/js/constants/DEFAULT_REACT_ELEMENTS.js","webpack:///./resources/modules/front-app/src/js/components/ElementWrapper.js","webpack:///./resources/modules/front-app/src/js/libs/section-element-wrapper.js","webpack:///./resources/modules/front-app/src/js/store/elements-storage/actions.js"],"names":["AltrpModel","data","this","cloneDeep","clone","isEmpty","name","defaultValue","get","has","value","getData","set","unset","window","ElementWrapperDivComponent","styled","div","settings","styles","layout_column_width","getResponsiveSetting","Number","_export","altrpHelpers","altrpCompare","altrpRandomId","conditionsChecker","isEditor","replaceContentWithData","setTitle","ElementWrapper","props","updateStore","state","currentModel","appStore","getState","setState","currentUser","currentDataStorage","elementDisplay","element","getSettings","reactElement","elementId","getId","wrapper","elementWrapperRef","React","createRef","elementRef","dispatch","addElement","error","errorInfo","frontApp","onWidgetMount","_","isFunction","update","updateFonts","checkElementDisplay","stylesModule","stylesContainer","current","getElementsByClassName","prevProps","prevState","getProperty","getName","title","currentTitle","altrpPage","changeCurrentPageProperty","updateToken","conditions","map","c","modelField","conditional_model_field","operator","conditional_other_operator","conditional_other_condition_value","getCurrentModel","formsStore","formId","logic","formConditions","display","forEach","field_id","hide_on_wide_screen","hide_on_desktop","hide_on_laptop","hide_on_tablet","hide_on_big_phone","hide_on_small_phone","isFixed","hide_on_trigger","tooltip_position","tooltip_text","classes","getType","getPrefixClasses","className","style","whiteSpace","toString","componentStack","width","CSSId","ContentComponent","frontElementsManager","getComponentClass","content","createElement","ref","rootElement","children","getChildren","match","altrpresponses","altrpPageState","altrpMeta","currentScreen","baseRender","history","getTemplateType","WrapperComponent","NavComponent","wrapperProps","id","DEFAULT_REACT_ELEMENTS","AltrpTooltip","position","Component","withRouter","reactRedux","connect","forwardRef","SectionElementWrapper","ADD_ELEMENT","CLEAR_ELEMENTS","elementComponent","type","clearElements"],"mappings":"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","file":"section-element-wrapper.a62b46516fe7a797fd11.bundle.js","sourcesContent":["/**\r\n * Имеет интерфейс для доступы к свойствам data (любой вложенности)\r\n * @class AltrpModel\r\n */\r\nimport cloneDeep from 'lodash.clonedeep';\r\nimport get from 'lodash.get';\r\nimport set from 'lodash.set';\r\nimport has from 'lodash.has';\r\nimport unset from 'lodash.unset';\r\nimport isEmpty from 'lodash.isempty';\r\n// import {cloneDeep, get, set, has, unset, isString, isEmpty} from \"lodash\";\r\n\r\nclass AltrpModel {\r\n  constructor(data = {}) {\r\n    this.data = cloneDeep(data);\r\n  }\r\n\r\n  /**\r\n   * Возваращает объект данных\r\n   * @params {boolean} clone - клонировать или ссылку на данные\r\n   * @return {{}}\r\n   */\r\n  getData(clone = true) {\r\n    if(clone){\r\n      return cloneDeep(this.data);\r\n    }\r\n    return this.data;\r\n  }\r\n\r\n  /**\r\n   * Пустой ли объект\r\n   */\r\n  isEmpty(){\r\n    return isEmpty(this.data);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  getProperty(name, defaultValue = '') {\r\n    return get(this.data, name, defaultValue);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  hasProperty(name, defaultValue = '') {\r\n    return has(this.data, name);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {{}}\r\n   */\r\n  setProperty(name, value = '') {\r\n    if(value instanceof AltrpModel){\r\n      value = value.getData(false);\r\n    }\r\n    return set(this.data, name, value);\r\n  }\r\n  /**\r\n   * Удаляет свойства name\r\n   * @params {string} name\r\n   * @return {*}\r\n   */\r\n  unsetProperty(name) {\r\n    return unset(this.data, name);\r\n  }\r\n}\r\nwindow.AltrpModel = AltrpModel;\r\nexport default AltrpModel\r\n","\r\nimport { getResponsiveSetting } from \"../../../../../../front-app/src/js/helpers\";\r\n\r\nconst settingsToStyles = ({ settings }) => {\r\n   let styles = '';\r\n\r\n   styles += '&.altrp-column{';\r\n   const layout_column_width = getResponsiveSetting(settings, 'layout_column_width');\r\n   if (layout_column_width) {\r\n      if (Number(layout_column_width)) {\r\n         styles += `width:${layout_column_width}%;`;\r\n      } else {\r\n         styles += `width:${layout_column_width};`;\r\n      }\r\n   }\r\n\r\n   styles += '}';\r\n   return styles;\r\n};\r\n\r\nexport const ElementWrapperDivComponent = styled.div`${settingsToStyles}`;\r\n","const DEFAULT_REACT_ELEMENTS = [\r\n  'input',\r\n  'input-select',\r\n  'input-select2',\r\n  'input-radio',\r\n  'input-checkbox',\r\n  'input-wysiwyg',\r\n  'input-textarea',\r\n  'input-slider',\r\n  'input-image-select',\r\n  'input-accept',\r\n  'input-text',\r\n  'input-text-common',\r\n  'input-password',\r\n  'input-number',\r\n  'input-tel',\r\n  'input-email',\r\n  'input-date',\r\n  'input-hidden',\r\n  'input-file',\r\n  'input-gallery',\r\n  'breadcrumbs',\r\n  'map',\r\n  'map_builder',\r\n  'menu',\r\n  'diagram',\r\n  'input',\r\n  'nav',\r\n  'dashboards',\r\n  'tour',\r\n  'icon',\r\n  'export',\r\n  'template',\r\n  'gallery',\r\n  'dropbar',\r\n  'posts',\r\n  'table',\r\n  'tabs',\r\n  'heading-type-animating',\r\n]\r\nexport default DEFAULT_REACT_ELEMENTS\r\n","import { withRouter } from \"react-router-dom\";\r\nimport { addElement } from \"../store/elements-storage/actions\";\r\nimport AltrpTooltip from \"../../../../editor/src/js/components/altrp-tooltip/AltrpTooltip\";\r\nimport { changeCurrentPageProperty } from \"../store/current-page/actions\";\r\nimport { ElementWrapperDivComponent } from \"../../../../editor/src/js/components/widgets/styled-components/ElementWrapperComponent\";\r\nimport NavComponent from \"../../../../editor/src/js/components/widgets/styled-components/NavComponent\";\r\nimport DEFAULT_REACT_ELEMENTS from \"../constants/DEFAULT_REACT_ELEMENTS\";\r\nconst {\r\n  altrpCompare,\r\n  altrpRandomId,\r\n  conditionsChecker,\r\n  isEditor,\r\n  replaceContentWithData,\r\n  setTitle\r\n} = window.altrpHelpers;\r\n\r\nclass ElementWrapper extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      elementDisplay: !this.props.element.getSettings(\"default_hidden\")\r\n    };\r\n    this.reactElement = this.props.element.getSettings(\"react_element\");\r\n    this.elementId = this.props.element.getId();\r\n    this.settings = this.props.element.getSettings();\r\n    props.element.wrapper = this;\r\n    this.elementWrapperRef = React.createRef();\r\n    this.elementRef = React.createRef();\r\n    if(! isEditor()){\r\n      appStore.dispatch(addElement(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Отлавливаем ошибки\r\n   * @param error\r\n   * @param errorInfo\r\n   */\r\n  componentDidCatch(error, errorInfo) {\r\n    this.setState(state => ({\r\n      ...state,\r\n      error: error,\r\n      errorInfo: errorInfo\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Иногда надо обновить элемент (FrontElement)\r\n   */\r\n  componentDidMount() {\r\n    !isEditor() && window?.frontApp?.onWidgetMount();\r\n    if (_.isFunction(this.props.element.update)) {\r\n      this.props.element.update();\r\n      this.props.element.updateFonts();\r\n    }\r\n    this.checkElementDisplay();\r\n  }\r\n  /**\r\n   * Подписываемся на обновление store редакса\r\n   */\r\n  updateStore = () => {\r\n    if (this.state.currentModel !== appStore.getState().currentModel) {\r\n      this.setState(state => ({\r\n        ...state,\r\n        currentModel: appStore.getState().currentModel\r\n      }));\r\n    }\r\n    /**\r\n     * Обновляем пользователя\r\n     */\r\n    if (this.state.currentUser !== appStore.getState().currentUser) {\r\n      this.setState(state => ({\r\n        ...state,\r\n        currentModel: appStore.getState().currentUser\r\n      }));\r\n    }\r\n\r\n    /**\r\n     * Обновляем currentDataStorage\r\n     */\r\n    if (\r\n      this.state.currentDataStorage !== appStore.getState().currentDataStorage\r\n    ) {\r\n      this.setState(state => ({\r\n        ...state,\r\n        currentDataStorage: appStore.getState().currentDataStorage\r\n      }));\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Вернет HTMLElement, в котором записаны css стили текущего компонента\r\n   * @return {null | HTMLElement}\r\n   */\r\n  getStylesHTMLElement() {\r\n    if (!_.get(window, \"stylesModule.stylesContainer.current\")) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      window.stylesModule.stylesContainer.current.getElementsByClassName(\r\n        `altrp-styles${this.props.element.getId()}`\r\n      )[0] || null\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Нужно ли обновить отображение обертки элементов\r\n   * @param {{}} prevProps\r\n   * @param {{}} prevState\r\n   */\r\n  componentDidUpdate(prevProps, prevState) {\r\n    this.checkElementDisplay();\r\n    if (\r\n      appStore.getState().currentModel.getProperty(\"altrpModelUpdated\") &&\r\n      appStore\r\n        .getState()\r\n        .currentDataStorage.getProperty(\"currentDataStorageLoaded\") &&\r\n      !isEditor() &&\r\n      this.props.element.getName() === \"section\"\r\n    ) {\r\n      let title = appStore.getState().currentTitle;\r\n      title = replaceContentWithData(title);\r\n      if (appStore.getState().altrpPage.getProperty(\"title\") !== title) {\r\n        appStore.dispatch(changeCurrentPageProperty(\"title\", title));\r\n      }\r\n      setTitle(title);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Обновить элемент изменив this.state.updateToken\r\n   */\r\n  updateElement() {\r\n    this.setState(state => ({ ...state, updateToken: altrpRandomId() }));\r\n  }\r\n\r\n  /**\r\n   * Проверка видимости элемента\r\n   * @param {{}} prevProps\r\n   * @param {{}} prevState\r\n   */\r\n  checkElementDisplay(prevProps, prevState) {\r\n    /**\r\n     * @member {FrontElement} element\r\n     */\r\n    const { element } = this.props;\r\n    if (!element.getSettings(\"conditional_other\")) {\r\n      return;\r\n    }\r\n    let conditions = element.getSettings(\"conditions\", []);\r\n    conditions = conditions.map(c => {\r\n      const {\r\n        conditional_model_field: modelField,\r\n        conditional_other_operator: operator,\r\n        conditional_other_condition_value: value\r\n      } = c;\r\n      return {\r\n        modelField,\r\n        operator,\r\n        value\r\n      };\r\n    });\r\n    let elementDisplay = conditionsChecker(\r\n      conditions,\r\n      element.getSettings(\"conditional_other_display\") === \"AND\",\r\n      this.props.element.getCurrentModel(),\r\n      true\r\n    );\r\n\r\n    if (this.state.elementDisplay === elementDisplay) {\r\n      return;\r\n    }\r\n\r\n    this.setState(state => ({\r\n      ...state,\r\n      elementDisplay\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Переключает видимость элемента\r\n   */\r\n  toggleElementDisplay() {\r\n    this.setState(state => ({\r\n      ...state,\r\n      elementDisplay: !state.elementDisplay\r\n    }));\r\n  }\r\n  /**\r\n   * Метод для проверки видимости поля формы\r\n   * @return {boolean}\r\n   */\r\n  inputIsDisplay() {\r\n    const { formsStore } = this.state;\r\n    const formId = this.props.element.getSettings(\"form_id\", \"\");\r\n    const logic = this.props.element.getSettings(\r\n      \"form_condition_display_on\",\r\n      \"AND\"\r\n    );\r\n    const formConditions = this.props.element.getSettings(\r\n      \"form_conditions\",\r\n      []\r\n    );\r\n    let display = true;\r\n    formConditions.forEach(c => {\r\n      if (logic === \"AND\") {\r\n        display *= altrpCompare(\r\n          _.get(formsStore, `${formId}.${c.field_id}`),\r\n          c.value,\r\n          c.operator\r\n        );\r\n      } else {\r\n        display += altrpCompare(\r\n          _.get(formsStore, `${formId}.${c.field_id}`),\r\n          c.value,\r\n          c.operator\r\n        );\r\n      }\r\n    });\r\n    return display;\r\n  }\r\n\r\n  render() {\r\n    const {element} = this.props;\r\n    const {\r\n      hide_on_wide_screen,\r\n      hide_on_desktop,\r\n      hide_on_laptop,\r\n      hide_on_tablet,\r\n      hide_on_big_phone,\r\n      hide_on_small_phone,\r\n      hide_on_trigger,\r\n      isFixed,\r\n      tooltip_position\r\n    } = element.settings;\r\n    let { tooltip_text } = element.settings;\r\n    let classes = `altrp-element altrp-element${element.getId()} altrp-element_${element.getType()}`;\r\n    classes += element.getPrefixClasses() + \" \";\r\n    if (element.getType() === \"widget\") {\r\n      classes += ` altrp-widget_${element.getName()}`;\r\n    }\r\n    if(this.props.element.getResponsiveSetting('css_class')){\r\n      classes += ` ${replaceContentWithData(\r\n        this.props.element.getResponsiveSetting('css_class'),\r\n        this.props.element.getCurrentModel().getData()\r\n      )} `;\r\n    }\r\n    if (hide_on_wide_screen) {\r\n      classes += \" hide_on_wide_screen\";\r\n    }\r\n    if (hide_on_desktop) {\r\n      classes += \" hide_on_desktop\";\r\n    }\r\n    if (hide_on_laptop) {\r\n      classes += \" hide_on_laptop\";\r\n    }\r\n    if (hide_on_tablet) {\r\n      classes += \" hide_on_tablet\";\r\n    }\r\n    if (hide_on_big_phone) {\r\n      classes += \" hide_on_big_phone\";\r\n    }\r\n    if (hide_on_small_phone) {\r\n      classes += \" hide_on_small_phone\";\r\n    }\r\n    if (isFixed) {\r\n      classes += \" fixed-section\";\r\n    }\r\n    if (this.state.errorInfo) {\r\n      return (\r\n        <div className=\"altrp-error\" data-eltype={element.getType()}>\r\n          <h2>Something went wrong.</h2>\r\n          <details style={{ whiteSpace: \"pre-wrap\" }}>\r\n            {this.state.error && this.state.error.toString()}\r\n            <br />\r\n            {this.state.errorInfo.componentStack}\r\n          </details>\r\n        </div>\r\n      );\r\n    }\r\n    const styles = {};\r\n\r\n    if (element.getResponsiveSetting(\"layout_column_width\")) {\r\n      if (\r\n        Number(element.getResponsiveSetting(\"layout_column_width\"))\r\n      ) {\r\n        styles.width =\r\n          element.getResponsiveSetting(\"layout_column_width\") + \"%\";\r\n      } else {\r\n        styles.width = element.getResponsiveSetting(\r\n          \"layout_column_width\"\r\n        );\r\n      }\r\n    }\r\n    if (!this.state.elementDisplay) {\r\n      styles.display = \"none\";\r\n    }\r\n    let CSSId = element.getSettings(\"advanced_element_id\", \"\");\r\n    CSSId = replaceContentWithData(\r\n      CSSId,\r\n      element.getCurrentModel().getData()\r\n    );\r\n    if (this.CSSId !== CSSId) {\r\n      this.CSSId = CSSId;\r\n    }\r\n    let ContentComponent = frontElementsManager.getComponentClass(\r\n      element.getName()\r\n    );\r\n    const content = React.createElement(ContentComponent, {\r\n      ref: this.elementRef,\r\n      rootElement: this.props.rootElement,\r\n      ElementWrapper: this.props.ElementWrapper,\r\n      element: element,\r\n      children: element.getChildren(),\r\n      match: this.props.match,\r\n      currentModel: this.props.currentModel,\r\n      currentUser: this.props.currentUser,\r\n      currentDataStorage: this.props.currentDataStorage,\r\n      altrpresponses: this.props.altrpresponses,\r\n      formsStore: this.props.formsStore,\r\n      elementDisplay: this.state.elementDisplay,\r\n      altrpPageState: this.props.altrpPageState,\r\n      altrpMeta: this.props.altrpMeta,\r\n      updateToken: this.state.updateToken,\r\n      currentScreen: this.props.currentScreen,\r\n      baseRender: this.props.baseRender,\r\n      history: this.props.history,\r\n      appStore\r\n    });\r\n    if (element.getTemplateType() === \"email\") {\r\n      if (!this.state.elementDisplay) {\r\n        return null;\r\n      }\r\n      return <>{content}</>;\r\n    }\r\n\r\n    let WrapperComponent = ElementWrapperDivComponent;\r\n    switch (element.getName()) {\r\n      case \"nav\":\r\n        WrapperComponent = NavComponent;\r\n        break;\r\n    }\r\n\r\n    tooltip_text = replaceContentWithData(\r\n      tooltip_text,\r\n      element.getCurrentModel().getData()\r\n    );\r\n\r\n    const wrapperProps = {\r\n      className: classes,\r\n      ref: this.elementWrapperRef,\r\n      elementId: this.elementId,\r\n      settings: this.settings,\r\n      style: styles,\r\n      id: this.CSSId,\r\n    };\r\n    if (\r\n      this.reactElement ||\r\n      DEFAULT_REACT_ELEMENTS.indexOf(element.getName()) !== -1\r\n    ) {\r\n      wrapperProps[\"data-react-element\"] = element.getId();\r\n    }\r\n    if(! _.isEmpty(element.getResponsiveSetting('wrapper_click_actions'))){\r\n      wrapperProps[\"data-altrp-wrapper-click-actions\"] = element.getId();\r\n    }\r\n    wrapperProps[\"data-altrp-id\"] = element.getId();\r\n    return  (\r\n      <WrapperComponent {...wrapperProps} element={element.getId()}>\r\n        {content}\r\n        {tooltip_text && (\r\n          <AltrpTooltip position={tooltip_position}>\r\n            {tooltip_text}\r\n          </AltrpTooltip>\r\n        )}\r\n      </WrapperComponent>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    altrpresponses: state.altrpresponses,\r\n    formsStore: state.formsStore,\r\n    currentDataStorage: state.currentDataStorage,\r\n    currentModel: state.currentModel,\r\n    currentUser: state.currentUser,\r\n    altrpMeta: state.altrpMeta,\r\n    altrpPageState: state.altrpPageState,\r\n    currentScreen: state.currentScreen\r\n  };\r\n}\r\nlet _export;\r\nif(window['h-altrp']){\r\n  _export = ElementWrapper;\r\n} else {\r\n  _export = withRouter(ElementWrapper)\r\n}\r\nexport default window.reactRedux.connect(mapStateToProps, null, null, {\r\n  forwardRef: true\r\n})(_export);\r\n","import ElementWrapper from \"../components/ElementWrapper\";\r\nwindow.SectionElementWrapper = ElementWrapper;\r\n","export const ADD_ELEMENT = 'ADD_ELEMENT';\r\nexport const CLEAR_ELEMENTS = 'CLEAR_ELEMENTS';\r\n\r\n/**\r\n *\r\n * @param {React.Component}elementComponent\r\n * @return {{}} - {\r\n *     type: {string},\r\n *     sectionComponent: {React.Component},\r\n *   }\r\n */\r\nexport function addElement(elementComponent) {\r\n  return {\r\n    type: ADD_ELEMENT,\r\n    elementComponent\r\n  };\r\n}\r\n\r\n/**\r\n * Перед загрузкой новых данных, старые удаляем\r\n * @return {{type: string}}\r\n */\r\nexport function clearElements() {\r\n  return {\r\n    type: CLEAR_ELEMENTS,\r\n  };\r\n}\r\n\r\n"],"sourceRoot":""}