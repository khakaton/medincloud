{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/classes/AltrpModelUpdater.js","webpack:///./resources/modules/editor/src/js/classes/modules/ModelsManager.js"],"names":["modelName","modelId","this","console","error","data","subscribers","resource","Resource","route","updating","callback","push","callSubscribers","updateData","get","forEach","subscriber","_","isFunction","updateModelData","getData","filter","_s","extend","modelsStorage","altrpModel","AltrpModelUpdater","model","subscribeToUpdates","unsubscribe","updateWithData"],"mappings":"ubAmGA,E,WAxFE,WAAYA,EAAWC,IAAQ,eAC7BC,KAAKF,UAAYA,EACZC,GACHE,QAAQC,MAAM,wBAEhBF,KAAKD,QAAUA,EACfC,KAAKG,KAAO,KACZH,KAAKI,YAAc,GACnBJ,KAAKK,SAAW,IAAIC,IAAS,CAACC,MAAO,gBAAF,OAAkBP,KAAKF,aAC1DE,KAAKQ,UAAW,E,uDAOlB,SAAmBC,GACjBT,KAAKI,YAAYM,KAAKD,GACnBT,KAAKQ,WAGLR,KAAKG,MACNH,KAAKW,kBAEPX,KAAKY,gB,6CAQP,qFACEZ,KAAKQ,UAAW,EADlB,SAEoBR,KAAKK,SAASQ,IAAIb,KAAKD,SAF3C,OAEEC,KAAKG,KAFP,OAGEH,KAAKQ,UAAW,EAChBR,KAAKW,kBAJP,gD,0EAUA,WAAiB,WACfX,KAAKI,YAAYU,SAAQ,SAAAC,GACpBC,EAAEC,WAAWF,EAAWG,kBACzBH,EAAWG,gBAAgB,EAAKC,WAE/BH,EAAEC,WAAWF,IACdA,EAAW,EAAKI,gB,yBAUtB,SAAYJ,GACVf,KAAKI,YAAcJ,KAAKI,YAAYgB,QAAO,SAAAC,GAAE,OAAGA,IAAON,O,qBAczD,WACE,OAAOf,KAAKG,O,4BAOd,SAAeA,GACbH,KAAKG,KAAOa,EAAEM,OAAQtB,KAAKG,K,qWAAf,IAAwBA,IACpCH,KAAKW,sB,KCCT,EADsB,I,WA3FpB,cAAa,eACXX,KAAKuB,cAAgB,G,0CAOvB,SAAYzB,EAAWC,GAChBC,KAAKuB,cAAL,UAAsBzB,EAAtB,aAAoCC,KACvCC,KAAKuB,cAAL,UAAsBzB,EAAtB,aAAoCC,IAAWa,e,sBAOnD,SAASY,M,sBAST,SAAS1B,EAAWC,M,qCAWpB,SAAwBD,EAAWC,EAASU,GAC1C,OAAKV,GAQAC,KAAKuB,cAAL,UAAsBzB,EAAtB,aAAoCC,MACvCC,KAAKuB,cAAL,UAAsBzB,EAAtB,aAAoCC,IAAa,IAAI0B,EAAkB3B,EAAWC,KAEpF2B,EAAQ1B,KAAKuB,cAAL,UAAsBzB,EAAtB,aAAoCC,KACtC4B,mBAAmBlB,GAClBiB,GAZE,KAMT,IAAIA,I,yBAeN,SAAY5B,EAAWC,EAASU,GAC9B,OAAKV,EAQAC,KAAKuB,cAAL,UAAsBzB,EAAtB,aAAoCC,MAGzC2B,EAAQ1B,KAAKuB,cAAL,UAAsBzB,EAAtB,aAAoCC,KACtC6B,YAAYnB,GACXiB,QALP,EAPS,KAMT,IAAIA,I,iCAgBN,SAAoB5B,EAAWC,EAASI,GACjCH,KAAKuB,cAAL,UAAsBzB,EAAtB,aAAoCC,KAGzCC,KAAKuB,cAAL,UAAsBzB,EAAtB,aAAoCC,IAAW8B,eAAe1B,O","file":"ModelsManager.8b01b128ab2d9cf89c6d.bundle.js","sourcesContent":["/**\r\n * @class AltrpModelUpdater\r\n */\r\nimport Resource from \"./Resource\";\r\n\r\nclass AltrpModelUpdater {\r\n  /**\r\n   *\r\n   * @param {string} modelName\r\n   * @param {int} modelId\r\n   */\r\n  constructor(modelName, modelId){\r\n    this.modelName = modelName;\r\n    if(! modelId){\r\n      console.error('ид модели не указан!');\r\n    }\r\n    this.modelId = modelId;\r\n    this.data = null;\r\n    this.subscribers = [];\r\n    this.resource = new Resource({route: `/ajax/models/${this.modelName}`});\r\n    this.updating = false;\r\n  }\r\n\r\n  /**\r\n   * Подписывает функцию на обновления\r\n   * @param {function} callback\r\n   */\r\n  subscribeToUpdates(callback){\r\n    this.subscribers.push(callback);\r\n    if(this.updating){\r\n      return;\r\n    }\r\n    if(this.data) {\r\n      this.callSubscribers();\r\n    }\r\n    this.updateData();\r\n    // } else {\r\n    // }\r\n  }\r\n\r\n  /**\r\n   * Обновляет модель с сервера\r\n   */\r\n  async updateData(){\r\n    this.updating = true;\r\n    this.data = await this.resource.get(this.modelId);\r\n    this.updating = false;\r\n    this.callSubscribers();\r\n  }\r\n\r\n  /**\r\n   * Передать данные всем подписчикам\r\n   */\r\n  callSubscribers(){\r\n    this.subscribers.forEach(subscriber=>{\r\n      if(_.isFunction(subscriber.updateModelData)){\r\n        subscriber.updateModelData(this.getData());\r\n      }\r\n      if(_.isFunction(subscriber)){\r\n        subscriber(this.getData());\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * Отписаться (отписываемся перед удалением компонента)\r\n   * @param callback\r\n   */\r\n  unsubscribe(subscriber){\r\n    this.subscribers = this.subscribers.filter(_s=>(_s !== subscriber))\r\n  }\r\n  //\r\n  // unsubscribe(callback){\r\n  //   this.subscribers = _.remove(this.subscribers, (idx, item)=>{\r\n  //     console.log(item);\r\n  //     return callback === item;\r\n  //   })\r\n  // }\r\n\r\n  /**\r\n   * Получить данные модели\r\n   * @return {object | null}\r\n   */\r\n  getData(){\r\n    return this.data;\r\n  }\r\n  /**\r\n   * Обновить модель данными\r\n   * @param {{}} data\r\n   * @return void\r\n   */\r\n  updateWithData(data){\r\n    this.data = _.extend( this.data,{...data});\r\n    this.callSubscribers();\r\n  }\r\n}\r\n\r\n\r\nexport default AltrpModelUpdater","import AltrpModelUpdater from \"../AltrpModelUpdater\";\r\n\r\nclass ModelsManager {\r\n  constructor(){\r\n    this.modelsStorage = {};\r\n\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  updateModel(modelName, modelId){\r\n    if(! this.modelsStorage[`${modelName}::${modelId}`]) {\r\n      this.modelsStorage[`${modelName}::${modelId}`].updateData();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {AltrpModelUpdater} altrpModel\r\n   */\r\n  addModel(altrpModel){\r\n\r\n  }\r\n\r\n  /**\r\n   * @param {string} modelName\r\n   * @param {int} modelId\r\n   * @return {AltrpModelUpdater}\r\n   */\r\n  getModel(modelName, modelId){\r\n\r\n  }\r\n\r\n  /**\r\n   * Подписывается на изменения модели\r\n   * @param {string} modelName\r\n   * @param {int} modelId\r\n   * @param {function} callback\r\n   * @return {AltrpModelUpdater | null}\r\n   */\r\n  subscribeToModelUpdates(modelName, modelId, callback){\r\n    if(! modelId){\r\n      return null;\r\n    }\r\n    /**\r\n     * model\r\n     * @type {AltrpModelUpdater}\r\n     */\r\n    let model;\r\n    if(! this.modelsStorage[`${modelName}::${modelId}`]){\r\n      this.modelsStorage[`${modelName}::${modelId}`] = new AltrpModelUpdater(modelName, modelId);\r\n    }\r\n    model = this.modelsStorage[`${modelName}::${modelId}`];\r\n    model.subscribeToUpdates(callback);\r\n    return model;\r\n  }\r\n  /**\r\n   * удаляем подписчика\r\n   * @param {string} modelName\r\n   * @param {int} modelId\r\n   * @param {function} callback\r\n   * @return {AltrpModelUpdater | null}\r\n   */\r\n  unsubscribe(modelName, modelId, callback){\r\n    if(! modelId){\r\n      return null;\r\n    }\r\n    /**\r\n     * model\r\n     * @type {AltrpModelUpdater}\r\n     */\r\n    let model;\r\n    if(! this.modelsStorage[`${modelName}::${modelId}`]){\r\n      return\r\n    }\r\n    model = this.modelsStorage[`${modelName}::${modelId}`];\r\n    model.unsubscribe(callback);\r\n    return model;\r\n  }\r\n\r\n  /**\r\n   * Обновить названию и ИД модель данными\r\n   * @param {string} modelName\r\n   * @param {int} modelId\r\n   * @param {{}} data\r\n   * @return void\r\n   */\r\n  updateModelWithData(modelName, modelId, data){\r\n    if(! this.modelsStorage[`${modelName}::${modelId}`]) {\r\n      return;\r\n    }\r\n    this.modelsStorage[`${modelName}::${modelId}`].updateWithData(data);\r\n  }\r\n}\r\nconst modelManager =  new ModelsManager();\r\nexport default modelManager;"],"sourceRoot":""}