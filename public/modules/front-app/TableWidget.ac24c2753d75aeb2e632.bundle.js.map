{"version":3,"sources":["webpack:///./resources/modules/admin/src/components/AutoUpdateInput.js","webpack:///./resources/modules/admin/src/js/helpers.js","webpack:///./resources/modules/editor/src/js/classes/AltrpModel.js","webpack:///./resources/modules/editor/src/js/classes/Query.js","webpack:///./resources/modules/editor/src/js/classes/AltrpModelUpdater.js","webpack:///./resources/modules/editor/src/js/classes/modules/ModelsManager.js","webpack:///./resources/modules/editor/src/js/components/altrp-table/altrp-table.js","webpack:///./resources/modules/editor/src/js/components/altrp-table/components/TableComponent.js","webpack:///./resources/modules/editor/src/js/components/altrp-table/components/HeaderCellComponent.js","webpack:///./resources/modules/editor/src/js/components/altrp-table/components/CellComponent.js","webpack:///./resources/modules/editor/src/js/components/altrp-table/components/Cell.js","webpack:///./resources/modules/editor/src/js/components/altrp-table/components/Row.js","webpack:///./resources/modules/editor/src/js/components/altrp-table/components/SubheadingRow.js","webpack:///./resources/modules/editor/src/js/components/altrp-table/components/TableBodyContent.js","webpack:///./resources/modules/editor/src/js/components/altrp-table/components/TableBody.js","webpack:///./resources/modules/editor/src/js/components/altrp-table/altrp-table-without-update.js","webpack:///./resources/modules/editor/src/js/components/widgets/TableWidget.js"],"names":["AutoUpdateInput","props","resource","Resource","route","state","value","disabled","changeValue","bind","onChange","onKeyDown","prevProps","prevState","this","console","log","setState","undefined","resourceid","get","res","e","keyCode","newValue","target","_","isFunction","changevalue","onBlur","put","column_value","className","inputProps","Component","iconsManager","window","IconsManager","AltrpModel","data","cloneDeep","clone","isEmpty","name","defaultValue","has","getData","set","unset","Query","component","modelName","dataSource","type","dataSourceName","pageSize","paginationType","orderingField","order","sql_name","context","currentModel","setProperty","currentDataStorage","setDefaultParams","parseParamsFromString","defaultParams","modelData","isArray","params","modelUpdater","modelManager","model_name","getModelId","getResource","getQueried","getParams","lastQuery","hasMore","assign","getDefaultParams","page","counterStart","parseInt","modelId","error","subscribers","updating","callback","push","callSubscribers","updateData","forEach","subscriber","updateModelData","filter","_s","extend","modelsStorage","altrpModel","AltrpModelUpdater","model","subscribeToUpdates","unsubscribe","updateWithData","Link","AltrpTable","settings","query","_status","_error","setSortSettings","setFilterSettings","filterSetting","setPage","_latestData","sortSetting","tables_columns","length","children","defaultSortSettings","column","column_is_default_sorted","order_by","accessor","groupBy","React","getGroupBy","columns","counter","getCounterStart","collapsing","group_collapsing","collapsedGroups","setCollapsedGroups","useState","updatedData","setUpdatedData","doubleClicked","setDoubleClicked","groupingStore","settingsToColumns","map","row","id","rowId","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","sortingHandler","filterHandler","filteredColumn","searchString","filterParams","renderAdditionalRows","headerGroup","getHeaderGroupProps","headers","renderTh","table_style_table_striple_style","message","i","rowStyles","original","mbParseJSON","key","renderGroupingTr","getRowProps","style","table_hover_row","indexOf","last","cells","cell","_i","cellContent","render","linkTag","isEditor","column_external_link","column_body_alignment","textAlign","cellProps","getCellProps","_cellContent","doubleClickContent","column_is_editable","column_edit_url","columnEditUrl","parseURLTemplate","_accessor","onDoubleClick","cellClassName","isObject","column_link","to","href","column_blank_link","dangerouslySetInnerHTML","__html","trim","cellStyles","renderCellActions","isString","renderFooter","onClick","old","Math","max","prev_text","current_page_text","next_text","_column","column_name","actions","additional_rows","additional_cells","rowspan","colspan","role","colSpan","rowSpan","title","column_width","column_header_alignment","thProps","getHeaderProps","width","column_is_sorted","thText","renderIcon","column_is_filtered","stopPropagation","group_by","text","collapsed","collapsed_icon","expanded_icon","toggleGroup","renderAsset","assetType","currentRowHeading","g","footerColumns","footer_columns","footerColumn","column_footer_alignment","content","altrphelpers","replace","eval","replaceContentWithData","action","tag","actionContent","link","actionProps","classes","marginLeft","marginRight","marginTop","marginBottom","target_blank","iconSize","iconProps","height","icon","getResponsiveSetting","altrpHelpers","styled","table_style_main_width","table_style_other_width","styles","table_transpose","column_cell_vertical_alignment","header_full_width","header_bg","verticalAlign","verticalAlignToAlignItems","color","filteredRows","body_bg","resize_columns","replace_rows","virtualized_rows","hide_expanded_row_icon","expanded_row_icon","hide_not_expanded_row_icon","not_expanded_row_icon","index","isGrouped","getToggleRowExpandedProps","isExpanded","recurseCount","isAggregated","isPlaceholder","cellClassNames","useMemo","join","backgroundColor","moveRow","visibleColumns","cardTemplate","dropRef","useRef","dragRef","fragmentProps","ExpandCard","row_expand","card_template","replace_text","replace_image","replace_width","template","frontElementsFabric","setCardModel","createElement","componentClass","element","ElementWrapper","rowProps","ref","useDrop","accept","hover","item","monitor","current","dragIndex","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","hoverClientY","getClientOffset","y","drop","useDrag","collect","isDragging","drag","opacity","preview","Fragment","url","src","idx","groupIndex","groupsStylesSettings","groupsSettings","transition","cell_alignment","padding","bg_color","typographic","stringStyles","size","dimensionsControllerToStyles","typographicControllerToStyles","cell_alignment_hover","padding_hover","color_hover","bg_color_hover","typographic_hover","TableBodyContent","totalColumnsWidth","scrollBarSize","scrollbarWidth","virtualized_height","item_size","tables_settings_for_subheading","RenderRow","itemCount","groups","leftValue","rightValue","columnName","split","columnValue","currentGroup","find","group","Number","itemSize","_props","isStriped","contentProps","sortedColumns","sortedDirections","includesSome","ids","filterValue","some","rowValue","values","val","includes","fuzzyTextFilterFn","matchSorter","keys","fullMatchTextFilterFn","partialMatchTextFilterFn","AltrpTableWithoutUpdate","currentScreen","widgetId","widgetState","stateRef","inner_page_size","global_filter","selected_storage","row_select","row_select_width","store_state","loading_text","row_select_all","hide_columns","ids_storage","hide_grouped_column_icon","grouped_column_icon","hide_not_grouped_column_icon","not_grouped_column_icon","checkbox_checked_icon","checkedIcon","checkbox_unchecked_icon","uncheckedIcon","checkbox_indeterminate_icon","indeterminateIcon","setCardTemplate","records","setRecords","filterTypes","fuzzyText","fullMatchText","partialMatchText","String","toLowerCase","startsWith","between","_ref","min","Infinity","temp","equals","defaultColumn","Filter","DefaultColumnFilter","Cell","DefaultCell","edit_disabled","columnOrder","column_filter_type","NumberRangeColumnFilter","SliderColumnFilter","SelectColumnFilter","column_text_filter_type","canGroupBy","disableSortBy","aggregate","aggregateTemplate","aggregate_template","Aggregated","unshift","getToggleAllRowsExpandedProps","isAllRowsExpanded","canExpand","paddingLeft","depth","columnIndex","templateLoader","plugins","useFilters","useGlobalFilter","useGroupBy","useSortBy","useExpanded","usePagination","useRowSelect","useResizeColumns","useBlockLayout","hooks","getToggleAllRowsSelectedProps","getToggleAllPageRowsSelectedProps","IndeterminateCheckbox","icons","getToggleRowSelectedProps","skipPageReset","setSkipPageReset","rowIndex","columnId","getRowId","tableSettings","autoResetPage","initialState","sortBy","desc","ReactTable","pageCount","canPreviousPage","canNextPage","pageOptions","gotoPage","nextPage","previousPage","getToggleHideAllColumnsProps","allColumns","preGlobalFilteredRows","setGlobalFilter","setPageSize","selectedFlatRows","reactTableState","pageIndex","globalFilter","selectedRowIds","expanded","flatRows","field","_rows","r","subRows","concat","storeWidgetState","originalSelectedRows","selectedIds","isEqual","getDataByPath","setDataByPath","paginationProps","tableElement","getToggleHiddenProps","table","headerGroupProps","columnProps","getSortByToggleProps","resizerProps","getResizerProps","columnNameContent","getGroupByToggleProps","isSorted","isSortedDesc","isResizing","GlobalFilter","dragRecord","update","$splice","Pagination","preFilteredRows","setFilter","filter_placeholder","count","placeholder","options","_options","Set","add","option","label","AltrpSelect","isMulti","classNamePrefix","v","filter_button_text","buttonText","filter_max_placeholder","filter_min_placeholder","minPlaceHolder","maxPlaceHolder","display","autoRemove","indeterminate","rest","defaultRef","resolvedRef","checked","renderAssetIcon","global_filter_placeholder","global_filter_label","setValue","useAsyncDebounce","labelText","htmlFor","choose_datasource","Array","from","setAltrpIndex","initialValue","column_template","column_cell_content_type","substring","columnTemplate","setColumnTemplate","fetchTemplate","columnTemplateContent","getWidgetState","globalDefaults","getSettings","TableComponent","elementDecorator","baseRender","scrollbar","createRef","getId","getProperty","path","getCurrentModel","table_query","showTable","scrollbarsProps","zIndex","autoHeight","autoHideTimeout","autoHideDuration","renderTrackVertical","autoHeightMax","autoHide","renderTrackHorizontal","updateToken","getFromModel"],"mappings":"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","file":"TableWidget.ac24c2753d75aeb2e632.bundle.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport Resource from \"../../../editor/src/js/classes/Resource\";\r\n\r\nclass AutoUpdateInput extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.resource = new Resource({\r\n      route: this.props.route,\r\n    });\r\n\r\n    this.state = {\r\n      value: this.props.value || '',\r\n      disabled: ! this.props.value,\r\n    };\r\n    this.changeValue = this.changeValue.bind(this);\r\n    this.onChange = this.onChange.bind(this);\r\n    this.onKeyDown = this.onKeyDown.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Обновление роута или значения через пропсы\r\n   * @param {{}} prevProps\r\n   * @param {{}} prevState\r\n   */\r\n  componentDidUpdate(prevProps, prevState){\r\n    if(prevProps.route !== this.props.route){\r\n      this.resource = new Resource({\r\n        route: this.props.route,\r\n      });\r\n      console.log(this.resource);\r\n    }\r\n    if(prevProps.value !== this.props.value && this.props.value !== this.state.value){\r\n      // console.log(this.props.value);\r\n      this.setState(state =>({...state, value: this.props.value}));\r\n    }\r\n  }\r\n\r\n  async componentDidMount(){\r\n    if(this.props.value !== undefined || ! this.props.resourceid){\r\n      return;\r\n    }\r\n    let res = await this.resource.get(this.props.resourceid);\r\n    this.setState(state=>{\r\n      return{...state,\r\n        value: res[this.props.resourceid] || '',\r\n        disabled: false,\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * При нажатии на enter тоже обновим данные\r\n   * @param e\r\n   */\r\n  onKeyDown(e){\r\n    if(e.keyCode === 13){\r\n      this.changeValue(e);\r\n    }\r\n  }\r\n\r\n  onChange(e){\r\n    let newValue = e.target.value;\r\n    this.setState(state=>{\r\n      return{...state,\r\n        value: newValue,\r\n      }\r\n    });\r\n    if(_.isFunction(this.props.changevalue)){\r\n      this.props.changevalue(newValue);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Запрос на именение поля\r\n   * @param e\r\n   * @return {Promise<void>}\r\n   */\r\n  async changeValue(e){\r\n    let newValue = e.target.value;\r\n    this.setState(state=>{\r\n      return{...state,\r\n        disabled: true,\r\n      }\r\n    });\r\n    if(_.isFunction(this.props.onBlur)){\r\n      this.props.onBlur(newValue);\r\n    }\r\n    let res = await this.resource.put(this.props.resourceid, {value: newValue, column_value: newValue});\r\n\r\n    this.setState(state=>{\r\n      return{...state,\r\n        disabled: false,\r\n      }\r\n    });\r\n  }\r\n  render(){\r\n    let {className} = this.props;\r\n    if(this.state.disabled){\r\n      className += ' pointer-event-none';\r\n    }\r\n    const inputProps = {...this.props};\r\n    delete inputProps.changevalue;\r\n    return<input{...inputProps} className={className}\r\n                onBlur={this.changeValue}\r\n                onKeyDown={this.onKeyDown}\r\n                onChange={this.onChange}\r\n                value={this.state.value}/>\r\n  }\r\n}\r\n\r\nexport default AutoUpdateInput","import IconsManager from \"../../../editor/src/js/classes/modules/IconsManager\";\r\nimport Resource from \"../../../editor/src/js/classes/Resource\";\r\nimport { isEmpty } from \"lodash\";\r\n\r\nexport function redirect(url) {\r\n  url = url || '/';\r\n  window.location.assign(url);\r\n}\r\nexport function generateId() {\r\n  return '_' + Math.random().toString(36).substr(2, 9);\r\n}\r\n/**\r\n * @return {IconsManager}\r\n* */\r\nexport function iconsManager() {\r\n  if (!window.iconsManager) {\r\n    window.iconsManager = new IconsManager();\r\n  }\r\n  return window.iconsManager;\r\n}\r\n\r\nexport async function logout() {\r\n  let res = await (new Resource({ route: '/logout' })).post();\r\n  redirect(res.location)\r\n}\r\n\r\nexport function pageReload() {\r\n  document.location.reload(true);\r\n}\r\n\r\nconst a = { \"Ё\": \"Yo\", \"Й\": \"I\", \"Ц\": \"Ts\", \"У\": \"U\", \"К\": \"K\", \"Е\": \"E\", \"Н\": \"N\", \"Г\": \"G\", \"Ш\": \"Sh\", \"Щ\": \"Sch\", \"З\": \"Z\", \"Х\": \"H\", \"Ъ\": \"\", \"ё\": \"yo\", \"й\": \"i\", \"ц\": \"ts\", \"у\": \"u\", \"к\": \"k\", \"е\": \"e\", \"н\": \"n\", \"г\": \"g\", \"ш\": \"sh\", \"щ\": \"sch\", \"з\": \"z\", \"х\": \"h\", \"ъ\": \"\", \"Ф\": \"F\", \"Ы\": \"I\", \"В\": \"V\", \"А\": \"a\", \"П\": \"P\", \"Р\": \"R\", \"О\": \"O\", \"Л\": \"L\", \"Д\": \"D\", \"Ж\": \"ZH\", \"Э\": \"E\", \"ф\": \"f\", \"ы\": \"i\", \"в\": \"v\", \"а\": \"a\", \"п\": \"p\", \"р\": \"r\", \"о\": \"o\", \"л\": \"l\", \"д\": \"d\", \"ж\": \"zh\", \"э\": \"e\", \"Я\": \"Ya\", \"Ч\": \"CH\", \"С\": \"S\", \"М\": \"M\", \"И\": \"I\", \"Т\": \"T\", \"Ь\": \"\", \"Б\": \"B\", \"Ю\": \"YU\", \"я\": \"ya\", \"ч\": \"ch\", \"с\": \"s\", \"м\": \"m\", \"и\": \"i\", \"т\": \"t\", \"ь\": \"\", \"б\": \"b\", \"ю\": \"yu\" };\r\n\r\n/**\r\n * Транслитерация\r\n * @param {string}str\r\n * @return {string}\r\n */\r\nexport function transliterate(str) {\r\n  if (!str) {\r\n    return \"\";\r\n  }\r\n  return str.split('').map(function (char) {\r\n    return _.isUndefined(a[char]) ? char : a[char];\r\n  }).join(\"\");\r\n}\r\n\r\n/**\r\n * Парсит строку в name для БД\r\n * @param {string}str\r\n * @return {string}\r\n */\r\nexport function titleToName(str) {\r\n  str = transliterate(str);\r\n  return str.toLowerCase().replace(/^\\d+/, '').replace(/[^\\d\\w]/g, '_');\r\n\r\n}\r\n\r\nexport function titleToPath(str) {\r\n  str = transliterate(str);\r\n  return str.toLowerCase().replace(/^\\d+/, '').replace(/[^\\d\\w]/g, '-');\r\n\r\n}\r\n/** @function objectDeepCleaning\r\n  * Удаляет все свойства id, и чистит settings (пока нет) todo: нужна оптимизация\r\n  * @param {object} collection\r\n  * @return {object} Объект после удаления всех свойств id, и чистки settings\r\n */\r\nexport function objectDeepCleaning(collection) {\r\n  return collection;\r\n  if (typeof collection !== \"object\" || collection === null) return collection;\r\n  if (collection.id) delete collection.id;\r\n\r\n  if (Array.isArray(collection)) {\r\n    for (let index = 0; index < collection.length; index++) {\r\n      const element = collection[index];\r\n      objectDeepCleaning(element);\r\n    }\r\n  } else {\r\n    if (collection.hasOwnProperty(\"settings\")) deleteEmptyPropsDeep(collection.settings);\r\n    if (isEmpty(collection.settings)) delete collection.settings; // удаляем settings, если оно - пустой объект\r\n    for (const key in collection) {\r\n      if (collection.hasOwnProperty(key)) {\r\n        const element = collection[key];\r\n        objectDeepCleaning(element);\r\n      }\r\n    }\r\n  }\r\n  return collection;\r\n}\r\n/** @function deleteEmptyPropsDeep\r\n  * Удаляет в объекте все свойства, значения которых - null, или \"\", или {}\r\n  * @param {object} collection\r\n */\r\nexport function deleteEmptyPropsDeep(collection) {\r\n  const deleteProps = [];\r\n  for (const key in collection) {\r\n    if (collection[key] === null || collection[key] === \"\") {\r\n      deleteProps.push(key);\r\n    }\r\n    deleteProps.forEach(key => delete collection[key]);\r\n\r\n    if (typeof collection[key] === \"object\") {\r\n      deleteEmptyPropsDeep(collection[key]);\r\n      if (isEmpty(collection[key])) delete collection[key];\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport function buildPagesTree(pages) {\r\n  const level = 0;\r\n  const tree = [];\r\n  const roots = pages.filter(({ parent_page_id }) => parent_page_id === null);\r\n\r\n  if (!roots.length) return pages;\r\n\r\n  roots.forEach(root => {\r\n    tree.push(root);\r\n    treeRecursion(root.id, level + 1);\r\n  });\r\n\r\n  function treeRecursion(parentId, level) {\r\n    const children = pages.filter(({ parent_page_id }) => parent_page_id === parentId);\r\n    children.forEach(page => {\r\n      page.title = \"—\".repeat(level) + page.title;\r\n      tree.push(page);\r\n      treeRecursion(page.id, level + 1);\r\n    });\r\n  }\r\n\r\n  return tree;\r\n}\r\n\r\nexport function filterUsers(users, roleFilter) {\r\n  return users.filter(user => user.roles.some(role => role.id === roleFilter));\r\n}\r\n\r\n\r\nexport function sortUsers(users, sortingField, order) {\r\n  const sortedUsers = users.sort((a, b) => {\r\n    if (a[sortingField] < b[sortingField]) {\r\n      return -1;\r\n    }\r\n    if (a[sortingField] > b[sortingField]) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  });\r\n\r\n  return order === 'ASC' ? sortedUsers : sortedUsers.reverse();\r\n}","/**\r\n * Имеет интерфейс для доступы к свойствам data (любой вложенности)\r\n * @class AltrpModel\r\n */\r\nimport cloneDeep from 'lodash.clonedeep';\r\nimport get from 'lodash.get';\r\nimport set from 'lodash.set';\r\nimport has from 'lodash.has';\r\nimport unset from 'lodash.unset';\r\nimport isEmpty from 'lodash.isempty';\r\n// import {cloneDeep, get, set, has, unset, isString, isEmpty} from \"lodash\";\r\n\r\nclass AltrpModel {\r\n  constructor(data = {}) {\r\n    this.data = cloneDeep(data);\r\n  }\r\n\r\n  /**\r\n   * Возваращает объект данных\r\n   * @params {boolean} clone - клонировать или ссылку на данные\r\n   * @return {{}}\r\n   */\r\n  getData(clone = true) {\r\n    if(clone){\r\n      return cloneDeep(this.data);\r\n    }\r\n    return this.data;\r\n  }\r\n\r\n  /**\r\n   * Пустой ли объект\r\n   */\r\n  isEmpty(){\r\n    return isEmpty(this.data);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  getProperty(name, defaultValue = '') {\r\n    return get(this.data, name, defaultValue);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  hasProperty(name, defaultValue = '') {\r\n    return has(this.data, name);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {{}}\r\n   */\r\n  setProperty(name, value = '') {\r\n    if(value instanceof AltrpModel){\r\n      value = value.getData(false);\r\n    }\r\n    return set(this.data, name, value);\r\n  }\r\n  /**\r\n   * Удаляет свойства name\r\n   * @params {string} name\r\n   * @return {*}\r\n   */\r\n  unsetProperty(name) {\r\n    return unset(this.data, name);\r\n  }\r\n}\r\nwindow.AltrpModel = AltrpModel;\r\nexport default AltrpModel\r\n","import Resource from \"./Resource\";\r\nimport modelManager from \"../../../../editor/src/js/classes/modules/ModelsManager\";\r\nimport {parseParamsFromString} from \"../../../../front-app/src/js/helpers\";\r\n\r\nclass Query {\r\n\r\n  constructor(data, component){\r\n    this.component = component;\r\n    this.modelName = data.modelName || '';\r\n    this.dataSource = data.dataSource;\r\n    if(data.dataSource && data.dataSource.type === 'model_query'){\r\n      this.dataSourceName = data.dataSource.value || '';\r\n    }\r\n    this.pageSize = data.pageSize || 10;\r\n    this.paginationType = data.paginationType || 'pages';\r\n    this.orderingField = data.orderingField || 'name';\r\n    this.order = data.order || 'ASC';\r\n    this.route = `/ajax/models/${this.modelName || (data.dataSource ? data.dataSource.value : '')}`;\r\n    if(data.dataSource && data.dataSource.type === 'sql_datasource'){\r\n      this.route = data.dataSource.value;\r\n      this.dataSourceName = data.dataSource.sql_name || '';\r\n    }\r\n    /**\r\n     * @member {AltrpModel} context\r\n     */\r\n    let context = _.cloneDeep(component.props.currentModel);\r\n    context.setProperty('altrpdata', component.props.currentDataStorage.getData());\r\n    this.setDefaultParams(parseParamsFromString(data.defaultParams, context));\r\n  }\r\n  /**\r\n   *\r\n   * @return {Resource}\r\n   */\r\n  getResource(){\r\n    return new Resource({route: this.route});\r\n  }\r\n\r\n\r\n  /**\r\n   * Поулчить данные с модели, которая хранится в компоненте\r\n   * @param {{}} modelData\r\n   * @return {array}\r\n   */\r\n  getFromModel(modelData){\r\n    if(! modelData){\r\n      return [];\r\n    }\r\n    if(_.isArray(modelData[this.dataSource.value])){\r\n      return [...modelData[this.dataSource.value]];\r\n    } else {\r\n      return [{...modelData[this.dataSource.value]}]\r\n    }\r\n  }\r\n  /**\r\n   * Делает запрос с параметрами\r\n   * @param params\r\n   * @return {Promise}\r\n   */\r\n  async getQueried(params){\r\n    if(this.dataSource && (this.dataSource.type === 'has_many_relation')){\r\n      if(!this.modelUpdater){\r\n        this.modelUpdater = modelManager.subscribeToModelUpdates(this.dataSource.model_name, this.component.getModelId(), this.component);\r\n      } else {\r\n        console.log(this.modelUpdater);\r\n      }\r\n    } else {\r\n      this.lastQuery = (await this.getResource().getQueried(this.getParams(params)));\r\n      let res;\r\n      if(_.isArray(this.lastQuery)){\r\n        res = [...this.lastQuery];\r\n      } else if(_.isArray(this.lastQuery.data)){\r\n        res = this.lastQuery.data;\r\n      }\r\n      res.hasMore = this.lastQuery.hasMore;\r\n      return res;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Проверка есть ли еще\r\n   */\r\n  hasMore(){\r\n    if(! this.lastQuery){\r\n      return false;\r\n    }\r\n    return this.lastQuery.hasMore;\r\n  }\r\n\r\n  /**\r\n   * Задать параметры по умолчанию\r\n   * @params {{}} defaultParams\r\n   */\r\n  setDefaultParams(defaultParams = {}){\r\n    this.defaultParams = defaultParams;\r\n  }\r\n\r\n  /**\r\n   * Вернуть значения по умолчанию\r\n   * @return {{}}\r\n   */\r\n  getDefaultParams(){\r\n    this.defaultParams = this.defaultParams || {};\r\n    this.defaultParams.pageSize = this.pageSize;\r\n    return this.defaultParams;\r\n  }\r\n\r\n  /**\r\n   * Сливает параметры с параметрами по умолчанию\r\n   * @param {object} params\r\n   * @return {object}\r\n   */\r\n  getParams(params) {\r\n    params = {..._.assign(_.cloneDeep(this.getDefaultParams()), params)};\r\n    params.page = params.page || 1;\r\n    if(_.has(params, 'pageSize') && (params.pageSize <= 0)){\r\n      delete params.pageSize;\r\n      delete params.page;\r\n    }\r\n    return params;\r\n  }\r\n\r\n  /**\r\n   * Получить стартовое значение для счетчика, если нужно показать номер по порядку в таблице\r\n   * @param {int} page\r\n   */\r\n  getCounterStart(page){\r\n    let counterStart = 1;\r\n    if(this.pageSize < 1){\r\n      return counterStart;\r\n    }\r\n    page = parseInt(page) || 1;\r\n    counterStart = this.pageSize * (page - 1) + 1;\r\n    return counterStart;\r\n  }\r\n}\r\n\r\nexport default Query","/**\r\n * @class AltrpModelUpdater\r\n */\r\nimport Resource from \"./Resource\";\r\n\r\nclass AltrpModelUpdater {\r\n  /**\r\n   *\r\n   * @param {string} modelName\r\n   * @param {int} modelId\r\n   */\r\n  constructor(modelName, modelId){\r\n    this.modelName = modelName;\r\n    if(! modelId){\r\n      console.error('ид модели не указан!');\r\n    }\r\n    this.modelId = modelId;\r\n    this.data = null;\r\n    this.subscribers = [];\r\n    this.resource = new Resource({route: `/ajax/models/${this.modelName}`});\r\n    this.updating = false;\r\n  }\r\n\r\n  /**\r\n   * Подписывает функцию на обновления\r\n   * @param {function} callback\r\n   */\r\n  subscribeToUpdates(callback){\r\n    this.subscribers.push(callback);\r\n    if(this.updating){\r\n      return;\r\n    }\r\n    if(this.data) {\r\n      this.callSubscribers();\r\n    }\r\n    this.updateData();\r\n    // } else {\r\n    // }\r\n  }\r\n\r\n  /**\r\n   * Обновляет модель с сервера\r\n   */\r\n  async updateData(){\r\n    this.updating = true;\r\n    this.data = await this.resource.get(this.modelId);\r\n    this.updating = false;\r\n    this.callSubscribers();\r\n  }\r\n\r\n  /**\r\n   * Передать данные всем подписчикам\r\n   */\r\n  callSubscribers(){\r\n    this.subscribers.forEach(subscriber=>{\r\n      if(_.isFunction(subscriber.updateModelData)){\r\n        subscriber.updateModelData(this.getData());\r\n      }\r\n      if(_.isFunction(subscriber)){\r\n        subscriber(this.getData());\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * Отписаться (отписываемся перед удалением компонента)\r\n   * @param callback\r\n   */\r\n  unsubscribe(subscriber){\r\n    this.subscribers = this.subscribers.filter(_s=>(_s !== subscriber))\r\n  }\r\n  //\r\n  // unsubscribe(callback){\r\n  //   this.subscribers = _.remove(this.subscribers, (idx, item)=>{\r\n  //     console.log(item);\r\n  //     return callback === item;\r\n  //   })\r\n  // }\r\n\r\n  /**\r\n   * Получить данные модели\r\n   * @return {object | null}\r\n   */\r\n  getData(){\r\n    return this.data;\r\n  }\r\n  /**\r\n   * Обновить модель данными\r\n   * @param {{}} data\r\n   * @return void\r\n   */\r\n  updateWithData(data){\r\n    this.data = _.extend( this.data,{...data});\r\n    this.callSubscribers();\r\n  }\r\n}\r\n\r\n\r\nexport default AltrpModelUpdater","import AltrpModelUpdater from \"../AltrpModelUpdater\";\r\n\r\nclass ModelsManager {\r\n  constructor(){\r\n    this.modelsStorage = {};\r\n\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  updateModel(modelName, modelId){\r\n    if(! this.modelsStorage[`${modelName}::${modelId}`]) {\r\n      this.modelsStorage[`${modelName}::${modelId}`].updateData();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {AltrpModelUpdater} altrpModel\r\n   */\r\n  addModel(altrpModel){\r\n\r\n  }\r\n\r\n  /**\r\n   * @param {string} modelName\r\n   * @param {int} modelId\r\n   * @return {AltrpModelUpdater}\r\n   */\r\n  getModel(modelName, modelId){\r\n\r\n  }\r\n\r\n  /**\r\n   * Подписывается на изменения модели\r\n   * @param {string} modelName\r\n   * @param {int} modelId\r\n   * @param {function} callback\r\n   * @return {AltrpModelUpdater | null}\r\n   */\r\n  subscribeToModelUpdates(modelName, modelId, callback){\r\n    if(! modelId){\r\n      return null;\r\n    }\r\n    /**\r\n     * model\r\n     * @type {AltrpModelUpdater}\r\n     */\r\n    let model;\r\n    if(! this.modelsStorage[`${modelName}::${modelId}`]){\r\n      this.modelsStorage[`${modelName}::${modelId}`] = new AltrpModelUpdater(modelName, modelId);\r\n    }\r\n    model = this.modelsStorage[`${modelName}::${modelId}`];\r\n    model.subscribeToUpdates(callback);\r\n    return model;\r\n  }\r\n  /**\r\n   * удаляем подписчика\r\n   * @param {string} modelName\r\n   * @param {int} modelId\r\n   * @param {function} callback\r\n   * @return {AltrpModelUpdater | null}\r\n   */\r\n  unsubscribe(modelName, modelId, callback){\r\n    if(! modelId){\r\n      return null;\r\n    }\r\n    /**\r\n     * model\r\n     * @type {AltrpModelUpdater}\r\n     */\r\n    let model;\r\n    if(! this.modelsStorage[`${modelName}::${modelId}`]){\r\n      return\r\n    }\r\n    model = this.modelsStorage[`${modelName}::${modelId}`];\r\n    model.unsubscribe(callback);\r\n    return model;\r\n  }\r\n\r\n  /**\r\n   * Обновить названию и ИД модель данными\r\n   * @param {string} modelName\r\n   * @param {int} modelId\r\n   * @param {{}} data\r\n   * @return void\r\n   */\r\n  updateModelWithData(modelName, modelId, data){\r\n    if(! this.modelsStorage[`${modelName}::${modelId}`]) {\r\n      return;\r\n    }\r\n    this.modelsStorage[`${modelName}::${modelId}`].updateWithData(data);\r\n  }\r\n}\r\nconst modelManager =  new ModelsManager();\r\nexport default modelManager;","import React, { useState, } from \"react\";\r\nimport {useTable, } from \"react-table\";\r\nimport ('../../../sass/altrp-pagination.scss');\r\nimport {\r\n  isEditor, mbParseJSON,\r\n  parseURLTemplate, renderAsset, replaceContentWithData\r\n} from \"../../../../../front-app/src/js/helpers\";\r\nimport {iconsManager} from \"../../../../../admin/src/js/helpers\";\r\nimport AutoUpdateInput from \"../../../../../admin/src/components/AutoUpdateInput\";\r\nimport AltrpQueryComponent from \"../altrp-query-component/altrp-query-component\";\r\nconst Link = window.Link\r\n\r\n/**\r\n *\r\n * @param settings\r\n * @param {Query} query\r\n * @param {{}} data\r\n * @param {AltrpModel} currentModel\r\n * @param {string} _status\r\n * @param {{}} _error\r\n * @param {function} setSortSettings\r\n * @param {function} setFilterSettings\r\n * @param {function} setPage\r\n * @param {{}} filterSetting\r\n * @param {{}} sortSetting\r\n * @param {int} page\r\n * @param {[]} _latestData\r\n * @return {*}\r\n * @constructor\r\n */\r\nconst AltrpTable = ({settings,\r\n                      query,\r\n                      data,\r\n                      currentModel,\r\n                      _status,\r\n                      _error,\r\n                      setSortSettings,\r\n                      setFilterSettings,\r\n                      filterSetting,\r\n                      setPage,\r\n                      _latestData,\r\n                      page,\r\n                      sortSetting}) => {\r\n  if (! (settings.tables_columns && settings.tables_columns.length)) {\r\n    return <div children=\"Please Add Column\"/>\r\n  }\r\n\r\n  const defaultSortSettings =  {};\r\n  settings.tables_columns.forEach(column => {\r\n    if(column.column_is_default_sorted && !defaultSortSettings.order_by){\r\n      defaultSortSettings.order_by = column.accessor;\r\n      defaultSortSettings.order = _.get(column, 'column_is_default_sorted_direction', 'ASC')\r\n    }\r\n  });\r\n  let groupBy = React.useMemo(\r\n      ()=> {\r\n        return _.get(settings, 'group_by_column_name') ? _.get(settings, 'group_by_column_name') : getGroupBy(settings.tables_columns)\r\n      }, [settings]\r\n      );\r\n  React.useEffect(()=>{\r\n    if(groupBy){\r\n      setSortSettings({\r\n        order: 'ASC',\r\n        order_by: groupBy,\r\n      })\r\n    }\r\n  }, [groupBy]);\r\n\r\n  let counter = query.getCounterStart(page);\r\n\r\n  const collapsing = React.useMemo(()=>settings.group_collapsing);\r\n  const collapsedInitiate = [];\r\n  const [collapsedGroups, setCollapsedGroups] = React.useState(collapsedInitiate);\r\n  const [updatedData, setUpdatedData] = useState({});\r\n  const [doubleClicked, setDoubleClicked] =  useState({});\r\n  const groupingStore = [];\r\n\r\n\r\n  let columns = [];\r\n  columns = settingsToColumns(settings);\r\n\r\n  /**\r\n   * обновление данных при изменении ячейки\r\n   * @type {any[]}\r\n   * @private\r\n   */\r\n  data = data.map((row)=>{\r\n    if(row.id === updatedData.rowId){\r\n      row[updatedData.column] = updatedData.value;\r\n      return{...row};\r\n    }\r\n    return row;\r\n  });\r\n  let {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n  } = useTable({\r\n    columns: React.useMemo(\r\n        () => (\r\n            columns || []\r\n        ),\r\n        [settings.tables_columns]\r\n    ),\r\n    data: React.useMemo(() => (data || []), [data]),\r\n  }, );\r\n  /**\r\n   * Обработка клика для сортировки\r\n   */\r\n  const sortingHandler = order_by => {\r\n    setSortSettings({\r\n    order_by,\r\n    order: sortSetting &&\r\n      (sortSetting.order_by === order_by) ? (sortSetting.order === \"DESC\" ? \"ASC\" :  \"DESC\") : \"ASC\"\r\n  });\r\n  };\r\n  /**\r\n   * Изменение поля для фильтрации\r\n   */\r\n  const filterHandler = (filteredColumn, searchString) => {\r\n    setPage(1);\r\n    const filterParams = {...filterSetting};\r\n    if(searchString){\r\n      filterParams[filteredColumn] = searchString;\r\n    } else {\r\n      delete filterParams[filteredColumn];\r\n    }\r\n    setFilterSettings(filterParams);\r\n  };\r\n\r\n  return <><table className={\"altrp-table altrp-table_columns-\" + columns.length} {...getTableProps()}>\r\n    <thead className=\"altrp-table-head\">\r\n    {renderAdditionalRows(settings)}\r\n    {headerGroups.map(headerGroup => (\r\n        <tr {...headerGroup.getHeaderGroupProps()} className=\"altrp-table-tr\">\r\n          {headerGroup.headers.map(column => {\r\n            return renderTh({column, sortSetting, sortingHandler, filterSetting, filterHandler});\r\n          }\r\n          )}\r\n        </tr>\r\n    ))}\r\n    </thead>\r\n    <tbody {...getTableBodyProps()} className={`altrp-table-tbody ${settings.table_style_table_striple_style ? ' altrp-table-tbody--striped' : ''}`}>\r\n    {_status === \"error\" ? <tr>\r\n        <td>{_error.message}</td>\r\n      </tr> : _status === \"loading\" ? <tr>\r\n        <td>Loading</td>\r\n      </tr>\r\n      : rows.map((row, i) => {\r\n          prepareRow(row);\r\n          let rowStyles = _.get(settings, 'field_name_for_row_styling');\r\n          rowStyles = _.get(row.original, rowStyles, '');\r\n          rowStyles = mbParseJSON(rowStyles, {});\r\n\r\n          return (<React.Fragment key={row.id}>\r\n                {renderGroupingTr(row, groupBy, groupingStore, settings, collapsing, setCollapsedGroups, collapsedGroups)}\r\n            <tr {...row.getRowProps()}\r\n                style={rowStyles}\r\n                className={`altrp-table-tr ${settings.table_hover_row ? 'altrp-table-background' : ''} ${\r\n                  /**\r\n                   * Проверка нужно ли скрыть эту строку\r\n                   */\r\n                    (collapsing && (collapsedGroups.indexOf(_.last(groupingStore)) !== -1)) ? 'altrp-d-none' : ''\r\n                    }`}>\r\n              {row.cells.map((cell, _i) => {\r\n                let cellContent = cell.render('Cell');\r\n                let linkTag = isEditor() ? 'a': Link;\r\n                if(columns[_i].column_external_link && ! isEditor()) {\r\n                  linkTag = 'a';\r\n                }\r\n\r\n                let style = cell.column.column_body_alignment ? { textAlign: cell.column.column_body_alignment } : {};\r\n                const cellProps = {...cell.getCellProps()};\r\n                let _cellContent = cell.value;\r\n\r\n                /**\r\n                 * Если в настройках колонки установлено редактирование и есть url запроса на редактирование\r\n                 * то добавляем особое поведение\r\n                 */\r\n                let doubleClickContent = '';\r\n                if(columns[_i].column_is_editable && columns[_i].column_edit_url){\r\n                  let columnEditUrl = parseURLTemplate(columns[_i].column_edit_url, row.original);\r\n\r\n                  doubleClickContent =\r\n                      <AutoUpdateInput className=\"altrp-inherit altrp-table-td__double-click-content\"\r\n                                       route={columnEditUrl}\r\n                                       resourceid={''}\r\n                                       changevalue={(value)=>{\r\n                                         setUpdatedData({\r\n                                           value,\r\n                                           rowId:row.original.id,\r\n                                           column:columns[_i]._accessor\r\n                                         });\r\n                                       }}\r\n                                       value={_cellContent}/>;\r\n                  cellProps.onDoubleClick = () => {\r\n                    if(doubleClicked.column === columns[_i]._accessor && doubleClicked.rowId === row.original.id){\r\n                      setDoubleClicked({});\r\n                    } else {\r\n                      setDoubleClicked({\r\n                        column: columns[_i]._accessor,\r\n                        rowId: row.original.id,\r\n                      });\r\n                    }\r\n                  };\r\n                }\r\n                let cellClassName = `altrp-table-td ${cell.column.column_body_alignment ? `altrp-table-td_alignment-${cell.column.column_body_alignment}` : '' } `;\r\n                if(doubleClicked.column === columns[_i]._accessor && row.original.id === doubleClicked.rowId){\r\n                  cellClassName += ' altrp-table-td_double-clicked';\r\n                }\r\n              /**\r\n               * Если в настройках table_hover_row: false, - background для отдельной ячейки\r\n               */\r\n                if (!settings.table_hover_row) {\r\n                  cellClassName += ' altrp-table-background';\r\n                }\r\n\r\n                /**\r\n                 * Если значение объект или массив, то отобразим пустую строку\r\n                 */\r\n                if(_.isObject(cell.value)){\r\n                  cellContent = '';\r\n                }\r\n                /**\r\n                 * Если в настройках колонки есть url, и в данных есть id, то делаем ссылку\r\n                 */\r\n                if(columns[_i].column_link){\r\n                  cellContent = React.createElement(linkTag, {\r\n                    to: parseURLTemplate(columns[_i].column_link, row.original),\r\n                    href: parseURLTemplate(columns[_i].column_link, row.original),\r\n                    target: columns[_i].column_blank_link ? '_blank' : '',\r\n                    className: 'altrp-inherit altrp-table-td__default-content',\r\n                    dangerouslySetInnerHTML: {\r\n                      __html: cell.value\r\n                    }\r\n                  })\r\n                } else {\r\n                  cellContent = React.createElement('span', {\r\n                    className: 'altrp-inherit altrp-table-td__default-content',\r\n                    dangerouslySetInnerHTML: {\r\n                       __html: cell.value\r\n                    }\r\n                  })\r\n                }\r\n                /**\r\n                 * Если нужно указать номер по порядку\r\n                 */\r\n                if(cell.column._accessor && (cell.column._accessor.trim() === '##')){\r\n                  cellContent = (counter++) + '';\r\n                }\r\n                let cellStyles = _.get(cell, 'column.column_styles_field');\r\n                cellStyles = _.get(row.original, cellStyles, '');\r\n                cellStyles = mbParseJSON(cellStyles, {});\r\n\r\n                style = _.assign(style, cellStyles);\r\n                /**\r\n                 * Если есть actions, то надо их вывести\r\n                 */\r\n                if(_.get(cell,'column.actions.length')){\r\n                  return <td {...cellProps}\r\n                             className={cellClassName}\r\n                             style={style}>{renderCellActions(cell, row)}</td>\r\n                }\r\n                if(_.isString(cellContent) && ! doubleClickContent){\r\n                  return <td {...cellProps}\r\n                             className={cellClassName}\r\n                             dangerouslySetInnerHTML={\r\n                               {__html:cellContent + ''}\r\n                             }\r\n                             style={style}>\r\n                  </td>\r\n                }\r\n                return <td {...cellProps}\r\n                           className={cellClassName}\r\n                           style={style}>\r\n                    {cellContent}{doubleClickContent}\r\n                  </td>\r\n              })}\r\n            </tr></React.Fragment>\r\n          )\r\n      })}\r\n    </tbody>\r\n    {renderFooter(settings, data)}\r\n  </table>\r\n    {((query.paginationType === 'prev-next') && query.pageSize) ?\r\n      <div className=\"altrp-pagination\">\r\n        <button className={\"altrp-pagination__previous\"}\r\n                onClick={() => {\r\n                  setPage(old => Math.max(old - 1, 0));\r\n                  setDoubleClicked({});\r\n                  setUpdatedData({});\r\n                }}\r\n                disabled={page === 1}>\r\n          {settings.prev_text || ''}\r\n        </button>\r\n        <div className=\"altrp-pagination__count\">\r\n          {settings.current_page_text || 'Current Page:'}\r\n           {page}\r\n        </div>\r\n        <button className=\"altrp-pagination__next\"\r\n                onClick={() => {\r\n                  setUpdatedData({});\r\n                  setDoubleClicked({});\r\n                  setPage(old => (!_latestData || !_latestData.hasMore ? old : old + 1))\r\n                }}\r\n                disabled={!_latestData || !_latestData.hasMore}>\r\n          {settings.next_text || ''}\r\n\r\n        </button>\r\n      </div> : ''\r\n    }\r\n  </>\r\n};\r\n\r\n/**\r\n * Парсинг колонок из настроек в колонки для react-table\r\n * @param settings\r\n * @return {Array}\r\n */\r\nexport function settingsToColumns(settings) {\r\n  let columns = [];\r\n  let { tables_columns } = settings;\r\n  tables_columns = tables_columns || [];\r\n  /**\r\n   * Если в колонке пустые поля, то мы их игнорируем, чтобы не было ошибки\r\n   */\r\n  tables_columns.forEach(_column => {\r\n    /**\r\n     * Колонку проказываем, если есть accessor или список actions\r\n     */\r\n    if (_column.column_name && ((_column.actions && _column.actions.length) || _column.accessor)) {\r\n      _column._accessor = _column.accessor;\r\n      columns.push(_column);\r\n    }\r\n  });\r\n  return columns;\r\n}\r\n\r\n/**\r\n *\r\n * @param {{}}settings\r\n * @return {string|array}\r\n */\r\nexport function renderAdditionalRows(settings) {\r\n  let { additional_rows } = settings;\r\n  if(! _.isArray(additional_rows)){\r\n    return '';\r\n  }\r\n  return additional_rows.map(row=>{\r\n    row.additional_cells = row.additional_cells || [];\r\n    return<tr key={`additional-row-${row.id}`}>\r\n      {row.additional_cells.map(cell=>{\r\n        cell.rowspan = cell.rowspan || 1;\r\n        cell.colspan = cell.colspan || 1;\r\n        return<th key={`additional-cell-${row.id}-${cell.id}`}\r\n                  role=\"columnheader\"\r\n                  className=\"altrp-table-th altrp-table-cell\"\r\n                  colSpan={cell.colspan}\r\n                  rowSpan={cell.rowspan}>{cell.title}</th>\r\n      })}\r\n    </tr>\r\n  })\r\n}\r\n\r\n/**\r\n * Отрисовка главного заголовка колонки для таблицы\r\n * @param {{}}column\r\n * @param {{}}sortSetting\r\n * @param {{}}filterSetting\r\n * @param {function}sortingHandler\r\n * @param {function}filterHandler\r\n * @return {*}\r\n */\r\nfunction renderTh({column, sortSetting, sortingHandler, filterSetting, filterHandler}){\r\n  const { column_width, column_header_alignment } = column;\r\n  let thProps = {...column.getHeaderProps()};\r\n  const style = {};\r\n  if (column_width) style.width = column_width;\r\n  if (column_header_alignment) style.textAlign = column_header_alignment;\r\n  thProps.className = 'altrp-table-th';\r\n  if(column.column_is_sorted){\r\n    thProps.onClick = () => sortingHandler(column._accessor);\r\n    thProps.className += ' clickable'\r\n  }\r\n  if(column.column_width){\r\n    thProps.width = column.column_width + '%';\r\n  }\r\n  let thText = column.render('column_name');\r\n  return <th {...thProps} style={style}>\r\n    {thText}\r\n    { sortSetting && column.column_is_sorted && (sortSetting.order_by === column._accessor)\r\n      && (sortSetting.order === \"DESC\" ?\r\n        iconsManager().renderIcon('chevron', {className:'rotate-180 sort-icon '}) :\r\n        iconsManager().renderIcon('chevron', {className: 'sort-icon'}))}\r\n    {column.column_is_filtered &&\r\n    <label className=\"altrp-label\">\r\n    <input type=\"text\"\r\n           onClick={e => {e.stopPropagation()}}\r\n           onChange={e=>{\r\n             e.stopPropagation();\r\n             let value = e.target.value;\r\n             filterHandler(column._accessor, value)\r\n           }}\r\n           value={filterSetting[column._accessor] || ''}\r\n           className=\"altrp-field\"/>\r\n    </label>}\r\n\r\n  </th>\r\n}\r\n\r\n/**\r\n * Получить поле для группировки строк\r\n * @param {array} columns - array({\r\n *  group_by:{boolean},\r\n *  accessor:{string},\r\n * })\r\n *\r\n * @return {string|null}\r\n */\r\nfunction getGroupBy(columns){\r\n  let groupBy = null;\r\n  columns.forEach(column=>{\r\n    if(column.group_by){\r\n      groupBy = column.accessor;\r\n    }\r\n  });\r\n  return groupBy;\r\n}\r\n\r\n/**\r\n * Выводит группирующую строку в таблице\r\n * @params {{}} row\r\n * @params {null|string} row\r\n * @params {array} groupingStore\r\n * @params {{}} settings\r\n * @params {boolean} collapsing\r\n * @params {function} setCollapsedGroups\r\n * @params {array} collapsedGroups\r\n * @return {string|React.Component}\r\n */\r\nfunction renderGroupingTr(row, groupBy, groupingStore, settings = {}, collapsing, setCollapsedGroups, collapsedGroups){\r\n  if(! groupBy){\r\n    return null;\r\n  }\r\n  let text = _.get(row, 'original.' + groupBy, '');\r\n  if(! text){\r\n    text = _.get(settings, 'group_default_text', '');\r\n  }\r\n  if(groupingStore.indexOf(text) >= 0){\r\n    return null;\r\n  }\r\n  groupingStore.push(text);\r\n  let collapsed = (collapsedGroups.indexOf(text) !== -1);\r\n  let {collapsed_icon, expanded_icon} = settings;\r\n  /**\r\n   * С сервера может приходить массив если иконка удалена\r\n   */\r\n  if(_.isArray(collapsed_icon)){\r\n    collapsed_icon = null;\r\n  }\r\n  if(_.isArray(expanded_icon)){\r\n    expanded_icon = null;\r\n  }\r\n  return text ? <tr className=\"altrp-table-tr\" >\r\n    <td colSpan={_.get(row, 'cells.length', 1)}\r\n        onClick={()=>{\r\n          collapsing && toggleGroup(text, setCollapsedGroups, collapsedGroups)\r\n        }}\r\n        className={`altrp-table-td__grouping altrp-table-td altrp-table-background ${collapsing\r\n            ? (collapsed ? 'altrp-pointer' : 'altrp-pointer active') : ''} `}>\r\n      {collapsing ? (<span className={`altrp-table__collapse-icon ${collapsed ? 'altrp-table__collapse-icon_collapsed' : ''}`}>{\r\n            collapsed ? renderAsset(collapsed_icon || {\r\n                  assetType: \"icon\",\r\n                  name: \"add\",\r\n                })\r\n                : renderAsset(expanded_icon || {\r\n                  assetType: \"icon\",\r\n                  name: \"minus\",\r\n                })\r\n        }</span>\r\n      ) : null}\r\n      {text}\r\n    </td>\r\n  </tr> : null;\r\n}\r\n\r\n/**\r\n * Сохраняет/удаляет текущаю группу по заголовку из с списка схлопнутых групп в таблице\r\n * @param {string} currentRowHeading\r\n * @param {function} setCollapsedGroups - функция задает новый список collapsedGroups\r\n * @param {array} collapsedGroups - список заголовков, которые схлопнуты\r\n */\r\nfunction toggleGroup(currentRowHeading, setCollapsedGroups, collapsedGroups) {\r\n\r\n  if(collapsedGroups.indexOf(currentRowHeading) === -1){\r\n    collapsedGroups.push(currentRowHeading);\r\n    setCollapsedGroups([...collapsedGroups]);\r\n  } else {\r\n    collapsedGroups = _.filter(collapsedGroups, g=>{\r\n      return g !== currentRowHeading;\r\n    });\r\n    setCollapsedGroups(collapsedGroups);\r\n  }\r\n}\r\n\r\n/**\r\n * Отрисовка футера таблицы\r\n * @param {{}}settings\r\n * @param {array}data\r\n */\r\n\r\nfunction renderFooter(settings, data){\r\n  let footerColumns = settings.footer_columns || [];\r\n  if(footerColumns.length === 0){\r\n    return null;\r\n  }\r\n  return <tfoot className=\"altrp-table-foot\">\r\n  <tr className=\"altrp-table-tr\">\r\n    {footerColumns.map(footerColumn=>{\r\n      const style = {\r\n        textAlign: footerColumn.column_footer_alignment || 'left'\r\n      };\r\n      let content = footerColumn.content;\r\n      if(content.indexOf('{{altrphelpers.') !== -1){\r\n        window.altrphelpers.context = data;\r\n        content = content.replace(/{{/g, '').replace(/}}/g, '');\r\n        try{\r\n          content = eval(content);\r\n        } catch(e){\r\n          console.log(content);\r\n          console.error(e);\r\n          content = '';\r\n        }\r\n      } else {\r\n        content = replaceContentWithData(content);\r\n      }\r\n      return <td className=\"altrp-table-td\"\r\n                 key={footerColumn.id}\r\n                 style={style}\r\n                 colSpan={footerColumn.colspan || 1}>{content}</td>\r\n    })}\r\n  </tr>\r\n  </tfoot>\r\n}\r\n\r\n\r\n/**\r\n * Выводит список элементов соответствующих настройкам Actions для колнки\r\n * @param cell\r\n * @param row\r\n */\r\nexport function renderCellActions(cell, row = {}) {\r\n  let actions = _.get(cell,'column.actions', []);\r\n  return <div className=\"altrp-actions\">\r\n    {actions.map(action =>{\r\n      let tag = action.type || 'Link';\r\n      let actionContent = replaceContentWithData(action.text || '');\r\n      let link = parseURLTemplate(action.link, row.original);\r\n      const actionProps = {\r\n        className: 'altrp-actions-item altrp-link ' + (action.classes || ''),\r\n        style: {},\r\n        key: (action.id || '') + (row.id || ''),\r\n        title: action.text || '',\r\n      };\r\n      actionProps.style.marginLeft = _.get(action, 'spacing.left')\r\n          ? _.get(action, 'spacing.left') + _.get(action, 'spacing.unit')\r\n          : null;\r\n      actionProps.style.marginRight = _.get(action, 'spacing.right')\r\n          ? _.get(action, 'spacing.right') + _.get(action, 'spacing.unit')\r\n          : null;\r\n      actionProps.style.marginTop = _.get(action, 'spacing.top')\r\n          ? _.get(action, 'spacing.top') + _.get(action, 'spacing.unit')\r\n          : null;\r\n      actionProps.style.marginBottom = _.get(action, 'spacing.bottom')\r\n          ? _.get(action, 'spacing.bottom') + _.get(action, 'spacing.unit')\r\n          : null;\r\n      if(tag === 'Link'){\r\n        tag = Link;\r\n        actionProps.to = link;\r\n      }\r\n\r\n      if(tag === 'a' && action.target_blank){\r\n        actionProps.target = '_blank';\r\n      }\r\n      if(tag === 'a') {\r\n        actionProps.href = parseURLTemplate(action.link, row.original);\r\n      }\r\n      if(_.get(action, 'icon.assetType')){\r\n        let iconSize = _.get(action, 'size.size') ? _.get(action, 'size.size') + _.get(action, 'size.unit', 'px') : null;\r\n        const iconProps = {className: 'altrp-actions-item__icon',\r\n          style:{\r\n          }};\r\n\r\n        if(iconSize){\r\n          iconProps.style.width = iconSize;\r\n          iconProps.style.height = iconSize;\r\n        }\r\n        actionContent = renderAsset(action.icon, iconProps)\r\n      }\r\n      return React.createElement(tag, actionProps, actionContent);\r\n    })}\r\n  </div>\r\n}\r\n\r\n\r\nexport default (props) => {\r\n  return <AltrpQueryComponent {...props}><AltrpTable/></AltrpQueryComponent>\r\n}\r\n","import styled from 'styled-components';\r\nconst {getResponsiveSetting} = window.altrpHelpers;\r\n\r\nconst TableComponent = styled.div`${({settings, rows})=>{\r\n  if(! getResponsiveSetting(settings, 'table_transpose')){\r\n    return'';\r\n  }\r\n  const table_style_main_width = getResponsiveSetting(settings, 'table_style_main_width');\r\n  const table_style_other_width = getResponsiveSetting(settings, 'table_style_other_width');\r\n  if(_.get(table_style_main_width, 'unit') !== '%'\r\n    && _.get(table_style_other_width, 'unit') !== '%'){\r\n    return'';\r\n  }\r\n  let styles = '';\r\n  styles += `grid-template-columns:${_.get(table_style_main_width, 'size')}${_.get(table_style_main_width, 'unit') || 'px'}`;\r\n  for(let row of rows){\r\n    styles += ` ${_.get(table_style_other_width, 'size')}${_.get(table_style_other_width, 'unit') || 'px'}`;\r\n  }\r\n   styles += ';&&&{width:100%;}';\r\n  return styles\r\n}}`;\r\n\r\n\r\nexport default TableComponent;\r\n","import styled from 'styled-components';\r\nimport {getResponsiveSetting} from \"../../../../../../front-app/src/js/helpers\";\r\nimport {verticalAlignToAlignItems} from \"../../../../../../front-app/src/js/helpers/styles\";\r\n\r\nconst HeaderCellComponent = styled.div`${({settings, column})=>{\r\n  const {\r\n    table_transpose,\r\n  } = settings;\r\n  if(! table_transpose){\r\n    return ''\r\n  }\r\n  const {\r\n    column_cell_vertical_alignment,\r\n    header_full_width,\r\n    header_bg} = column;\r\n\r\n  const table_style_main_width = getResponsiveSetting(settings, 'table_style_main_width');\r\n  const table_style_other_width = getResponsiveSetting(settings, 'table_style_other_width');\r\n  let styles = '&.altrp-table-th.altrp-table-cell{';\r\n\r\n  let verticalAlign = getResponsiveSetting(settings, 'cell_vertical_alignment');\r\n  verticalAlign = verticalAlignToAlignItems(verticalAlign);\r\n  if (column_cell_vertical_alignment) {\r\n    verticalAlign = verticalAlignToAlignItems(column_cell_vertical_alignment);\r\n  }\r\n  if (verticalAlign) {\r\n    styles += `\r\n    display: flex;\r\n    align-items: ${verticalAlign};\r\n    > span{\r\n      display: block;\r\n      width: 100%;\r\n    }\r\n    `\r\n  }\r\n  if(header_bg){\r\n    styles += `background-color:${header_bg.color};`;\r\n  }\r\n  if(header_full_width){\r\n    styles += `\r\n      grid-column-start: 1;\r\n      grid-column-end: ${column.filteredRows.length + 2};\r\n      width: calc(${_.get(table_style_main_width, 'size') + (_.get(table_style_main_width, 'unit') || 'px')} + (${_.get(table_style_other_width, 'size') + (_.get(table_style_other_width, 'unit') || 'px')}) * ${column.filteredRows.length})\r\n    `;\r\n  } else {\r\n  }\r\n\r\n  if(_.get(table_style_main_width, 'unit') !== '%') {\r\n    styles += `\r\n      width: ${_.get(table_style_main_width, 'size') + (_.get(table_style_main_width, 'unit') || 'px')}\r\n    `;\r\n  }\r\n\r\n  styles += `}`;\r\n  return styles;\r\n}}`;\r\n\r\nexport default HeaderCellComponent;\r\n","import styled from 'styled-components';\r\nimport {getResponsiveSetting} from \"../../../../../../front-app/src/js/helpers\";\r\nimport {verticalAlignToAlignItems} from \"../../../../../../front-app/src/js/helpers/styles\";\r\n\r\nconst CellComponent = styled.div`${({settings, column})=>{\r\n  const {\r\n    table_transpose,\r\n  } = settings;\r\n  if(! table_transpose){\r\n    return ''\r\n  }\r\n  const {\r\n    column_cell_vertical_alignment,\r\n    body_bg,\r\n    header_full_width} = column;\r\n  const table_style_other_width = getResponsiveSetting(settings, 'table_style_other_width');\r\n  let verticalAlign = getResponsiveSetting(settings, 'cell_vertical_alignment');\r\n  verticalAlign = verticalAlignToAlignItems(verticalAlign);\r\n  if(column_cell_vertical_alignment){\r\n    verticalAlign = verticalAlignToAlignItems(column_cell_vertical_alignment);\r\n  }\r\n  let styles = '&.altrp-table-td.altrp-table-cell{';\r\n  if(verticalAlign){\r\n    styles += `\r\n    display: flex;\r\n    align-items: ${verticalAlign};\r\n    .altrp-table-td__default-content{\r\n      display: block;\r\n      width: 100%;\r\n    }\r\n    `\r\n  }\r\n  if(header_full_width){\r\n    return `&.altrp-table-td{display:none;}`\r\n  }\r\n  if(body_bg){\r\n    styles +=`background-color:${body_bg.color};`;\r\n  }\r\n  if(_.get(table_style_other_width, 'unit') !== '%'){\r\n    styles += `\r\n    width: ${_.get(table_style_other_width, 'size') + (_.get(table_style_other_width, 'unit') || 'px')};\r\n  `;\r\n  }\r\n  styles += `}`;\r\n  return styles;\r\n}}`;\r\n\r\nexport default CellComponent;\r\n","import {mbParseJSON, recurseCount, renderIcon} from \"../../../../../../front-app/src/js/helpers\";\r\nimport CellComponent from './CellComponent';\r\n/**\r\n * Ячейка\r\n * @return {*}\r\n * @constructor\r\n */\r\nconst Cell = ({ cell, settings }) => {\r\n  const { row, column } = cell;\r\n  const {\r\n    resize_columns,\r\n    replace_rows,\r\n    virtualized_rows,\r\n    hide_expanded_row_icon,\r\n    expanded_row_icon,\r\n    hide_not_expanded_row_icon,\r\n    not_expanded_row_icon\r\n  } = settings;\r\n  let cellContent = cell.render('Cell');\r\n  if (cell.column.id === '##') {\r\n    cellContent = cell.row.index + 1;\r\n  }\r\n  if (cell.isGrouped) {\r\n    cellContent = (\r\n        <>\r\n          <span {...row.getToggleRowExpandedProps()}>\r\n          {row.isExpanded ?\r\n              renderIcon(hide_expanded_row_icon, expanded_row_icon, '👇', 'expanded-row') :\r\n              renderIcon(hide_not_expanded_row_icon, not_expanded_row_icon, '👉', 'not-expanded-row')}\r\n        </span>{' '}\r\n               {cell.render('Cell')} ({recurseCount(row, 'subRows')})\r\n        </>\r\n    );\r\n  } else if (cell.isAggregated) {\r\n    cellContent = cell.render('Aggregated');\r\n  } else if (cell.isPlaceholder) {\r\n    cellContent = cell.render('Cell');\r\n  }\r\n  const cellClassNames = ['altrp-table-td', 'altrp-table-cell'];\r\n  cell.isAggregated && cellClassNames.push('altrp-table-td_aggregated');\r\n  cell.isPlaceholder && cellClassNames.push('altrp-table-td_placeholder');\r\n  cell.isGrouped && cellClassNames.push('altrp-table-td_grouped');\r\n\r\n  let cellProps = React.useMemo(() => {\r\n    let cellProps = cell.getCellProps();\r\n    if (!resize_columns && !virtualized_rows) {\r\n      delete cellProps.style;\r\n    }\r\n    if (_.get(cell, 'column.column_styles_field')) {\r\n\r\n      let cellStyles = _.get(cell, 'column.column_styles_field');\r\n      cellStyles = _.get(row.original, cellStyles, '');\r\n      cellStyles = mbParseJSON(cellStyles, {});\r\n      cellProps.style = _.assign({...cellStyles}, cellProps.style);\r\n    }\r\n    // if(replace_rows){\r\n    //   cellProps.ref = dropRef;\r\n    // }\r\n\r\n    return cellProps;\r\n  }, [resize_columns,\r\n    replace_rows,\r\n    virtualized_rows,\r\n    cell.getCellProps().style.width,\r\n    _.get(cell, 'column.column_styles_field')]);\r\n\r\n  /**\r\n   * Если в настройках table_hover_row: false, - background для отдельной ячейки\r\n   */\r\n  if (!settings.table_hover_row) {\r\n    cellClassNames.join('altrp-table-background');\r\n  }\r\n  // if (!column.column_body_alignment) {\r\n  //   cellClassNames.join( `altrp-table-td_alignment-${column.column_body_alignment}`);\r\n  // }\r\n  let style = {};\r\n\r\n  if (cell.column.column_body_alignment) {\r\n    style.textAlign = cell.column.column_body_alignment;\r\n  }\r\n\r\n  if (cell.column.body_bg) {\r\n    style.backgroundColor = cell.column.body_bg.color;\r\n  }\r\n  style = _.assign(style, cellProps.style || {});\r\n  if (cell.column.column_cell_vertical_alignment && cell.column.column_cell_vertical_alignment !== 'inherit') {\r\n    style.verticalAlign = cell.column.column_cell_vertical_alignment;\r\n  }\r\n\r\n  return <CellComponent {...cellProps}\r\n                        settings={settings}\r\n                        column={column}\r\n                        style={style}\r\n                        className={cellClassNames.join(' ')}>{cellContent}</CellComponent>\r\n};\r\n\r\nexport default Cell;","import { useDrag, useDrop } from 'react-dnd'\r\nimport AltrpModel from \"../../../classes/AltrpModel\";\r\nimport ElementWrapper from \"../../../../../../front-app/src/js/components/ElementWrapper\";\r\nimport {mbParseJSON, recurseCount, renderIcon} from \"../../../../../../front-app/src/js/helpers\";\r\nimport frontElementsFabric from \"../../../../../../front-app/src/js/classes/FrontElementsFabric\";\r\nimport Cell from './Cell';\r\n\r\nconst DND_ITEM_TYPE = 'row';\r\n\r\n/**\r\n * Компонент строки\r\n * @param {{}} row\r\n * @param {number} index\r\n * @param {function} moveRow\r\n * @param {{}} settings\r\n * @param {{}} style\r\n * @param {{}} cardTemplate\r\n * @param {[]} visibleColumns\r\n * @return {*}\r\n * @constructor\r\n */\r\nconst Row = ({ row,\r\n               index,\r\n               moveRow,\r\n               style,\r\n               visibleColumns,\r\n               cardTemplate,\r\n               settings }) => {\r\n  const dropRef = React.useRef(null);\r\n  const dragRef = React.useRef(null);\r\n  const fragmentProps = { ...row.getRowProps() };\r\n  delete fragmentProps.role;\r\n  delete fragmentProps.style;\r\n  let ExpandCard = null;\r\n  const {\r\n    resize_columns,\r\n    replace_rows,\r\n    row_expand,\r\n    virtualized_rows,\r\n    card_template,\r\n    replace_text,\r\n    replace_image,\r\n    replace_width,\r\n  } = settings;\r\n  if (cardTemplate) {\r\n    let template = frontElementsFabric.cloneElement(cardTemplate);\r\n    template.setCardModel(new AltrpModel(row.original || {}));\r\n    ExpandCard = React.createElement(template.componentClass,\r\n        {\r\n          element: template,\r\n          ElementWrapper: ElementWrapper,\r\n          children: template.children\r\n        });\r\n  }\r\n\r\n  let rowProps = React.useMemo(() => {\r\n    let rowProps = row.getRowProps();\r\n    if ((!resize_columns) && !virtualized_rows) {\r\n      delete rowProps.style;\r\n      style = {};\r\n    }\r\n    if (replace_rows) {\r\n      rowProps.ref = dropRef;\r\n    }\r\n    return rowProps;\r\n  }, [resize_columns, replace_rows, virtualized_rows]);\r\n  const [, drop] = useDrop({\r\n    accept: DND_ITEM_TYPE,\r\n    hover(item, monitor) {\r\n      if (!dropRef.current) {\r\n        return\r\n      }\r\n      const dragIndex = item.index;\r\n      const hoverIndex = index;\r\n      // Don't replace items with themselves\r\n      if (dragIndex === hoverIndex) {\r\n        return\r\n      }\r\n      // Determine rectangle on screen\r\n      const hoverBoundingRect = dropRef.current.getBoundingClientRect();\r\n      // Get vertical middle\r\n      const hoverMiddleY =\r\n          (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\r\n      // Determine mouse position\r\n      const clientOffset = monitor.getClientOffset();\r\n      // Get pixels to the top\r\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top;\r\n      // Only perform the move when the mouse has crossed half of the items height\r\n      // When dragging downwards, only move when the cursor is below 50%\r\n      // When dragging upwards, only move when the cursor is above 50%\r\n      // Dragging downwards\r\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\r\n        return\r\n      }\r\n      // Dragging upwards\r\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\r\n        return\r\n      }\r\n      // Time to actually perform the action\r\n      moveRow(dragIndex, hoverIndex);\r\n      // Note: we're mutating the monitor item here!\r\n      // Generally it's better to avoid mutations,\r\n      // but it's good here for the sake of performance\r\n      // to avoid expensive index searches.\r\n      item.index = hoverIndex\r\n    },\r\n  });\r\n\r\n  const [{ isDragging }, drag, preview] = useDrag({\r\n    item: {  index },\r\n    type: DND_ITEM_TYPE,\r\n    collect: monitor => ({\r\n      isDragging: monitor.isDragging(),\r\n    }),\r\n  });\r\n\r\n  const opacity = isDragging ? 0 : 1;\r\n\r\n  preview(drop(dropRef));\r\n  drag(dragRef);\r\n\r\n  // return (\r\n  //     <tr ref={dropRef} style={{ opacity }}>\r\n  //       <td ref={dragRef}>move</td>\r\n  //       {row.cells.map(cell => {\r\n  //         return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n  //       })}\r\n  //     </tr>\r\n  // );\r\n  const rowStyles = React.useMemo(() => {\r\n    if (! resize_columns && ! virtualized_rows) {\r\n      return {};\r\n    }\r\n    return style;\r\n  }, [resize_columns, virtualized_rows, row.getRowProps().style.width]);\r\n  return (\r\n      <React.Fragment {...fragmentProps}>\r\n\r\n        <div {...rowProps} className={`altrp-table-tr ${isDragging ? 'altrp-table-tr__dragging' : ''}`} style={{ ...rowStyles, opacity }}>\r\n          {replace_rows && <div className=\"altrp-table-td replace-text\" ref={dragRef} style={{ width: replace_width }}>\r\n            {replace_text}\r\n            {replace_image && replace_image.url && <img src={replace_image.url} className=\"replace-picture\" />}\r\n          </div>}\r\n\r\n          {row.cells.map((cell, idx) => {\r\n            return <Cell cell={cell} key={idx} settings={settings} />;\r\n            let cellContent = cell.render('Cell');\r\n            if (cell.column.id === '##') {\r\n              cellContent = cell.row.index + 1;\r\n            }\r\n            const { column } = cell;\r\n            if (cell.isGrouped) {\r\n              cellContent = (\r\n                  <>\r\n                    <span {...row.getToggleRowExpandedProps()}>\r\n                  {row.isExpanded ?\r\n                      renderIcon(hide_expanded_row_icon, expanded_row_icon, '👇', 'expanded-row') :\r\n                      renderIcon(hide_not_expanded_row_icon, not_expanded_row_icon, '👉', 'not-expanded-row')}\r\n                </span>{' '}\r\n                       {cell.render('Cell')} ({recurseCount(row, 'subRows')})\r\n                  </>\r\n              );\r\n            } else if (cell.isAggregated) {\r\n              cellContent = cell.render('Aggregated');\r\n            } else if (cell.isPlaceholder) {\r\n              cellContent = cell.render('Cell');\r\n            }\r\n            const cellClassNames = ['altrp-table-td'];\r\n            cell.isAggregated && cellClassNames.push('altrp-table-td_aggregated');\r\n            cell.isPlaceholder && cellClassNames.push('altrp-table-td_placeholder');\r\n            cell.isGrouped && cellClassNames.push('altrp-table-td_grouped');\r\n\r\n            let cellProps = React.useMemo(() => {\r\n              let cellProps = cell.getCellProps();\r\n              if (!resize_columns && !virtualized_rows) {\r\n                delete cellProps.style;\r\n              }\r\n              if (_.get(cell, 'column.column_styles_field')) {\r\n\r\n                let cellStyles = _.get(cell, 'column.column_styles_field');\r\n                cellStyles = _.get(row.original, cellStyles, '');\r\n                cellStyles = mbParseJSON(cellStyles, {});\r\n                cellProps.style = _.assign({...cellStyles}, cellProps.style);\r\n              }\r\n              if (replace_rows) {\r\n                cellProps.ref = dropRef;\r\n              }\r\n\r\n              return cellProps;\r\n            }, [resize_columns, replace_rows, virtualized_rows,\r\n              cell.getCellProps().style.width,\r\n              _.get(cell, 'column.column_styles_field')]);\r\n\r\n            /**\r\n             * Если в настройках table_hover_row: false, - background для отдельной ячейки\r\n             */\r\n            if (!settings.table_hover_row) {\r\n              cellClassNames.join('altrp-table-background');\r\n            }\r\n            if (!column.column_body_alignment) {\r\n              cellClassNames.join(`altrp-table-td_alignment-${column.column_body_alignment}`);\r\n            }\r\n            return <div {...cellProps} className={cellClassNames.join(' ')}>{cellContent}</div>\r\n          })}\r\n        </div>\r\n        {row.isExpanded && row_expand && card_template && cardTemplate &&\r\n        <div className=\"altrp-table-tr altrp-posts\">\r\n          <td colSpan={visibleColumns.length + replace_rows} className=\"altrp-table-td altrp-post\">{ExpandCard}</td>\r\n        </div>\r\n        }\r\n      </React.Fragment>);\r\n};\r\n\r\nexport default Row;\r\n","import styled from 'styled-components';\r\nimport {getResponsiveSetting} from \"../../../../../../front-app/src/js/helpers\";\r\nimport {\r\n  dimensionsControllerToStyles,\r\n  typographicControllerToStyles\r\n} from \"../../../../../../front-app/src/js/helpers/styles\";\r\nconst SubheadingRow = styled.div`\r\n${\r\n  (props)=>{\r\n    const {settings, groupIndex} = props;\r\n    const groupsStylesSettings = getResponsiveSetting(settings, 'tables_groups');\r\n    const groupsSettings = getResponsiveSetting(settings, 'tables_settings_for_subheading');\r\n    const {transition} = _.get(groupsSettings, groupIndex - 1, {});\r\n    if(! _.isArray(groupsStylesSettings) || ! groupIndex){\r\n      return '';\r\n    }\r\n    let styles;\r\n    if(groupIndex > groupsStylesSettings.length){\r\n      styles = groupsStylesSettings[groupsStylesSettings.length - 1];\r\n    } else {\r\n      styles = groupsStylesSettings[groupIndex - 1];\r\n    }\r\n    if(! styles){\r\n      return '';\r\n    }\r\n    if(! _.isObject(styles)){\r\n      return '';\r\n    }\r\n    const {\r\n      cell_alignment, \r\n      padding,\r\n      color,\r\n      bg_color,\r\n      typographic,\r\n    } = styles;\r\n    let stringStyles =  `&.altrp-table-tr .altrp-table-td{`;\r\n    if(transition?.size){\r\n      stringStyles += `transition-duration: ${transition.size}s;`;\r\n    }\r\n    if(_.isObject(padding)){\r\n      stringStyles += dimensionsControllerToStyles(padding)\r\n    }\r\n    if(_.isObject(typographic)){\r\n      stringStyles += typographicControllerToStyles(typographic)\r\n    }\r\n    if(cell_alignment){\r\n      stringStyles += `text-align: ${cell_alignment};`;\r\n    }\r\n    if(color?.color){\r\n      stringStyles += `color: ${color.color};`;\r\n    }\r\n    if(bg_color?.color){\r\n      stringStyles += `background-color: ${bg_color.color};`;\r\n    }\r\n    \r\n    stringStyles += `}&.altrp-table-tr .altrp-table-td:hover{`;\r\n    \r\n    const cell_alignment_hover = styles['cell_alignment_:hover_'];\r\n    const padding_hover = styles['padding_:hover_'];\r\n    const color_hover = styles['color_:hover_'];\r\n    const bg_color_hover = styles['bg_color_:hover_'];\r\n    const typographic_hover = styles['typographic_:hover_'];\r\n\r\n    if(_.isObject(padding_hover)){\r\n      stringStyles += dimensionsControllerToStyles(padding_hover)\r\n    }\r\n    if(_.isObject(typographic_hover)){\r\n      stringStyles += typographicControllerToStyles(typographic_hover)\r\n    }\r\n    if(cell_alignment_hover){\r\n      stringStyles += `text-align: ${cell_alignment_hover};`;\r\n    }\r\n    if(color_hover?.color){\r\n      stringStyles += `color: ${color_hover.color};`;\r\n    }\r\n    if(bg_color_hover?.color){\r\n      stringStyles += `background-color: ${bg_color_hover.color};`;\r\n    }\r\n    stringStyles += `}`;\r\n    return stringStyles;\r\n  }\r\n}`;\r\n\r\nexport default SubheadingRow","import React from \"react\";\r\nimport {FixedSizeList} from \"react-window\";\r\nimport {scrollbarWidth} from \"../../../../../../front-app/src/js/helpers\";\r\nimport Row from './Row';\r\nimport SubheadingRow from \"./SubheadingRow\";\r\n\r\nconst TableBodyContent =\r\n    (props) => {\r\n      const {\r\n        prepareRow,\r\n        rows,\r\n        visibleColumns,\r\n        totalColumnsWidth,\r\n        moveRow,\r\n        settings,\r\n        cardTemplate,\r\n        groupIndex,\r\n        page,\r\n      } = props;\r\n      const scrollBarSize = React.useMemo(() => scrollbarWidth(), []);\r\n      const {\r\n        virtualized_rows,\r\n        virtualized_height,\r\n        item_size,\r\n        tables_settings_for_subheading,\r\n        table_style_table_striple_style: isStriped\r\n      } = settings;\r\n      const RenderRow = React.useCallback(\r\n          ({index, style}) => {\r\n            const row = page ? page[index] : rows[index];\r\n            prepareRow(row);\r\n            return <Row\r\n                index={index}\r\n                row={row}\r\n                visibleColumns={visibleColumns}\r\n                moveRow={moveRow}\r\n                settings={settings}\r\n                cardTemplate={cardTemplate}\r\n                {...row.getRowProps({style})}\r\n            />;\r\n\r\n          }, [page,\r\n            rows,\r\n            visibleColumns,\r\n            settings,\r\n            cardTemplate,\r\n            moveRow,\r\n            prepareRow,]);\r\n      const itemCount = React.useMemo(() => page ? page.length : rows.length, [page, rows]);\r\n      const groups = React.useMemo(() => {\r\n        if (_.isEmpty(tables_settings_for_subheading)) {\r\n          return null;\r\n        }\r\n        let columnName = tables_settings_for_subheading[groupIndex]?.name;\r\n        if (! columnName) {\r\n          return null;\r\n        }\r\n\r\n        let leftValue, rightValue;\r\n        if(columnName.indexOf('?') !== -1 && columnName.indexOf(':') !== -1){\r\n          [leftValue, rightValue] = columnName.split('?')[1].split(':');\r\n          leftValue = leftValue.trim();\r\n          rightValue = rightValue.trim();\r\n          cell.value = cell.value ? leftValue : rightValue;\r\n          columnName = columnName.split('?')[0].trim();\r\n        }\r\n\r\n        let _rows = page ? page : rows;\r\n        const groups = [];\r\n        _rows.forEach(row => {\r\n          let currentGroup = groups.find(group => {\r\n            return group.columnValue === row.original[columnName];\r\n          });\r\n          let columnValue;\r\n          if(leftValue || rightValue){\r\n            columnValue = row.original[columnName] ? leftValue : rightValue;\r\n          } else {\r\n            columnValue = row.original[columnName];\r\n          }\r\n          if (! currentGroup) {\r\n            currentGroup = {\r\n              columnValue,\r\n              rows: [],\r\n            };\r\n            groups.push(currentGroup);\r\n          }\r\n          currentGroup.rows.push(row);\r\n        });\r\n        return groups;\r\n      }, [tables_settings_for_subheading, page, rows]);\r\n      if (! _.isEmpty(groups)) {\r\n        return groups.map((group, idx) => {\r\n          const _props = {...props};\r\n          _props.page = group.rows;\r\n          _props.rows = group.rows;\r\n          _props.groupIndex = groupIndex + 1;\r\n          _props.key = group.columnValue + idx;\r\n          return <React.Fragment key={_props.key}>\r\n            <SubheadingRow className=\"altrp-table-tr altrp-table-tr_group-subheading\"\r\n                           groupIndex={_props.groupIndex}\r\n                           settings={settings}>\r\n              <td colSpan={visibleColumns.length || 1}\r\n                  className=\"altrp-table-td\"\r\n                  dangerouslySetInnerHTML={{__html: group.columnValue === 0 ? '0' : (group.columnValue || '&nbsp;')}}/>\r\n            </SubheadingRow>\r\n            <TableBodyContent {..._props}/>\r\n          </React.Fragment>\r\n        })\r\n\r\n      }\r\n      if (virtualized_rows) {\r\n        return <React.Fragment>\r\n          <FixedSizeList height={Number(virtualized_height) || 0}\r\n                         itemCount={itemCount}\r\n                         itemSize={Number(item_size) || 0}\r\n                         width={totalColumnsWidth + scrollBarSize}\r\n          >\r\n            {RenderRow}\r\n          </FixedSizeList>\r\n        </React.Fragment>\r\n      }\r\n      return <React.Fragment>\r\n        {(page ? page : rows).map((row, i) => {\r\n          prepareRow(row);\r\n          return <Row\r\n              index={i}\r\n              row={row}\r\n              visibleColumns={visibleColumns}\r\n              moveRow={moveRow}\r\n              settings={settings}\r\n              cardTemplate={cardTemplate}\r\n              {...row.getRowProps()}\r\n          />;\r\n        })}\r\n\r\n      </React.Fragment>\r\n    };\r\n\r\nexport default TableBodyContent;\r\n\r\n","import TableBodyContent from \"./TableBodyContent\";\r\nimport React from \"react\";\r\n\r\nconst TableBody =\r\n    (props) => {\r\n      const {\r\n        tables_settings_for_subheading,\r\n        table_style_table_striple_style: isStriped,\r\n\r\n      } = props.settings;\r\n      const contentProps = {...props};\r\n      contentProps.rows = React.useMemo(() => {\r\n        if (_.isEmpty(tables_settings_for_subheading)) {\r\n          return props.rows;\r\n        }\r\n        const sortedColumns = [];\r\n        const sortedDirections = [];\r\n        tables_settings_for_subheading.forEach(item=>{\r\n          if(item.name){\r\n            sortedColumns.push(item.name);\r\n            sortedDirections.push(item.order || 'asc')\r\n          }\r\n        });\r\n      }, [tables_settings_for_subheading]);\r\n      contentProps.groupIndex = 0;\r\n\r\n      return <div {...props.getTableBodyProps()}\r\n                  className={`altrp-table-tbody ${isStriped ? \"altrp-table-tbody--striped\" : \"\"}`}>\r\n        <TableBodyContent {...contentProps}/>\r\n      </div>\r\n    };\r\n\r\nexport default TableBody;","import ('../altrp-posts/altrp-posts.scss');\r\nimport update from 'immutability-helper'\r\nimport ('../../../sass/altrp-pagination.scss');\r\nimport {\r\n  setDataByPath,\r\n  storeWidgetState,\r\n  isEditor, parseURLTemplate,\r\n  renderAssetIcon,\r\n  renderIcon, setAltrpIndex, getResponsiveSetting\r\n} from \"../../../../../front-app/src/js/helpers\";\r\nimport { renderAdditionalRows, renderCellActions, } from \"./altrp-table\";\r\nimport {\r\n  useSortBy,\r\n  useTable,\r\n  usePagination,\r\n  useFilters,\r\n  useGroupBy,\r\n  useGlobalFilter,\r\n  useExpanded,\r\n  useRowSelect,\r\n  useResizeColumns,\r\n  useBlockLayout,\r\n  useAsyncDebounce,\r\n} from \"react-table\";\r\nimport AltrpQueryComponent from \"../altrp-query-component/altrp-query-component\";\r\nimport AltrpSelect from \"../../../../../admin/src/components/altrp-select/AltrpSelect\";\r\nimport { iconsManager } from \"../../../../../admin/src/js/helpers\";\r\nimport { matchSorter } from 'match-sorter'\r\nimport React from \"react\";\r\nimport templateLoader from \"../../classes/modules/TemplateLoader\";\r\nimport frontElementsFabric from \"../../../../../front-app/src/js/classes/FrontElementsFabric\";\r\nimport AltrpModel from \"../../classes/AltrpModel\";\r\nimport ElementWrapper from \"../../../../../front-app/src/js/components/ElementWrapper\";\r\nimport AutoUpdateInput from \"../../../../../admin/src/components/AutoUpdateInput\";\r\nimport TableComponent from \"./components/TableComponent\";\r\nimport HeaderCellComponent from \"./components/HeaderCellComponent\";\r\nimport TableBody from './components/TableBody';\r\nimport Pagination from \"./components/Pagination\";\r\nconst Link = window.Link;\r\n\r\n\r\n/**\r\n *\r\n * @param rows\r\n * @param ids\r\n * @param filterValue\r\n * @return {*}\r\n */\r\nfunction includesSome(rows, ids, filterValue) {\r\n  return rows.filter(function (row) {\r\n    return ids.some(function (id) {\r\n      let rowValue = row.values[id];\r\n      return filterValue.some(function (val) {\r\n        if (!(val || rowValue)) {\r\n          return true;\r\n        }\r\n        if (!_.isString(rowValue)) {\r\n          rowValue += '';\r\n        }\r\n        return rowValue.includes(val);\r\n      });\r\n    });\r\n  });\r\n}\r\n\r\nincludesSome.autoRemove = function (val) {\r\n  return !val || !val.length;\r\n};\r\n\r\n/**\r\n * Фильтрация нечеткого текста\r\n * @param rows\r\n * @param id\r\n * @param filterValue\r\n * @return {*}\r\n */\r\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\r\n  id = id ? id[0] : undefined;\r\n  return matchSorter(rows, filterValue, {\r\n    keys: [row => {\r\n      let rowValue = row.values[id];\r\n      if (id === '##') {\r\n        rowValue = row.index + 1;\r\n      }\r\n      return rowValue\r\n    }]\r\n  })\r\n}\r\nfuzzyTextFilterFn.autoRemove = val => ! val;\r\n/**\r\n * Фильтрация на точное соответствие\r\n * @param rows\r\n * @param id\r\n * @param filterValue\r\n * @return {*}\r\n */\r\nfunction fullMatchTextFilterFn(rows, id, filterValue) {\r\n  id = id ? id[0] : undefined;\r\n  return rows.filter(row => _.get(row, `values.${id}`) === filterValue);\r\n}\r\nfullMatchTextFilterFn.autoRemove = val => ! val;\r\n/**\r\n * Фильтрация на нахождение в тексте\r\n * @param rows\r\n * @param id\r\n * @param filterValue\r\n * @return {*}\r\n */\r\nfunction partialMatchTextFilterFn(rows, id, filterValue) {\r\n  id = id ? id[0] : undefined;\r\n  return rows.filter(row => {\r\n    filterValue = filterValue.replace(/\\s/g, '');\r\n    let value = _.get(row, `values.${id}`, '').replace(/\\s/g, '');\r\n    return value.indexOf(filterValue) !== -1\r\n  });\r\n}\r\npartialMatchTextFilterFn.autoRemove = val => ! val;\r\n/**\r\n * Компонент, который работает только с внешними данными, которые не обновляются с сервера\r\n * @param {{}} settings\r\n * @param {string} widgetId\r\n * @param {Query} query\r\n * @param {{}} data\r\n * @param {AltrpModel} currentModel\r\n * @param {string} _status\r\n * @param {{}} _error\r\n * @param {function} setSortSettings\r\n * @param {function} setFilterSettings\r\n * @param {function} setPage\r\n * @param {{}} filterSetting\r\n * @param {{}} sortSetting\r\n * @param {[]} _latestData\r\n * @param {{}} widgetState\r\n * @return {*}\r\n * @constructor\r\n */\r\nfunction AltrpTableWithoutUpdate(\r\n  {\r\n    settings,\r\n    currentScreen,\r\n    widgetId,\r\n    query,\r\n    data,\r\n    currentModel,\r\n    _status,\r\n    _error,\r\n    setSortSettings,\r\n    setFilterSettings,\r\n    filterSetting,\r\n    _latestData,\r\n    widgetState,\r\n    sortSetting\r\n  }) {\r\n\r\n  const stateRef = React.useRef(widgetState);\r\n  const { inner_page_size,\r\n    global_filter,\r\n    card_template,\r\n    row_expand,\r\n    selected_storage,\r\n    row_select,\r\n    row_select_width,\r\n    store_state,\r\n    loading_text,\r\n    row_select_all,\r\n    hide_columns,\r\n    resize_columns,\r\n    table_transpose,\r\n    virtualized_rows,\r\n    replace_rows,\r\n    tables_settings_for_subheading,\r\n    replace_width,\r\n    ids_storage,\r\n    hide_grouped_column_icon,\r\n    grouped_column_icon,\r\n    hide_not_grouped_column_icon,\r\n    not_grouped_column_icon,\r\n    checkbox_checked_icon: checkedIcon = {},\r\n    checkbox_unchecked_icon: uncheckedIcon = {},\r\n    checkbox_indeterminate_icon: indeterminateIcon = {} } = settings;\r\n  const [cardTemplate, setCardTemplate] = React.useState(null);\r\n  /**\r\n   * Для перетаскивания\r\n   */\r\n  const [records, setRecords] = React.useState(data);\r\n  React.useEffect(() => {\r\n    setRecords(data);\r\n  }, [data]);\r\n  const moveRow = (dragIndex, hoverIndex) => {\r\n    const dragRecord = records[dragIndex];\r\n    setRecords(\r\n      update(records, {\r\n        $splice: [\r\n          [dragIndex, 1],\r\n          [hoverIndex, 0, dragRecord],\r\n        ],\r\n      })\r\n    )\r\n  };\r\n\r\n  const filterTypes = React.useMemo(\r\n    () => ({\r\n      // Add a new fuzzyTextFilterFn filter type.\r\n      fuzzyText: fuzzyTextFilterFn,\r\n      fullMatchText: fullMatchTextFilterFn,\r\n      partialMatchText: partialMatchTextFilterFn,\r\n      // Or, override the default text filter to use\r\n      // \"startWith\"\r\n      text: (rows, id, filterValue) => {\r\n        id = id ? id[0] : undefined;\r\n        return rows.filter(row => {\r\n          let rowValue = row.values[id];\r\n          if (id === '##') {\r\n            rowValue = row.index + 1;\r\n          }\r\n          return rowValue !== undefined\r\n            ? String(rowValue)\r\n              .toLowerCase()\r\n              .startsWith(String(filterValue).toLowerCase())\r\n            : true\r\n        })\r\n      },\r\n      between: (rows, ids, filterValue) => {\r\n        let _ref = filterValue || [],\r\n          min = _ref[0],\r\n          max = _ref[1];\r\n        min = typeof min === 'number' ? min : -Infinity;\r\n        max = typeof max === 'number' ? max : Infinity;\r\n\r\n        if (min > max) {\r\n          let temp = min;\r\n          min = max;\r\n          max = temp;\r\n        }\r\n\r\n        return rows.filter(function (row) {\r\n          return ids.some(function (id) {\r\n            let rowValue = row.values[id];\r\n            if (id === '##') {\r\n              rowValue = row.index + 1;\r\n            }\r\n            return rowValue >= min && rowValue <= max;\r\n          });\r\n        });\r\n      },\r\n      equals: (rows, ids, filterValue) => {\r\n        return rows.filter(function (row) {\r\n          return ids.some(function (id) {\r\n            let rowValue = row.values[id];\r\n            if (id === '##') {\r\n              rowValue = row.index + 1;\r\n            }\r\n            return rowValue == filterValue;\r\n          });\r\n        });\r\n      },\r\n      includesSome: includesSome,\r\n    }),\r\n    []\r\n  );\r\n  const defaultColumn = React.useMemo(\r\n    () => ({\r\n      Filter: DefaultColumnFilter,\r\n      width: 150,\r\n      Cell: DefaultCell,\r\n    }),\r\n    []\r\n  );\r\n  React.useEffect(() => {\r\n    if (!data) {\r\n      data = [];\r\n      return;\r\n    }\r\n    if (!_.isArray(data)) {\r\n      data = [data];\r\n    }\r\n  }, [data]);\r\n  let columns = React.useMemo(() => settingsToColumns(settings, widgetId), [settings, widgetId]);\r\n  /**\r\n   * Сохраним шаблон для выпадашки\r\n   */\r\n  React.useEffect(() => {\r\n    if (card_template && row_expand) {\r\n      (async () => {\r\n        const template = await templateLoader.loadParsedTemplate(card_template);\r\n        setCardTemplate(template);\r\n      })()\r\n    }\r\n  }, [row_expand, card_template]);\r\n  const plugins = [useFilters,\r\n    useGlobalFilter,\r\n    useGroupBy,\r\n    useSortBy,\r\n    useExpanded,\r\n    usePagination,\r\n    useRowSelect,\r\n    useResizeColumns,\r\n    useBlockLayout,\r\n  ];\r\n  /**\r\n   * Добавим кастомный хук для выбора строк\r\n   */\r\n  if (row_select) {\r\n    plugins.push(hooks => {\r\n      hooks.visibleColumns.push(columns => [\r\n        // Let's make a column for selection\r\n        {\r\n          id: 'selection',\r\n          column_width: row_select_width || 0,\r\n          // The header can use the table's getToggleAllRowsSelectedProps method\r\n          // to render a checkbox\r\n          column_name: ({ getToggleAllRowsSelectedProps, getToggleAllPageRowsSelectedProps }) => {\r\n            if ((!settings.inner_page_size) || (settings.inner_page_size < 0) || row_select_all) {\r\n              return (\r\n                <div className=\"altrp-toggle-row\">\r\n                  <IndeterminateCheckbox {...getToggleAllRowsSelectedProps()} icons={{ checkedIcon, uncheckedIcon, indeterminateIcon }} />\r\n                </div>\r\n              );\r\n            }\r\n            return (\r\n              <div className=\"altrp-toggle-row\">\r\n                <IndeterminateCheckbox {...getToggleAllPageRowsSelectedProps()} icons={{ checkedIcon, uncheckedIcon, indeterminateIcon }} />\r\n              </div>\r\n            );\r\n          },\r\n          // The cell can use the individual row's getToggleRowSelectedProps method\r\n          // to the render a checkbox\r\n          Cell: ({ row }) => (\r\n            <div className=\"altrp-toggle-row\">\r\n              <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} icons={{ checkedIcon, uncheckedIcon, indeterminateIcon }} />\r\n            </div>\r\n          ),\r\n        },\r\n        ...columns,\r\n      ]);\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Редактирование данных\r\n   */\r\n  const [skipPageReset, setSkipPageReset] = React.useState(false);\r\n\r\n  // We need to keep the table from resetting the pageIndex when we\r\n  // Update data. So we can keep track of that flag with a ref.\r\n\r\n  // When our cell renderer calls updateData, we'll use\r\n  // the rowIndex, columnId and new value to update the\r\n  // original data\r\n  const updateData = (rowIndex, columnId, value) => {\r\n    // We also turn on the flag to not reset the page\r\n    setSkipPageReset(true);\r\n    setRecords(old =>\r\n      old.map((row, index) => {\r\n        if (index === rowIndex) {\r\n          return {\r\n            ...old[rowIndex],\r\n            [columnId]: value,\r\n          }\r\n        }\r\n        return row\r\n      })\r\n    )\r\n  };\r\n  const getRowId = React.useCallback(row => {\r\n    return row.id\r\n  }, []);\r\n  /**\r\n   * настройки таблицы, свызов хука таблицы\r\n   * @type {*|{columns: (*|Array), data: {}, filterTypes: (*|{fuzzyText: (function(*=, *, *=): (*|Array)), text: (function(*, *, *=): *), between: (function(*, *, *=): *), equals: (function(*, *, *=): *), includesSome: (function(*, *, *=): *)}), defaultColumn: (*|{Filter: (function({column: *}, {}): *)})}}\r\n   */\r\n  const tableSettings = React.useMemo(() => {\r\n    const tableSettings = {\r\n      columns,\r\n      // data: replace_rows ? records : data,\r\n      data: records,\r\n      filterTypes,\r\n      autoResetPage: !skipPageReset,\r\n      defaultColumn,\r\n      updateData,\r\n    };\r\n    if (replace_rows) {\r\n      tableSettings.getRowId = getRowId;\r\n    }\r\n    // if(_.isObject(stateRef.current)){\r\n    //   tableSettings.initialState = stateRef.current;\r\n    // } else\r\n    if (isEditor()) {\r\n\r\n      if ((inner_page_size >= 1)) {\r\n        tableSettings.initialState = {\r\n          pageSize: Number(inner_page_size),\r\n        };\r\n      } else {\r\n        tableSettings.initialState = {\r\n          pageSize: data.length,\r\n        };\r\n      }\r\n    }\r\n    if(! _.isArray(tableSettings.data)){\r\n      if(_.isObject(tableSettings.data)){\r\n        tableSettings.data = [tableSettings.data];\r\n      } else {\r\n        tableSettings.data = [];\r\n      }\r\n    }\r\n    if(! _.isEmpty(tables_settings_for_subheading)){\r\n      let sortBy = tables_settings_for_subheading.map(item => {\r\n        return{\r\n          id: item.name,\r\n          desc: item.order === 'DESC',\r\n        };\r\n      });\r\n      _.set(tableSettings, 'initialState.sortBy', sortBy);\r\n    }\r\n    return tableSettings;\r\n  }, [\r\n      inner_page_size,\r\n      data,\r\n      columns,\r\n      stateRef,\r\n      records,\r\n      replace_rows,\r\n      skipPageReset,\r\n      tables_settings_for_subheading,\r\n  ]);\r\n  React.useEffect(() => {\r\n\r\n    if (_.isObject(stateRef.current)) {\r\n      tableSettings.initialState = stateRef.current;\r\n    }\r\n  }, [stateRef, data]);\r\n  const ReactTable = useTable(\r\n    tableSettings,\r\n    ...plugins\r\n  );\r\n\r\n  /**\r\n   * END настройки таблицы, свызов хука таблицы\r\n   */\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    prepareRow,\r\n    page, // Instead of using 'rows', we'll use page,\r\n    // which has only the rows for the active page\r\n\r\n    // The rest of these things are super handy, too ;)\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    getToggleHideAllColumnsProps,\r\n    allColumns,\r\n    // getRowId,\r\n    rows,\r\n    visibleColumns,\r\n    preGlobalFilteredRows,\r\n    setGlobalFilter,\r\n    setPageSize,\r\n    selectedFlatRows,\r\n    totalColumnsWidth,\r\n    state: reactTableState,\r\n  } = ReactTable;\r\n  const {\r\n    pageIndex,\r\n    globalFilter,\r\n    groupBy,\r\n    selectedRowIds,\r\n    expanded,\r\n    pageSize } = reactTableState;\r\n\r\n  React.useEffect(() => {\r\n    if (store_state) {\r\n      storeWidgetState(widgetId, reactTableState);\r\n    }\r\n  });\r\n\r\n  React.useEffect(\r\n    () => {\r\n      if (!setPageSize) {\r\n        return\r\n      }\r\n      if ((!Number(inner_page_size) || Number(inner_page_size < 1))) {\r\n        setPageSize(data.length || 10);\r\n      }\r\n      setPageSize(Number(inner_page_size) || data.length || 10);\r\n    },\r\n    [inner_page_size, data],\r\n  );\r\n  function flatRows(rows = [], field = '') {\r\n    let _rows = [];\r\n    if (_.isEmpty(rows)) {\r\n      return _rows;\r\n    }\r\n    rows.forEach(r => {\r\n      r.original && (field ? _rows.push(_.get(r.original, field)) : _rows.push(r.original));\r\n      r.subRows && (_rows = _.concat(_rows, flatRows(r.subRows)));\r\n    });\r\n    return _rows;\r\n  }\r\n  const originalSelectedRows = React.useMemo(() => flatRows(selectedFlatRows), [selectedFlatRows]);\r\n  const selectedIds = React.useMemo(() => flatRows(selectedFlatRows, 'id'), [selectedFlatRows]);\r\n  React.useEffect(() => {\r\n    if (selected_storage &&\r\n        ! _.isEqual(altrpHelpers.getDataByPath(selected_storage), originalSelectedRows) &&\r\n        ! isEditor()) {\r\n      setDataByPath(selected_storage, originalSelectedRows);\r\n    }\r\n  }, [selectedFlatRows]);\r\n  React.useEffect(() => {\r\n    if (ids_storage &&\r\n        ! _.isEqual(altrpHelpers.getDataByPath(ids_storage), selectedIds) &&\r\n        ! isEditor()) {\r\n      setDataByPath(ids_storage, selectedIds);\r\n    }\r\n  }, [selectedFlatRows]);\r\n\r\n  /**\r\n   * Настройки пагинации\r\n   */\r\n  const paginationProps =\r\n    React.useMemo(() => {\r\n      let paginationProps = null;\r\n      if (inner_page_size && (inner_page_size >= 1)) {\r\n        paginationProps = {\r\n          settings,\r\n          nextPage,\r\n          previousPage,\r\n          pageIndex,\r\n          pageCount,\r\n          pageSize,\r\n          setPageSize,\r\n          widgetId,\r\n          gotoPage,\r\n        };\r\n      }\r\n      return paginationProps;\r\n    }, [inner_page_size, pageSize, pageCount, pageIndex, settings]);\r\n\r\n  let tableElement = React.useRef(null);\r\n\r\n\r\n  return  <React.Fragment>\r\n    {hide_columns && <div className=\"altrp-table-hidden\">\r\n      <div className=\"altrp-table-hidden__all\">\r\n        <IndeterminateCheckbox {...getToggleHideAllColumnsProps()} /> Toggle\r\n        All\r\n      </div>\r\n      {allColumns.map(column => {\r\n        if (['expander', 'selection'].indexOf(column.id) >= 0) {\r\n          return null;\r\n        }\r\n        return (\r\n          <div key={column.id} className=\"altrp-table-hidden__column\">\r\n            <label>\r\n              <input type=\"checkbox\" {...column.getToggleHiddenProps()} />{' '}\r\n              {column.column_name || column.id}\r\n              {column.id}\r\n            </label>\r\n          </div>\r\n        )\r\n      })}\r\n      <br />\r\n    </div>}\r\n    <TableComponent className={\"altrp-table altrp-table_columns-\" + columns.length}\r\n                    ReactTable={ReactTable}\r\n                    currentScreen={currentScreen}\r\n                    settings={settings}\r\n                    table={tableElement}\r\n                    rows={rows}\r\n                    ref={tableElement}\r\n                    {...getTableProps()}>\r\n      <div className=\"altrp-table-head\">\r\n        {renderAdditionalRows(settings)}\r\n        {headerGroups.map(headerGroup => {\r\n          const headerGroupProps = headerGroup.getHeaderGroupProps();\r\n\r\n          if (!resize_columns && !virtualized_rows) {\r\n            delete headerGroupProps.style;\r\n          }\r\n          return (\r\n            <div {...headerGroupProps} className=\"altrp-table-tr\">\r\n              {replace_rows && <div className=\"altrp-table-th altrp-table-cell\" style={{ width: replace_width }} />}\r\n              {headerGroup.headers.map((column, idx) => {\r\n                const { column_width, column_header_alignment, header_bg } = column;\r\n\r\n                let columnProps = column.getHeaderProps(column.getSortByToggleProps());\r\n                    columnProps.settings = settings;\r\n                const resizerProps = {\r\n                  ...column.getResizerProps(),\r\n                  onClick: e => { e.stopPropagation(); }\r\n                };\r\n                if (!resize_columns && !virtualized_rows) {\r\n                  // delete columnProps.style;\r\n                  columnProps.style = {};\r\n                  if (column_width) columnProps.style.width = column_width + '%';\r\n                  if (column_header_alignment) columnProps.style.textAlign = column_header_alignment;\r\n                  if (header_bg) columnProps.style.backgroundColor = header_bg.color;\r\n                }\r\n                let columnNameContent = column.render('column_name');\r\n                if (_.isString(columnNameContent)) {\r\n                  columnNameContent = <span dangerouslySetInnerHTML={{ __html: column.render('column_name') || '&nbsp;' }} />;\r\n                }\r\n\r\n                if(table_transpose){\r\n                  _.unset(columnProps, 'style.width')\r\n                }\r\n                return <HeaderCellComponent {...columnProps}\r\n                                            column={column}\r\n                  className=\"altrp-table-th altrp-table-cell\"\r\n                  key={idx}>\r\n                  {columnNameContent}\r\n                  {column.canGroupBy ? (\r\n                    // If the column can be grouped, let's add a toggle\r\n                    <span {...column.getGroupByToggleProps()} className=\"altrp-table-th__group-toggle\">\r\n                      {column.isGrouped ?\r\n                        renderIcon(hide_not_grouped_column_icon, not_grouped_column_icon, ' 🛑 ', 'not-grouped-column') :\r\n                        renderIcon(hide_grouped_column_icon, grouped_column_icon, ' 👊 ', 'grouped-column')}\r\n                    </span>\r\n                  ) : null}\r\n                  {\r\n                    (column.isSorted\r\n                      ? column.isSortedDesc\r\n                        ? iconsManager().renderIcon('chevron', { className: 'rotate-180 sort-icon ' })\r\n                        : iconsManager().renderIcon('chevron', { className: 'sort-icon' })\r\n                      : '')\r\n                  }\r\n                  {\r\n                    column.column_is_filtered &&\r\n                    <label className={`altrp-label altrp-label_${column.column_filter_type}`} onClick={e => { e.stopPropagation() }}>\r\n                      {column.render('Filter')}\r\n                    </label>\r\n                  }\r\n                  {\r\n                    resize_columns && <div\r\n                      {...resizerProps}\r\n                      className={`altrp-table__resizer ${column.isResizing ? 'altrp-table__resizer_resizing' : ''\r\n                        }`}\r\n                    />\r\n                  }\r\n                </HeaderCellComponent>;\r\n              }\r\n              )}\r\n            </div>)\r\n        }\r\n        )}\r\n        {global_filter && <div className=\"altrp-table-tr\">\r\n          <th className=\"altrp-table-th altrp-table-th_global-filter altrp-table-cell\"\r\n            role=\"cell\"\r\n            colSpan={visibleColumns.length + replace_rows}\r\n            style={{\r\n              textAlign: 'left',\r\n            }}\r\n          >\r\n            <GlobalFilter\r\n              widgetId={widgetId}\r\n              preGlobalFilteredRows={preGlobalFilteredRows}\r\n              globalFilter={globalFilter}\r\n              setGlobalFilter={setGlobalFilter}\r\n              settings={settings}\r\n            />\r\n          </th>\r\n        </div>\r\n        }\r\n      </div>\r\n      {_status === 'success' ?\r\n\r\n        <TableBody {...{\r\n          getTableBodyProps,\r\n          prepareRow,\r\n          totalColumnsWidth,\r\n          rows,\r\n          visibleColumns,\r\n          moveRow,\r\n          settings,\r\n          page,\r\n          cardTemplate,\r\n        }}\r\n        /> :\r\n        <div><div className=\"altrp-table-tr altrp-table-tr_loading\"><div className=\"altrp-table-td altrp-table-td_loading\" colSpan={visibleColumns.length + replace_rows}>\r\n          {(_status === 'loading' ? (loading_text || null) : null)}\r\n        </div></div></div>}\r\n    </TableComponent>\r\n    {paginationProps && <Pagination {...paginationProps} />}\r\n  </React.Fragment>\r\n}\r\n\r\n\r\n/**\r\n * Define a default UI for filtering\r\n * @param filterValue\r\n * @param preFilteredRows\r\n * @param setFilter\r\n * @param {string} filter_placeholder\r\n * @param {string} column_filter_type\r\n * @param {boolean} column_is_filtered\r\n * @param {{}}settings\r\n * @return {*}\r\n * @constructor\r\n */\r\n\r\nfunction DefaultColumnFilter({\r\n  column: { filterValue,\r\n    preFilteredRows,\r\n    setFilter,\r\n    filter_placeholder,\r\n    column_filter_type,\r\n    column_is_filtered,\r\n  },\r\n}, settings) {\r\n  const count = preFilteredRows.length;\r\n  filter_placeholder = filter_placeholder ? filter_placeholder.replace('{{count}}', count) : `Search ${count} records...`;\r\n  return (\r\n    <input\r\n      value={filterValue || ''}\r\n      className=\"altrp-field\"\r\n      onChange={e => {\r\n        setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\r\n      }}\r\n      placeholder={filter_placeholder}\r\n    />\r\n  )\r\n}\r\n/**\r\n * Селект для фильтрации по значениям в колонке\r\n * @param filterValue\r\n * @param setFilter\r\n * @param preFilteredRows\r\n * @param id\r\n * @param widgetId\r\n * @param filter_placeholder\r\n * @return {*}\r\n * @constructor\r\n */\r\nfunction SelectColumnFilter({\r\n  column: { filterValue, setFilter, preFilteredRows, id, filter_placeholder },\r\n  widgetId\r\n}) {\r\n  const options = React.useMemo(() => {\r\n    let _options = new Set();\r\n    preFilteredRows.forEach(row => {\r\n      _options.add(row.values[id])\r\n    });\r\n    return [..._options.values()].map(option => ({\r\n      value: option,\r\n      label: option + '',\r\n    }));\r\n  }, [id, preFilteredRows]);\r\n\r\n  // Render a multi-select box\r\n  return (<AltrpSelect options={options}\r\n    isMulti={true}\r\n    placeholder={filter_placeholder || 'Select some...'}\r\n    className=\"altrp-table__filter-select\"\r\n    classNamePrefix={widgetId + ' altrp-field-select2'}\r\n    onChange={v => {\r\n      if (!_.isArray(v)) {\r\n        v = [];\r\n      }\r\n      let filterValue = v.map(option => option.value);\r\n      setFilter(filterValue);\r\n    }} />\r\n  );\r\n}\r\n\r\n/**\r\n * This is a custom filter UI that uses a\r\n * slider to set the filter value between a column's\r\n * min and max values\r\n * @param filterValue\r\n * @param setFilter\r\n * @param preFilteredRows\r\n * @param filter_button_text\r\n * @param id\r\n * @return {*}\r\n * @constructor\r\n */\r\nfunction SliderColumnFilter({\r\n  column: { filterValue, setFilter, preFilteredRows, id, filter_button_text },\r\n}) {\r\n  const [min, max] = React.useMemo(() => {\r\n    let value = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\r\n    if (id === '##' && preFilteredRows.length) {\r\n      value = preFilteredRows[0].index;\r\n    }\r\n    let min = value;\r\n    let max = value;\r\n    preFilteredRows.forEach(row => {\r\n      let value = row.values[id];\r\n      if (id === '##') {\r\n        value = row.index;\r\n      }\r\n      min = Math.min(value, min);\r\n      max = Math.max(value, max);\r\n    });\r\n    return [min, max]\r\n  }, [id, preFilteredRows]);\r\n  const buttonText = filter_button_text || 'Off';\r\n  return (\r\n    <>\r\n      <input\r\n        type=\"range\"\r\n        className=\"altrp-field\"\r\n        min={min}\r\n        max={max}\r\n        value={filterValue || min}\r\n        onChange={e => {\r\n          setFilter(parseInt(e.target.value, 10))\r\n        }}\r\n      />\r\n      <button className={`altrp-btn ${(filterValue !== undefined) ? 'active' : ''}`} onClick={() => setFilter(undefined)}>{buttonText}</button>\r\n    </>\r\n  )\r\n}\r\n/**\r\n * This is a custom UI for our 'between' or number range\r\n * filter. It uses two number boxes and filters rows to\r\n * ones that have values between the two\r\n * @param filterValue\r\n * @param preFilteredRows\r\n * @param setFilter\r\n * @param filter_max_placeholder\r\n * @param filter_min_placeholder\r\n * @param id\r\n * @return {*}\r\n * @constructor\r\n */\r\nfunction NumberRangeColumnFilter({\r\n  column: { filterValue = [],\r\n    preFilteredRows,\r\n    setFilter,\r\n    filter_max_placeholder,\r\n    filter_min_placeholder,\r\n    id },\r\n}) {\r\n  const [min, max] = React.useMemo(() => {\r\n    let value = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\r\n    if (id === '##' && preFilteredRows.length) {\r\n      value = preFilteredRows[0].index;\r\n    }\r\n    let min = value;\r\n    let max = value;\r\n    preFilteredRows.forEach(row => {\r\n      let value = row.values[id];\r\n      if (id === '##') {\r\n        value = row.index;\r\n      }\r\n      min = Math.min(value, min);\r\n      max = Math.max(value, max);\r\n    });\r\n    return [min, max]\r\n  }, [id, preFilteredRows]);\r\n  let minPlaceHolder = filter_min_placeholder || `Min (${min})`;\r\n  let maxPlaceHolder = filter_max_placeholder || `Max (${max})`;\r\n  return (\r\n    <div className=\"altrp-filter-group\"\r\n      style={{\r\n        display: 'flex',\r\n      }}\r\n    >\r\n      <input\r\n        value={filterValue[0] || ''}\r\n        type=\"number\"\r\n        className=\"altrp-field\"\r\n        onChange={e => {\r\n          const val = e.target.value;\r\n          setFilter((old = []) => [val ? parseInt(val, 10) : undefined, old[1]])\r\n        }}\r\n        placeholder={minPlaceHolder}\r\n        style={{\r\n          width: '70px',\r\n          marginRight: '0.5rem',\r\n        }}\r\n      />\r\n        to\r\n      <input\r\n        value={filterValue[1] || ''}\r\n        type=\"number\"\r\n        className=\"altrp-field\"\r\n        onChange={e => {\r\n          const val = e.target.value;\r\n          setFilter((old = []) => [old[0], val ? parseInt(val, 10) : undefined])\r\n        }}\r\n        placeholder={maxPlaceHolder}\r\n        style={{\r\n          width: '70px',\r\n          marginLeft: '0.5rem',\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\n/**\r\n * Парсинг колонок из настроек в колонки для react-table\r\n * @param settings\r\n * @param widgetId\r\n * @return {Array}\r\n */\r\nexport function settingsToColumns(settings, widgetId) {\r\n  let columns = [];\r\n  let {\r\n    tables_columns,\r\n    card_template,\r\n    row_expand,\r\n    virtualized_rows,\r\n    resize_columns,\r\n    hide_expanded_row_icon,\r\n    expanded_row_icon,\r\n    hide_not_expanded_row_icon,\r\n    edit_disabled,\r\n    not_expanded_row_icon\r\n  } = settings;\r\n  tables_columns = tables_columns || [];\r\n  let columnOrder = (getResponsiveSetting(settings, 'columns_order') || '').trim();\r\n  columnOrder = columnOrder ? columnOrder.split(',') : [];\r\n  /**\r\n   * Если в колонке пустые поля, то мы их игнорируем, чтобы не было ошибки\r\n   */\r\n  tables_columns.forEach(_column => {\r\n    /**\r\n     * Колонку проказываем, если есть accessor или список actions\r\n     */\r\n    if (((_column.actions && _column.actions.length) || _column.accessor)) {\r\n      _column.edit_disabled = edit_disabled;\r\n      _column._accessor = _column.accessor;\r\n      if(_column.accessor && _column.accessor.indexOf('?') !== -1 && _column.accessor.indexOf(':') !== -1) {\r\n        _column.accessor = _column.accessor.split('?')[0].trim();\r\n      }\r\n      _column.column_name = _column.column_name || '&nbsp;';\r\n      if (_column.column_is_filtered) {\r\n\r\n        _column.filter = 'fuzzyText';\r\n        switch (_column.column_filter_type) {\r\n          case 'min_max': {\r\n            _column.filter = 'between';\r\n            _column.Filter = NumberRangeColumnFilter;\r\n          }\r\n            break;\r\n          case 'slider': {\r\n            _column.filter = 'equals';\r\n            _column.Filter = SliderColumnFilter;\r\n          }\r\n            break;\r\n          case 'select': {\r\n            _column.filter = 'includesSome';\r\n            _column.Filter = ({ column }) => <SelectColumnFilter column={column} widgetId={widgetId} />;\r\n          }\r\n            break;\r\n          case 'text': {\r\n            switch(_column.column_text_filter_type){\r\n              case 'full_match': {\r\n                _column.filter = 'fullMatchText';\r\n              }\r\n              break;\r\n              case 'partial_match': {\r\n                _column.filter = 'partialMatchText';\r\n              }\r\n              break;\r\n            }\r\n          }\r\n            break;\r\n        }\r\n      }\r\n      _column.canGroupBy = ! !_column.group_by;\r\n      _column.disableSortBy = !_column.column_is_sorted;\r\n      if (_column.aggregate) {\r\n        let aggregateTemplate = _column.aggregate_template || `{{value}} Unique Names`;\r\n        _column.Aggregated = ({ value }) => {\r\n          return aggregateTemplate.replace(/{{value}}/g, value)\r\n        };\r\n      }\r\n      if (virtualized_rows || resize_columns) {\r\n        // _column.width = (Number(_column.column_width) || 150) + '%';\r\n        _column.width = (Number(_column.column_width) || 150);\r\n      }\r\n      columns.push(_column);\r\n    }\r\n  });\r\n  if (settings.row_expand) {\r\n    columns.unshift({\r\n      id: 'expander', // Make sure it has an ID\r\n      column_name: ({ getToggleAllRowsExpandedProps, isAllRowsExpanded }) => (\r\n        <span {...getToggleAllRowsExpandedProps()} className=\"altrp-table__all-row-expander\">\r\n          {isAllRowsExpanded ?\r\n            renderIcon(hide_expanded_row_icon, expanded_row_icon, '👇', 'expanded-row') :\r\n            renderIcon(hide_not_expanded_row_icon, not_expanded_row_icon, '👉', 'not-expanded-row')}\r\n        </span>\r\n      ),\r\n      Cell: ({ row }) =>\r\n        // Use the row.canExpand and row.getToggleRowExpandedProps prop getter\r\n        // to build the toggle for expanding a row\r\n        (card_template && row_expand || row.canExpand) ? (\r\n          <span className=\"altrp-table__row-expander\"\r\n            {...row.getToggleRowExpandedProps({\r\n              style: {\r\n                // We can even use the row.depth property\r\n                // and paddingLeft to indicate the depth\r\n                // of the row\r\n                paddingLeft: `${row.depth * 2}rem`,\r\n              },\r\n            })}\r\n          >\r\n            {row.isExpanded ?\r\n              renderIcon(hide_expanded_row_icon, expanded_row_icon, '👇', 'expanded-row') :\r\n              renderIcon(hide_not_expanded_row_icon, not_expanded_row_icon, '👉', 'not-expanded-row')}\r\n          </span>\r\n        ) : null,\r\n    });\r\n  }\r\n  if(columnOrder.length){\r\n    const _column = [];\r\n    columnOrder.forEach(columnIndex=>{\r\n      columnIndex = parseInt(columnIndex) - 1;\r\n      columns[columnIndex] && (_column.indexOf(columns[columnIndex]) === -1) ? _column.push(columns[columnIndex]) : null;\r\n    });\r\n    columns = _column;\r\n  }\r\n  return columns;\r\n}\r\n\r\n/**\r\n * Отрисовка чекбокса\r\n * @type {*|React.ForwardRefExoticComponent<React.PropsWithoutRef<{indeterminate: *, rest: *}> & React.RefAttributes<any>>}\r\n */\r\nconst IndeterminateCheckbox = React.forwardRef(\r\n  ({ indeterminate, icons, ...rest }, ref) => {\r\n    const defaultRef = React.useRef();\r\n    const resolvedRef = ref || defaultRef;\r\n    React.useEffect(() => {\r\n      resolvedRef.current.indeterminate = indeterminate\r\n    }, [resolvedRef, indeterminate]);\r\n    const icon = icons.checkedIcon.name ?\r\n      rest.checked ?\r\n        icons.checkedIcon :\r\n        indeterminate ? icons.indeterminateIcon : icons.uncheckedIcon :\r\n      null;\r\n    return (\r\n      <label className={\"check-icon--\" + (rest.checked ? \"checked\" : indeterminate ? \"indeterminate\" : \"unchecked\")}>\r\n        {icon && renderAssetIcon(icon)}\r\n        <input type=\"checkbox\" ref={resolvedRef} {...rest} className={icon ? \"hidden\" : \"\"} />\r\n      </label>\r\n    )\r\n  }\r\n);\r\n/**\r\n * Define a default UI for filtering\r\n * @param {[]} preGlobalFilteredRows\r\n * @param {string} globalFilter\r\n * @param {function} setGlobalFilter\r\n * @param {string} widgetId\r\n * @param {{}} settings\r\n * @return {*}\r\n * @constructor\r\n */\r\nfunction GlobalFilter({\r\n  preGlobalFilteredRows,\r\n  globalFilter,\r\n  setGlobalFilter,\r\n  widgetId,\r\n  settings,\r\n}) {\r\n  const { global_filter_placeholder, global_filter_label } = settings;\r\n  const count = preGlobalFilteredRows.length;\r\n  const [value, setValue] = React.useState(globalFilter);\r\n  const onChange = useAsyncDebounce(value => {\r\n    setGlobalFilter(value || undefined);\r\n  }, 200);\r\n  let labelText = global_filter_label || `Search:${' '}`;\r\n  let placeholder = global_filter_placeholder || `${count} records...`;\r\n  placeholder = placeholder.replace(/{{count}}/g, count);\r\n  return (\r\n    <div className=\"altrp-table-global-filter\">\r\n      <label htmlFor={`altrp-table-global-filter${widgetId}`} dangerouslySetInnerHTML={{ __html: labelText }} />\r\n      <input\r\n        id={`altrp-table-global-filter${widgetId}`}\r\n        value={value || \"\"}\r\n        onChange={e => {\r\n          setValue(e.target.value);\r\n          onChange(e.target.value);\r\n        }}\r\n        placeholder={placeholder}\r\n\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default (props) => {\r\n  props = { ...props };\r\n  if(props.settings.choose_datasource === 'datasource'){\r\n    let length = React.useMemo(()=>{\r\n\r\n      return props.settings.inner_page_size > 0 ? 100 : 10;\r\n    }, [props.settings.inner_page_size]);\r\n\r\n    props._status = 'success';\r\n    if(isEditor()){\r\n      props = {...props};\r\n      props.settings = {...props.settings};\r\n      props.data = Array.from({length}, () => ({}));\r\n      setAltrpIndex(props.data);\r\n    }\r\n    return <AltrpTableWithoutUpdate {...props}/>\r\n  }\r\n  return <AltrpQueryComponent {...props}><AltrpTableWithoutUpdate /></AltrpQueryComponent>\r\n}\r\n\r\nfunction DefaultCell(\r\n  { row,\r\n    data,\r\n    cell, value: initialValue,\r\n    updateData }) {\r\n  const { column } = cell;\r\n  const [value, setValue] = React.useState(initialValue);\r\n  React.useEffect(() => {\r\n    setValue(initialValue);\r\n  }, [initialValue, cell]);\r\n  const { column_template,\r\n    column_is_editable,\r\n    column_edit_url,\r\n    column_external_link,\r\n    column_blank_link,\r\n    edit_disabled,\r\n    column_cell_content_type } = column;\r\n  let {\r\n    _accessor,\r\n  } = column;\r\n  _accessor = _accessor || '';\r\n  _accessor = _accessor.trim();\r\n  let leftValue, rightValue;\r\n  if(_accessor && _accessor.indexOf('?') !== -1 && _accessor.indexOf(':') !== -1){\r\n    [leftValue, rightValue] = _accessor.split('?')[1].split(':');\r\n    leftValue = leftValue.trim();\r\n    rightValue = rightValue.trim();\r\n    cell.value = cell.value ? leftValue : rightValue;\r\n  }\r\n  if(_accessor.indexOf('\"') === 0 && _accessor[_accessor.length - 1] === '\"'){\r\n    cell.value = _accessor.substring(1, _accessor.length - 1);\r\n  }\r\n  const [columnTemplate, setColumnTemplate] = React.useState(null);\r\n  const columnEditUrl =\r\n    React.useMemo(() => {\r\n      if (!column_is_editable || !column_edit_url) {\r\n        return null;\r\n      }\r\n      return parseURLTemplate(column_edit_url, row.original);\r\n    }, [column_edit_url, column_is_editable, row, ]);\r\n\r\n  const fetchTemplate = React.useCallback(async () => {\r\n    const columnTemplate = await templateLoader.loadParsedTemplate(column_template);\r\n    setColumnTemplate(columnTemplate);\r\n  }, [column_template]);\r\n  // console.error(columnTemplate);\r\n\r\n  React.useEffect(() => {\r\n    if (column_template) {\r\n      fetchTemplate();\r\n    }\r\n  }, [fetchTemplate]);\r\n  // console.error(columnTemplate);\r\n  let cellContent = cell.value;\r\n  let linkTag = isEditor() ? 'a' : Link;\r\n  if(column_external_link && ! isEditor()) {\r\n    linkTag = 'a';\r\n  }\r\n  /**\r\n   * Если значение объект или массив, то отобразим пустую строку\r\n   */\r\n  if (_.isObject(cell.value)) {\r\n    cellContent = '';\r\n  }\r\n  /**\r\n   * Если в настройках колонки есть url, и в данных есть id, то делаем ссылку\r\n   */\r\n  let href = null;\r\n  switch (column_cell_content_type) {\r\n    case 'email':\r\n      cellContent = React.createElement('a', {\r\n        href: `mailto:${cell.value}`,\r\n        className: 'altrp-inherit altrp-table-td__default-content',\r\n        dangerouslySetInnerHTML: {\r\n          __html: cell.value === 0 ? '0' : (cell.value || '&nbsp;')\r\n        }\r\n      });\r\n      break;\r\n\r\n    case 'phone':\r\n      cellContent = React.createElement('a', {\r\n        href: `tel:${cell.value}`,\r\n        className: 'altrp-inherit altrp-table-td__default-content',\r\n        dangerouslySetInnerHTML: {\r\n          __html: cell.value === 0 ? '0' : (cell.value || '&nbsp;')\r\n        }\r\n      });\r\n      break;\r\n\r\n    default:\r\n      if (column.column_link) {\r\n        cellContent = React.createElement(linkTag, {\r\n          to: parseURLTemplate(column.column_link, row.original),\r\n          href: parseURLTemplate(column.column_link, row.original),\r\n          target: column_blank_link ? '_blank' : '',\r\n          className: 'altrp-inherit altrp-table-td__default-content',\r\n          dangerouslySetInnerHTML: {\r\n            __html: cell.value === 0 ? '0' : (cell.value || '&nbsp;')\r\n          }\r\n        })\r\n      } else {\r\n        cellContent = React.createElement('span', {\r\n          href,\r\n          className: 'altrp-inherit altrp-table-td__default-content',\r\n          dangerouslySetInnerHTML: {\r\n            __html: cell.value === 0 ? '0' : (cell.value || '&nbsp;')\r\n          }\r\n        })\r\n      }\r\n      break;\r\n  }\r\n\r\n  const columnTemplateContent = React.useMemo(() => {\r\n    if (! columnTemplate) {\r\n      return null;\r\n    }\r\n    let columnTemplateContent = frontElementsFabric.cloneElement(columnTemplate);\r\n    columnTemplateContent.setCardModel(new AltrpModel(row.original || {}),);\r\n    return React.createElement(columnTemplateContent.componentClass,\r\n      {\r\n        element: columnTemplateContent,\r\n        ElementWrapper: ElementWrapper,\r\n        children: columnTemplateContent.children\r\n      });\r\n  }, [columnTemplate, row.original, data]);\r\n  if (columnTemplateContent) {\r\n    return <div className=\"altrp-posts\"><div className=\"altrp-post overflow-visible\">{columnTemplateContent}</div></div>;\r\n  }\r\n\r\n  /**\r\n   * Отоборажаем инпут для редактирования данных\r\n   */\r\n  if (columnEditUrl && ! edit_disabled) {\r\n    return <AutoUpdateInput className=\"altrp-inherit\"\r\n                            route={columnEditUrl}\r\n                            resourceid={''}\r\n                            changevalue={value => {\r\n                              setValue(value)\r\n                            }}\r\n                            onBlur={(value) => {\r\n                              updateData(row.index, _accessor, value);\r\n                            }}\r\n                            value={value} />;\r\n  }\r\n  /**\r\n   * Если есть actions, то надо их вывести\r\n   */\r\n  if (_.get(cell, 'column.actions.length')) {\r\n    return renderCellActions(cell, row);\r\n  }\r\n  if (_.isString(cellContent)) {\r\n    return cellContent;\r\n  }\r\n  return <>{cellContent}</>;\r\n\r\n}\r\n","import Query from \"../../classes/Query\";\r\nimport {Scrollbars} from \"react-custom-scrollbars\";\r\nconst {getDataByPath, getWidgetState, isEditor, storeWidgetState} = window.altrpHelpers;\r\n// const AltrpTableWithoutUpdate = React.lazy(() => import(/* webpackChunkName: 'altrp-table-without-update' */'../altrp-table/altrp-table-without-update'));\r\n// const AltrpTableWithoutUpdate = React.lazy(() => import(/* webpackChunkName: 'altrp-table-without-update' */'../altrp-table/altrp-table-without-update'));\r\n// const AltrpTable = React.lazy(() => import(/* webpackChunkName: 'altrp-table' */'../altrp-table/altrp-table'));\r\nimport AltrpTable from'../altrp-table/altrp-table';\r\nimport AltrpTableWithoutUpdate from'../altrp-table/altrp-table-without-update';\r\n\r\n(window.globalDefaults = window.globalDefaults || []).push(`\r\n.altrp-table-th {\r\n  text-align: center;\r\n  font-size: 14px;\r\n  font-weight: normal;\r\n  font-family: \"Open Sans\";\r\n  line-height: 1.5;\r\n  letter-spacing: 0;\r\n  padding: 0 0 0 0;\r\n  display: table-cell;\r\n}\r\n.altrp-table-td {\r\n  text-align: left;\r\n  padding: 0 0 0 0;\r\n  font-size: 14px;\r\n  font-weight: normal;\r\n  font-family: \"Open Sans\";\r\n  line-height: 1.5;\r\n  letter-spacing: 0;\r\n  display: table-cell;\r\n}\r\n.altrp-table-tbody--striped tr:nth-child(2n) {\r\n  background-color: rgba(0, 0, 50, .05);\r\n}\r\n.altrp-table-tbody,\r\n.altrp-table-th {\r\n  border-collapse: separate;\r\n  user-select: none;\r\n}\r\n.altrp-table-td__grouping {\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n}\r\n.altrp-table-th_sort {\r\n  padding: 0;\r\n  margin-left: 10px;\r\n}\r\n.altrp-table-th .sort-icon {\r\n  margin-left: 10px;\r\n}\r\n.altrp-table {\r\n  overflow: hidden;\r\n  display: table;\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  border-width: 1px 1px 1px 1px;\r\n  border-color: rgb(186, 186, 186);\r\n}\r\n.altrp-table__filter-select {\r\n  width: 100%;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__placeholder {\r\n  white-space: nowrap;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__single-value {\r\n  font-size: 14px;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__indicator-separator {\r\n  display: none;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__indicator {\r\n  align-items: center;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__control {\r\n  width: 100%;\r\n  min-height: 19px;\r\n  padding: 0;\r\n  border-radius: 0;\r\n  outline: none;\r\n  border-color: rgb(142, 148, 170);\r\n  -webkit-box-shadow: none;\r\n  -moz-box-shadow: none;\r\n  box-shadow: none;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__control input {\r\n  border: none;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__value-container {\r\n  padding-top: 0;\r\n  padding-bottom: 0;\r\n  line-height: 13px;\r\n}\r\n.altrp-table-td__grouping {\r\n  -webkit-transition-duration: 0.2s;\r\n  -moz-transition-duration: 0.2s;\r\n  -ms-transition-duration: 0.2s;\r\n  -o-transition-duration: 0.2s;\r\n  transition-duration: 0.2s;\r\n}\r\n.altrp-table-td_alignment .altrp-table-td_alignment-center .altrp-actions{\r\n  justify-content: center;\r\n}\r\n.altrp-table-td_alignment-right .altrp-actions {\r\n  justify-content: flex-end;\r\n}\r\n.altrp-table__collapse-icon {\r\n  display: inline-block;\r\n}\r\n.altrp-table__collapse-icon .altrp-table__collapse-icon svg {\r\n  position: relative;\r\n}\r\n\r\n.altrp-table-head {\r\n  display: table-header-group;\r\n}\r\n\r\n.altrp-table-tbody {\r\n  display: table-row-group;\r\n}\r\n\r\n.altrp-table-foot {\r\n  display: table-footer-group;\r\n}\r\n\r\n.altrp-table-tr {\r\n  display: table-row;\r\n}\r\n\r\n.altrp-table_loading {\r\n  display: block;\r\n}\r\n\r\n.altrp-table-th_global-filter {\r\n  colspan: all;\r\n}\r\n\r\n.altrp-table-td .altrp-inherit{\r\n  border: none;\r\n  width: 100%;\r\n}\r\n.altrp-table-td_loading {\r\n  display: block;\r\n  width: 100%;\r\n}\r\n\r\n.altrp-table__resizer {\r\n  display: inline-block;\r\n  background: blue;\r\n  width: 10px;\r\n  height: 100%;\r\n  position: absolute;\r\n  right: 0;\r\n  top: 0;\r\n  transform: translateX(50%);\r\n  z-index: 1;\r\n  touch-action: none;\r\n}\r\n.altrp-table__resizer_resizing {\r\n    background: red;\r\n}\r\n.altrp-table .altrp-table-td .altrp-table-td__double-click-content {\r\n  display: none;\r\n}\r\n.altrp-table .altrp-table-td .altrp-table-td_double-clicked .altrp-table-td_double-clicked .altrp-table-td__double-click-content {\r\n  display: block;\r\n  width: 100%;\r\n  border-width: 2px;\r\n}\r\n.altrp-table .altrp-table-td .altrp-table-td_double-clicked .altrp-table-td_double-clicked .altrp-table-td__default-content {\r\n  display: none;\r\n}\r\n.altrp-table-global-filter {\r\n  font-weight: 400;\r\n}\r\n.altrp-table-global-filter label {\r\n  display: inline-block;\r\n}\r\n`)\r\n\r\nclass TableWidget extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      settings: props.element.getSettings(),\r\n      TableComponent: ()=><div children=\"Loading...\"/>\r\n    };\r\n    props.element.component = this;\r\n    if (window.elementDecorator) {\r\n      window.elementDecorator(this);\r\n    }\r\n    if(props.baseRender){\r\n      this.render = props.baseRender(this);\r\n    }\r\n    this.scrollbar = React.createRef();\r\n  }\r\n\r\n  _componentDidMount(){\r\n    if(this.props.element.getSettings('store_state') && getWidgetState(this.props.element.getId())){\r\n      this.setState(state=>({...state, widgetState: getWidgetState(this.props.element.getId())}));\r\n    } else if (this.props.element.getSettings('store_state')){\r\n      storeWidgetState(this.props.element.getId(), null);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Показывать ли таблицу\r\n   * @param{Query} query\r\n   * @return {boolean}\r\n   */\r\n  showTable(query = {}){\r\n    if( this.props.element.getSettings('choose_datasource') === 'datasource' ){\r\n      return true;\r\n    }\r\n    if(! query.modelName && ! query.dataSource){\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n  render(){\r\n    const settings = this.props.element.getSettings();\r\n    if(! this.props.currentModel.getProperty('altrpModelUpdated')){\r\n      return '';\r\n    }\r\n    let data = [];\r\n    if(this.props.element.getSettings('table_datasource')\r\n        && this.props.element.getSettings('choose_datasource') === 'datasource'){\r\n      let path = this.props.element.getSettings('table_datasource').replace(/{{/g, '').replace(/}}/g, '');\r\n      data = getDataByPath(path, [], this.props.element.getCurrentModel().getData())\r\n    }\r\n    if(! this.query || ! this.table_query || this.table_query !== this.props.element.getSettings().table_query){\r\n      this.table_query = this.props.element.getSettings().table_query;\r\n      this.query = new Query(this.props.element.getSettings().table_query || {}, this);\r\n    }\r\n    const query = this.query;\r\n    if(! this.showTable(query)){\r\n      return <div children=\"Please Choose Source\"/>\r\n    }\r\n    const scrollbarsProps = {\r\n      ref:this.scrollbar,\r\n      style:{zIndex: 99999},\r\n      autoHeight:true,\r\n      autoHideTimeout:500,\r\n      autoHideDuration:200,\r\n      renderTrackVertical: ({style, ...props})=>{\r\n        return<div className=\"altrp-scroll__vertical-track\" style={style} {...props} />\r\n      },\r\n    };\r\n    if(this.props.element.getSettings('table_transpose', false)){\r\n      scrollbarsProps.autoHeight = true;\r\n      scrollbarsProps.autoHeightMax = 10000;\r\n    }\r\n\r\n    if (! (_.get(settings,'tables_columns.length'))) {\r\n      return <div children=\"Please Add Column\"/>\r\n    }\r\n\r\n    const TableComponent = this.props.element.getSettings('table_2_0') ? AltrpTableWithoutUpdate : AltrpTable;\r\n    return <Scrollbars\r\n        ref={this.scrollbar}\r\n        style={{zIndex: 99999}}\r\n        autoHide\r\n        autoHeightMax={30000}\r\n        autoHeight={true}\r\n        autoHideTimeout={500}\r\n        autoHideDuration={200}\r\n        renderTrackVertical={({style, ...props})=>{\r\n          style.display = 'none';\r\n          return <div className=\"altrp-scroll__vertical-track\" style={style} {...props} />}}\r\n        renderTrackHorizontal={({style, ...props})=>{\r\n          return <div className=\"altrp-scroll__horizontal-track\" style={style} {...props} />}}\r\n    >\r\n      {/*<React.Suspense fallback={''}>*/}\r\n      <TableComponent query={query}\r\n                      updateToken={this.props.updateToken}\r\n                      widgetId={this.props.element.getId()}\r\n                      widgetState={isEditor() ? null : this.state.widgetState}\r\n                      currentModel={this.props.currentModel}\r\n                      currentScreen={this.props.currentScreen}\r\n                      data={isEditor() ? null : (data || query.getFromModel(this.state.modelData))}\r\n                      settings={this.props.element?.settings}/>\r\n    {/*</React.Suspense>*/}\r\n    </Scrollbars>;\r\n  }\r\n}\r\n\r\nexport default TableWidget\r\n\r\n"],"sourceRoot":""}