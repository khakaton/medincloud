{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/classes/AltrpModel.js","webpack:///./resources/modules/editor/src/js/components/widgets/VideoWidget.js"],"names":["AltrpModel","data","this","cloneDeep","clone","isEmpty","name","defaultValue","get","has","value","getData","set","unset","window","VideoWidget","dynamicID","props","element","settings","is_youtube","youtube_id","content_path","url","getDataByPath","parseIDFromYoutubeURL","className","allowFullScreen","src","controls","Component"],"mappings":"2OAYMA,E,WACJ,aAAuB,IAAXC,EAAW,uDAAJ,IAAI,eACrBC,KAAKD,KAAOE,IAAUF,G,sCAQxB,WAAsB,IAAdG,IAAc,yDACpB,OAAGA,EACMD,IAAUD,KAAKD,MAEjBC,KAAKD,O,qBAMd,WACE,OAAOI,IAAQH,KAAKD,Q,yBAQtB,SAAYK,GAAyB,IAAnBC,EAAmB,uDAAJ,GAC/B,OAAOC,IAAIN,KAAKD,KAAMK,EAAMC,K,yBAQ9B,SAAYD,GACV,OAAOG,IAAIP,KAAKD,KAAMK,K,yBAQxB,SAAYA,GAAkB,IAAZI,EAAY,uDAAJ,GAIxB,OAHGA,aAAiBV,IAClBU,EAAQA,EAAMC,SAAQ,IAEjBC,IAAIV,KAAKD,KAAMK,EAAMI,K,2BAO9B,SAAcJ,GACZ,OAAOO,IAAMX,KAAKD,KAAMK,O,KAG5BQ,OAAOd,WAAaA,EACpB,O,kHCvEMe,E,wiBACJ,WACE,IAKIC,EALJ,EAIId,KAAKe,MAAMC,QAAQC,SAHrBC,EADF,EACEA,WACAC,EAFF,EAEEA,WACAC,EAHF,EAGEA,aAGIC,GAAMC,mBAAcF,GAK1B,OAJIA,GACEC,IAAKP,GAAYS,2BAAsBF,IAGtCH,EACL,8BACEM,UAAU,cACVC,iBAAe,EACfC,IAAG,wCAAmCZ,GAAaK,KAGrD,6BAAOK,UAAU,cAAcG,UAAQ,EAACD,IAAKL,Q,GApBzBO,WAyB1B","file":"VideoWidget.57078a625f3b108e83f7.bundle.js","sourcesContent":["/**\r\n * Имеет интерфейс для доступы к свойствам data (любой вложенности)\r\n * @class AltrpModel\r\n */\r\nimport cloneDeep from 'lodash.clonedeep';\r\nimport get from 'lodash.get';\r\nimport set from 'lodash.set';\r\nimport has from 'lodash.has';\r\nimport unset from 'lodash.unset';\r\nimport isEmpty from 'lodash.isempty';\r\n// import {cloneDeep, get, set, has, unset, isString, isEmpty} from \"lodash\";\r\n\r\nclass AltrpModel {\r\n  constructor(data = {}) {\r\n    this.data = cloneDeep(data);\r\n  }\r\n\r\n  /**\r\n   * Возваращает объект данных\r\n   * @params {boolean} clone - клонировать или ссылку на данные\r\n   * @return {{}}\r\n   */\r\n  getData(clone = true) {\r\n    if(clone){\r\n      return cloneDeep(this.data);\r\n    }\r\n    return this.data;\r\n  }\r\n\r\n  /**\r\n   * Пустой ли объект\r\n   */\r\n  isEmpty(){\r\n    return isEmpty(this.data);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  getProperty(name, defaultValue = '') {\r\n    return get(this.data, name, defaultValue);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  hasProperty(name, defaultValue = '') {\r\n    return has(this.data, name);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {{}}\r\n   */\r\n  setProperty(name, value = '') {\r\n    if(value instanceof AltrpModel){\r\n      value = value.getData(false);\r\n    }\r\n    return set(this.data, name, value);\r\n  }\r\n  /**\r\n   * Удаляет свойства name\r\n   * @params {string} name\r\n   * @return {*}\r\n   */\r\n  unsetProperty(name) {\r\n    return unset(this.data, name);\r\n  }\r\n}\r\nwindow.AltrpModel = AltrpModel;\r\nexport default AltrpModel\r\n","import {\r\n  getDataByPath,\r\n  parseIDFromYoutubeURL\r\n} from \"../../../../../front-app/src/js/helpers\";\r\nclass VideoWidget extends Component {\r\n  render() {\r\n    const {\r\n      is_youtube,\r\n      youtube_id,\r\n      content_path\r\n    } = this.props.element.settings;\r\n    let dynamicID;\r\n    const url = getDataByPath(content_path);\r\n    if (content_path) {\r\n      if (url) dynamicID = parseIDFromYoutubeURL(url);\r\n    }\r\n\r\n    return is_youtube ? (\r\n      <iframe\r\n        className=\"altrp-video\"\r\n        allowFullScreen\r\n        src={`https://www.youtube.com/embed/${dynamicID || youtube_id}`}\r\n      />\r\n    ) : (\r\n      <video className=\"altrp-video\" controls src={url} />\r\n    );\r\n  }\r\n}\r\n\r\nexport default VideoWidget;\r\n"],"sourceRoot":""}