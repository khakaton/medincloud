{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/classes/AltrpModel.js","webpack:///../src/altrp-diagrams/layout/BarDiagram.tsx","webpack:///./resources/modules/editor/src/js/components/altrp-diagram/AltrpDiagram.js"],"names":["AltrpModel","data","this","cloneDeep","clone","isEmpty","name","defaultValue","get","has","value","getData","set","unset","window","TooltipBarComponent","moment","altrpHelpers","connect","state","currentDataStorage","props","settings","id","dispatch","useDispatch","margin","widgetName","widget_name","customColorSchemeChecker","isCustomColor","customColors","customScheme","map","item","_","yScaleMax","axisY","tooltipValues","repTooltips","label","field","color","colorPickedHex","useCustomTooltips","customTooltip","formattedYAxis","valueFromPath","getDataByPath","yMarkerValue","axis","Number","lineStyle","stroke","yMarkerColor","strokeWidth","yMarkerWidth","textStyle","fill","yMarkerLabelColor","legend","yMarkerLabel","legendOrientation","yMarkerOrientation","axisX","formattedXAxis","xMarkerValue","xMarkerIsDate","format","xMarkerColor","xMarkerWidth","xMarkerLabelColor","xMarkerLabel","xMarkerOrientation","constantsAxises","length","push","flat","sql","query","dataSource","isMultiple","isCustomColors","keyIsDate","key_is_date","sort","tickRotation","bottomAxis","enableGridX","enableGridY","xScaleType","precision","curve","lineWidth","colorScheme","enableArea","enablePoints","pointSize","pointColor","yMarker","xMarker","xMarkerValueDate","toDate","layout","groupMode","reverse","borderRadius","borderWidth","enableLabel","padding","innerRadius","enableSliceLabels","padAngle","cornerRadius","sortByValue","enableRadialLabels","formatData","r","d","index","currentKey","key","keyFormatted","isValid","tooltip","type","LINE","TABLE","POINT","y","x","BAR","PIE","currentColors","find","Schemes","colors","colorsCount","rep","innerData","path","uniqBy","title","concat","i","datasource_path","key_name","data_name","datasource_title","error","console","log","colorArray","repcolor","className","legendPosition","widget","source","qs","keyValues","split","result","replace","join","parseQueryParams","defaultParams","options","animated","isVertical","filter","useEffect","changePageState","setLegend","DynamicLineChart","widgetID","width","size","unit","height","DynamicPointChart","nodeSize","DynamicPieChart","DynamicTableWidget"],"mappings":"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","file":"AltrpDiagram.196ce11709059447eea6.bundle.js","sourcesContent":["/**\r\n * Имеет интерфейс для доступы к свойствам data (любой вложенности)\r\n * @class AltrpModel\r\n */\r\nimport cloneDeep from 'lodash.clonedeep';\r\nimport get from 'lodash.get';\r\nimport set from 'lodash.set';\r\nimport has from 'lodash.has';\r\nimport unset from 'lodash.unset';\r\nimport isEmpty from 'lodash.isempty';\r\n// import {cloneDeep, get, set, has, unset, isString, isEmpty} from \"lodash\";\r\n\r\nclass AltrpModel {\r\n  constructor(data = {}) {\r\n    this.data = cloneDeep(data);\r\n  }\r\n\r\n  /**\r\n   * Возваращает объект данных\r\n   * @params {boolean} clone - клонировать или ссылку на данные\r\n   * @return {{}}\r\n   */\r\n  getData(clone = true) {\r\n    if(clone){\r\n      return cloneDeep(this.data);\r\n    }\r\n    return this.data;\r\n  }\r\n\r\n  /**\r\n   * Пустой ли объект\r\n   */\r\n  isEmpty(){\r\n    return isEmpty(this.data);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  getProperty(name, defaultValue = '') {\r\n    return get(this.data, name, defaultValue);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  hasProperty(name, defaultValue = '') {\r\n    return has(this.data, name);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {{}}\r\n   */\r\n  setProperty(name, value = '') {\r\n    if(value instanceof AltrpModel){\r\n      value = value.getData(false);\r\n    }\r\n    return set(this.data, name, value);\r\n  }\r\n  /**\r\n   * Удаляет свойства name\r\n   * @params {string} name\r\n   * @return {*}\r\n   */\r\n  unsetProperty(name) {\r\n    return unset(this.data, name);\r\n  }\r\n}\r\nwindow.AltrpModel = AltrpModel;\r\nexport default AltrpModel\r\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport React, { useState, useEffect, useCallback } from \"react\";\r\n\r\nimport Spinner from \"../../../../../../admin/src/components/dashboard/widgets/Spinner\";\r\nimport EmptyWidget from \"../../../../../../admin/src/components/dashboard/widgets/EmptyWidget\";\r\nimport Schemes from \"../../../../../../editor/src/js/components/altrp-dashboards/settings/NivoColorSchemes\";\r\nconst regagroScheme = _.find(Schemes, { value: \"regagro\" }).colors;\r\nconst milkScheme = _.find(Schemes, { value: \"milk\" }).colors;\r\nconst milkScheme2 = _.find(Schemes, { value: \"milk2\" }).colors;\r\nimport { ResponsiveBar } from \"@nivo/bar\";\r\nimport { getWidgetData } from \"../../../../../../admin/src/components/dashboard/services/getWidgetData\";\r\nimport TooltipBar from \"../../../../../../admin/src/components/dashboard/widgets/d3/TooltipBar\";\r\nconst TooltipBarComponent = TooltipBar;\r\nconst BarDiagram = ({ widget, width = 300, height = 450, margin, dataSource = [], groupMode = \"stacked\", layout = \"vertical\", colorScheme = \"regagro\", reverse = false, enableLabel = false, padding = 0.1, innerPadding = 0, borderRadius = 0, borderWidth = 0, sort = \"\", tickRotation = 0, bottomAxis = true, enableGridX = true, enableGridY = true, customColorSchemeChecker = false, customColors = [], yScaleMax, widgetID, useCustomTooltips }) => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [data, setData] = useState([]);\r\n    const getData = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {\r\n        setIsLoading(true);\r\n        if (dataSource.length == 0) {\r\n            const charts = yield getWidgetData(widget.source, widget.filter);\r\n            if (charts.status === 200) {\r\n                let data = charts.data.data.map((item, index) => {\r\n                    return {\r\n                        [item.key]: Number(item.data),\r\n                        key: item.key,\r\n                        value: Number(item.data)\r\n                    };\r\n                });\r\n                setData(data || []);\r\n                setIsLoading(false);\r\n            }\r\n        }\r\n        else {\r\n            if (sort !== null &&\r\n                typeof sort !== \"undefined\" &&\r\n                typeof dataSource !== \"undefined\") {\r\n                switch (sort) {\r\n                    case \"value\":\r\n                        dataSource = _.sortBy(dataSource, [\"value\"]);\r\n                        break;\r\n                    case \"key\":\r\n                        dataSource = _.sortBy(dataSource, [\"key\"]);\r\n                        break;\r\n                    default:\r\n                        dataSource = dataSource;\r\n                        break;\r\n                }\r\n            }\r\n            setData(dataSource || []);\r\n            setIsLoading(false);\r\n        }\r\n    }), [widget]);\r\n    useEffect(() => {\r\n        getData();\r\n    }, [data]);\r\n    if (isLoading)\r\n        return React.createElement(Spinner, null);\r\n    if (data.length === 0)\r\n        return React.createElement(EmptyWidget, null);\r\n    return (React.createElement(React.Fragment, null,\r\n        React.createElement(\"div\", { style: { height: `${height}`, width: `${width}` } },\r\n            React.createElement(ResponsiveBar, { data: data, margin: {\r\n                    top: (margin === null || margin === void 0 ? void 0 : margin.top) || 30,\r\n                    right: (margin === null || margin === void 0 ? void 0 : margin.right) || 30,\r\n                    bottom: (margin === null || margin === void 0 ? void 0 : margin.bottom) || 30,\r\n                    left: (margin === null || margin === void 0 ? void 0 : margin.left) || 30\r\n                }, indexBy: \"key\", colors: customColorSchemeChecker && customColors.length > 0\r\n                    ? customColors\r\n                    : colorScheme === \"regagro\"\r\n                        ? regagroScheme\r\n                        : colorScheme === \"milk\"\r\n                            ? milkScheme\r\n                            : colorScheme === \"milk2\"\r\n                                ? milkScheme2\r\n                                : { scheme: colorScheme }, layout: layout, tooltip: datum => (React.createElement(TooltipBarComponent, { enable: useCustomTooltips, datum: datum, widgetID: widgetID })), enableGridX: enableGridX, enableGridY: enableGridY, enableLabel: enableLabel, reverse: reverse, groupMode: groupMode, padding: padding, innerPadding: innerPadding, borderRadius: borderRadius, borderWidth: borderWidth, axisBottom: {\r\n                    tickSize: 5,\r\n                    tickPadding: 5,\r\n                    tickRotation: tickRotation,\r\n                    legendOffset: 32\r\n                } }))));\r\n};\r\nexport default BarDiagram;\r\n//# sourceMappingURL=BarDiagram.js.map\r\n","import React, { useEffect } from \"react\";\r\nimport { changePageState } from \"../../../../../front-app/src/js/store/altrp-page-state-storage/actions\";\r\nimport { connect, useDispatch } from \"react-redux\";\r\n\r\nimport BarDiagram from \"../../../../../front-app/src/ts/build/altrp-diagrams/layout/BarDiagram\";\r\nimport DynamicPieChart from \"../../../../../admin/src/components/dashboard/widgets/DynamicPieChart\";\r\nimport DynamicLineChart from \"../../../../../admin/src/components/dashboard/widgets/DynamicLineChart\";\r\nimport DynamicTableWidget from \"../../../../../admin/src/components/dashboard/widgets/DynamicTableWidget\";\r\nimport DynamicPointChart from \"../../../../../admin/src/components/dashboard/widgets/DynamicPointChart\";\r\n\r\nimport Schemes from \"../../../../../editor/src/js/components/altrp-dashboards/settings/NivoColorSchemes\";\r\n\r\nimport {\r\n  BAR,\r\n  PIE,\r\n  LINE,\r\n  TABLE,\r\n  POINT\r\n} from \"../../../../../admin/src/components/dashboard/widgetTypes\";\r\nimport { getDataByPath } from \"../../../../../front-app/src/js/helpers\";\r\nimport { color } from \"d3\";\r\n\r\nconst {moment} = window.altrpHelpers;\r\n\r\nconst AltrpDiagram = props => {\r\n  const { settings, id } = props;\r\n  const dispatch = useDispatch();\r\n  const margin = settings?.margin;\r\n  const widgetName = settings?.widget_name || id;\r\n  const customColorSchemeChecker = settings?.isCustomColor;\r\n  const customColors = settings?.customScheme?.map(item =>\r\n    _.get(item, \"color.colorPickedHex\")\r\n  );\r\n  const yScaleMax = settings?.yScaleMax;\r\n\r\n  const axisY = settings?.axisY;\r\n  const tooltipValues = settings?.repTooltips?.map(item => ({\r\n    label: _.get(item, \"label\"),\r\n    field: _.get(item, \"value\"),\r\n    color: _.get(item, \"color\")?.colorPickedHex\r\n  }));\r\n  const useCustomTooltips = settings?.customTooltip;\r\n\r\n  const formattedYAxis =\r\n    axisY?.map(item => {\r\n      const valueFromPath = getDataByPath(item.yMarkerValue);\r\n      const value =\r\n        valueFromPath !== null\r\n          ? Number(valueFromPath)\r\n          : Number(item.yMarkerValue);\r\n      const data = {\r\n        axis: \"y\",\r\n        value: value,\r\n        lineStyle: {\r\n          stroke:\r\n            item.yMarkerColor != null\r\n              ? item.yMarkerColor.colorPickedHex\r\n              : \"#000000\",\r\n          strokeWidth: item.yMarkerWidth\r\n        },\r\n        textStyle: {\r\n          fill:\r\n            item.yMarkerLabelColor != null\r\n              ? item.yMarkerLabelColor.colorPickedHex\r\n              : \"#000000\"\r\n        },\r\n        legend: item.yMarkerLabel,\r\n        legendOrientation: item.yMarkerOrientation\r\n      };\r\n      return data;\r\n    }) || [];\r\n\r\n  const axisX = settings?.axisX;\r\n  const formattedXAxis =\r\n    axisX?.map(item => {\r\n      const valueFromPath = getDataByPath(item.xMarkerValue);\r\n\r\n      const value =\r\n        valueFromPath !== null\r\n          ? valueFromPath\r\n          : item.xMarkerIsDate\r\n          ? moment(item.xMarkerValue).format(\"DD.MM.YYYY\")\r\n          : item.xMarkerValue;\r\n\r\n      const data = {\r\n        axis: \"x\",\r\n        value: value,\r\n        lineStyle: {\r\n          stroke:\r\n            item.xMarkerColor != null\r\n              ? item.xMarkerColor.colorPickedHex\r\n              : \"#000000\",\r\n          strokeWidth: item.xMarkerWidth\r\n        },\r\n        textStyle: {\r\n          fill:\r\n            item.xMarkerLabelColor != null\r\n              ? item.xMarkerLabelColor.colorPickedHex\r\n              : \"#000000\"\r\n        },\r\n        legend: item.xMarkerLabel,\r\n        legendOrientation: item.xMarkerOrientation\r\n      };\r\n      return data;\r\n    }) || [];\r\n\r\n  let constantsAxises = [];\r\n  if (formattedXAxis.length > 0) {\r\n    constantsAxises.push(formattedXAxis);\r\n    constantsAxises = constantsAxises.flat();\r\n  }\r\n  if (formattedYAxis.length > 0) {\r\n    constantsAxises.push(formattedYAxis);\r\n    constantsAxises = constantsAxises.flat();\r\n  }\r\n\r\n  const sql = settings.query?.dataSource?.value;\r\n  const isMultiple = settings.isMultiple;\r\n  const isCustomColor = settings.isCustomColors;\r\n  const keyIsDate = settings.key_is_date;\r\n  const sort = settings?.sort;\r\n  const tickRotation = settings?.tickRotation;\r\n  const bottomAxis = settings?.bottomAxis;\r\n  const enableGridX = settings?.enableGridX;\r\n  const enableGridY = settings?.enableGridY;\r\n  //line settings\r\n  const xScaleType = settings?.xScaleType || \"point\";\r\n  const precision = settings?.precision || \"month\";\r\n  const curve = settings?.curve || \"line\";\r\n  const lineWidth = settings?.lineWidth;\r\n  const colorScheme = settings?.colorScheme;\r\n\r\n  const enableArea = settings?.enableArea;\r\n  const enablePoints = settings?.enablePoints;\r\n  const pointSize = settings?.pointSize;\r\n  const pointColor = settings?.pointColor;\r\n  //line marker Y\r\n  const yMarker = settings?.yMarker;\r\n  const yMarkerValue = settings?.yMarkerValue;\r\n  const yMarkerOrientation = settings?.yMarkerOrientation;\r\n  const yMarkerColor = settings?.yMarkerColor;\r\n  const yMarkerWidth = settings?.yMarkerWidth;\r\n  const yMarkerLabel = settings?.yMarkerLabel;\r\n  const yMarkerLabelColor = settings?.yMarkerLabelColor;\r\n  //line marker X\r\n  const xMarker = settings?.xMarker;\r\n  const xMarkerValue = keyIsDate\r\n    ? moment(settings?.xMarkerValueDate).toDate()\r\n    : settings?.xMarkerValue;\r\n  const xMarkerOrientation = settings?.xMarkerOrientation;\r\n  const xMarkerColor = settings?.xMarkerColor;\r\n  const xMarkerWidth = settings?.xMarkerWidth;\r\n  const xMarkerLabel = settings?.xMarkerLabel;\r\n  const xMarkerLabelColor = settings?.xMarkerLabelColor;\r\n  //bar\r\n  const layout = settings?.layout;\r\n  const groupMode = settings?.groupMode;\r\n  const reverse = settings?.reverse;\r\n  const borderRadius = settings?.borderRadius;\r\n  const borderWidth = settings?.borderWidth;\r\n  const enableLabel = settings?.enableLabel;\r\n  const padding = settings?.padding;\r\n  //pie\r\n  const innerRadius = settings?.innerRadius;\r\n  const enableSliceLabels = settings?.enableSliceLabels;\r\n  const padAngle = settings?.padAngle;\r\n  const cornerRadius = settings?.cornerRadius;\r\n  const sortByValue = settings?.sortByValue;\r\n  const enableRadialLabels = settings?.enableRadialLabels;\r\n  //data variable\r\n  let data = [];\r\n\r\n  //funciton for formattion data for all types\r\n  const formatData = (data, r) => {\r\n    return data.map((d, index) => {\r\n      const currentKey = _.get(d, r.key);\r\n      const keyFormatted = !moment(currentKey).isValid()\r\n        ? currentKey\r\n        : moment(currentKey).format(\"DD.MM.YYYY\");\r\n      const tooltip =\r\n        typeof tooltipValues !== \"undefined\"\r\n          ? tooltipValues?.map(item => {\r\n              return {\r\n                label: item?.label,\r\n                value: _.get(d, item.field),\r\n                color: item?.color\r\n              };\r\n            })\r\n          : [];\r\n      switch (settings.type) {\r\n        case LINE: {\r\n          return {\r\n            y: Number(_.get(d, r.data)),\r\n            x: keyIsDate ? keyFormatted : currentKey,\r\n            tooltip: tooltip\r\n          };\r\n          break;\r\n        }\r\n        case TABLE: {\r\n          return {\r\n            y: Number(_.get(d, r.data)),\r\n            x: keyIsDate ? keyFormatted : currentKey,\r\n            tooltip: tooltip\r\n          };\r\n          break;\r\n        }\r\n        case POINT: {\r\n          return {\r\n            y: Number(_.get(d, r.data)),\r\n            x: keyIsDate ? keyFormatted : currentKey,\r\n            tooltip: tooltip\r\n          };\r\n          break;\r\n        }\r\n        case BAR: {\r\n          let key = keyIsDate ? keyFormatted : currentKey;\r\n          return {\r\n            [key]: Number(_.get(d, r.data)),\r\n            key: key,\r\n            value: Number(_.get(d, r.data)),\r\n            tooltip: tooltip\r\n          };\r\n          break;\r\n        }\r\n        case PIE: {\r\n          return {\r\n            value: Number(_.get(d, r.data)),\r\n            id: keyIsDate ? keyFormatted : currentKey,\r\n            tooltip: tooltip\r\n          };\r\n          break;\r\n        }\r\n\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n  };\r\n  let legend = [];\r\n  const currentColors = isCustomColor\r\n    ? customColors\r\n    : _.find(Schemes, { value: settings?.colorScheme }).colors;\r\n  const colorsCount = currentColors.length;\r\n\r\n  if (isMultiple) {\r\n    let repeater = _.cloneDeep(settings.rep, []);\r\n    data = repeater.map((r, index) => {\r\n      let innerData = getDataByPath(r.path, []);\r\n      if (innerData.length > 0) {\r\n        //Исключаем дублирование ключей, т.к. это приводит к ошибкам рендера всех диаграм\r\n        if (settings.type === LINE || settings.type === PIE) {\r\n          innerData = _.uniqBy(innerData, r.key);\r\n        }\r\n        innerData = formatData(innerData, r);\r\n      }\r\n      if (settings.type === PIE || settings.type === BAR) {\r\n        return innerData;\r\n      }\r\n      if (settings.type !== PIE) {\r\n        legend.push({\r\n          color: currentColors[index % colorsCount],\r\n          label: r.title || r.path\r\n        });\r\n      }\r\n      return {\r\n        id: r.title || r.path,\r\n        data: innerData\r\n      };\r\n    });\r\n    if (settings.type === PIE || settings.type === BAR) {\r\n      data = [].concat(...data);\r\n      legend = data?.map((item, i) => ({\r\n        color:\r\n          settings.type === BAR\r\n            ? currentColors[0]\r\n            : currentColors[i % colorsCount],\r\n        label: item.id || item.key\r\n      }));\r\n    }\r\n  } else if (settings.datasource_path != null) {\r\n    try {\r\n      data = getDataByPath(settings.datasource_path, []);\r\n      if (settings.type === LINE) {\r\n        data = _.uniqBy(data, settings.key_name);\r\n      }\r\n      const r = {\r\n        key: settings.key_name,\r\n        data: settings.data_name\r\n      };\r\n\r\n      if (settings.type === PIE || settings.type === BAR) {\r\n        data = formatData(data, r);\r\n        legend = data?.map((item, i) => ({\r\n          color:\r\n            settings.type === BAR\r\n              ? currentColors[0]\r\n              : currentColors[i % colorsCount],\r\n          label: item.id || item.key\r\n        }));\r\n      } else {\r\n        legend.push({\r\n          color: currentColors[0],\r\n          label: settings.datasource_title || settings.datasource_path\r\n        });\r\n        data = [\r\n          {\r\n            id: settings.datasource_title || settings.datasource_path,\r\n            data: formatData(data, r)\r\n          }\r\n        ];\r\n      }\r\n    } catch (error) {\r\n      console.log(\"====================================\");\r\n      console.error(error);\r\n      console.log(\"====================================\");\r\n      data = [\r\n        {\r\n          id: settings.datasource_title || settings.datasource_path,\r\n          data: []\r\n        }\r\n      ];\r\n    }\r\n  }\r\n\r\n  if (isCustomColor) {\r\n    let repeaterColor = _.cloneDeep(settings.repcolor, []);\r\n    var colorArray = repeaterColor.map(r => r.color.colorPickedHex);\r\n  }\r\n  if (!sql && data.length === 0) {\r\n    return (\r\n      <div className={`altrp-chart ${settings.legendPosition}`}>\r\n        Идет загрузка данных...\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const parseQueryParams = (qs = \"\") => {\r\n    if (!qs) return \"\";\r\n    const keyValues = qs.split(\"\\n\");\r\n    const result = keyValues.map(item => item.replace(\"|\", \"=\")).join(\"&\");\r\n    return `?${result}`;\r\n  };\r\n\r\n  const queryString = parseQueryParams(settings.query?.defaultParams);\r\n\r\n  const widget = {\r\n    source: sql + queryString,\r\n    options: {\r\n      colorScheme: settings.colorScheme,\r\n      legend: settings.legend,\r\n      animated: settings.animated,\r\n      isVertical: settings.isVertical\r\n    },\r\n    filter: {}\r\n  };\r\n\r\n  const setLegend = legend =>\r\n    dispatch(changePageState(widgetName, { legend: legend }));\r\n\r\n  useEffect(() => {\r\n    if (legend.length > 0) {\r\n      setLegend(legend);\r\n    }\r\n  }, [legend]);\r\n  console.log(\"====================================\");\r\n  console.log(data);\r\n  console.log(\"====================================\");\r\n  switch (settings.type) {\r\n    case LINE:\r\n      return (\r\n        <DynamicLineChart\r\n          widgetID={id}\r\n          margin={margin}\r\n          useCustomTooltips={useCustomTooltips}\r\n          yScaleMax={yScaleMax}\r\n          customColorSchemeChecker={customColorSchemeChecker}\r\n          customColors={customColors}\r\n          widget={widget}\r\n          dataSource={data}\r\n          keyIsDate={keyIsDate}\r\n          xScaleType={xScaleType}\r\n          precision={precision}\r\n          curve={curve}\r\n          colorScheme={colorScheme}\r\n          enableArea={enableArea}\r\n          enablePoints={enablePoints}\r\n          lineWidth={lineWidth}\r\n          pointColor={pointColor}\r\n          pointSize={pointSize}\r\n          yMarker={yMarker}\r\n          width={`${settings.width?.size}${settings.width?.unit}`}\r\n          height={`${settings.height?.size}${settings.height?.unit}`}\r\n          yMarkerValue={yMarkerValue}\r\n          yMarkerOrientation={yMarkerOrientation}\r\n          yMarkerColor={yMarkerColor}\r\n          yMarkerWidth={yMarkerWidth}\r\n          yMarkerLabel={yMarkerLabel}\r\n          xMarker={xMarker}\r\n          xMarkerValue={xMarkerValue}\r\n          xMarkerOrientation={xMarkerOrientation}\r\n          xMarkerColor={xMarkerColor}\r\n          xMarkerWidth={xMarkerWidth}\r\n          xMarkerLabel={xMarkerLabel}\r\n          yMarkerLabelColor={yMarkerLabelColor}\r\n          xMarkerLabelColor={xMarkerLabelColor}\r\n          constantsAxises={constantsAxises}\r\n          sort={sort}\r\n          tickRotation={tickRotation}\r\n          bottomAxis={bottomAxis}\r\n          enableGridX={enableGridX}\r\n          enableGridY={enableGridY}\r\n        />\r\n      );\r\n    case POINT:\r\n      return (\r\n        <DynamicPointChart\r\n          widgetID={id}\r\n          margin={margin}\r\n          useCustomTooltips={useCustomTooltips}\r\n          yScaleMax={yScaleMax}\r\n          customColorSchemeChecker={customColorSchemeChecker}\r\n          customColors={customColors}\r\n          dataSource={data}\r\n          constantsAxises={constantsAxises}\r\n          colorScheme={colorScheme}\r\n          width={`${settings.width?.size}${settings.width?.unit}`}\r\n          height={`${settings.height?.size}${settings.height?.unit}`}\r\n          widget={widget}\r\n          nodeSize={pointSize}\r\n          xScaleType={xScaleType}\r\n          precision={precision}\r\n          sort={sort}\r\n          tickRotation={tickRotation}\r\n          bottomAxis={bottomAxis}\r\n          enableGridX={enableGridX}\r\n          enableGridY={enableGridY}\r\n        />\r\n      );\r\n    case BAR:\r\n      return (\r\n        <BarDiagram\r\n          widgetID={id}\r\n          margin={margin}\r\n          useCustomTooltips={useCustomTooltips}\r\n          yScaleMax={yScaleMax}\r\n          customColorSchemeChecker={customColorSchemeChecker}\r\n          customColors={customColors}\r\n          isMultiple={isMultiple}\r\n          colorScheme={colorScheme}\r\n          dataSource={data}\r\n          widget={widget}\r\n          enableLabel={enableLabel}\r\n          width={`${settings.width?.size}${settings.width?.unit}`}\r\n          height={`${settings.height?.size}${settings.height?.unit}`}\r\n          layout={layout}\r\n          groupMode={groupMode}\r\n          reverse={reverse}\r\n          borderRadius={borderRadius}\r\n          borderWidth={borderWidth}\r\n          padding={padding}\r\n          sort={sort}\r\n          tickRotation={tickRotation}\r\n          bottomAxis={bottomAxis}\r\n          enableGridX={enableGridX}\r\n          enableGridY={enableGridY}\r\n        />\r\n      );\r\n    case PIE:\r\n      return (\r\n        <DynamicPieChart\r\n          widgetID={id}\r\n          margin={margin}\r\n          useCustomTooltips={useCustomTooltips}\r\n          yScaleMax={yScaleMax}\r\n          customColorSchemeChecker={customColorSchemeChecker}\r\n          customColors={customColors}\r\n          isMultiple={isMultiple}\r\n          dataSource={data}\r\n          colorScheme={colorScheme}\r\n          widget={widget}\r\n          width={`${settings.width?.size}${settings.width?.unit}`}\r\n          height={`${settings.height?.size}${settings.height?.unit}`}\r\n          innerRadius={innerRadius}\r\n          enableSliceLabels={enableSliceLabels}\r\n          padAngle={padAngle}\r\n          cornerRadius={cornerRadius}\r\n          sortByValue={sortByValue}\r\n          enableRadialLabels={enableRadialLabels}\r\n          sort={sort}\r\n          tickRotation={tickRotation}\r\n          bottomAxis={bottomAxis}\r\n          enableGridX={enableGridX}\r\n          enableGridY={enableGridY}\r\n        />\r\n      );\r\n    case TABLE:\r\n      return (\r\n        <DynamicTableWidget\r\n          widgetID={id}\r\n          useCustomTooltips={useCustomTooltips}\r\n          isCustomColor={isCustomColor}\r\n          colorArray={colorArray}\r\n          isMultiple={isMultiple}\r\n          dataSource={data}\r\n          widget={widget}\r\n          width={settings.width?.size}\r\n          sort={sort}\r\n          tickRotation={tickRotation}\r\n          bottomAxis={bottomAxis}\r\n          enableGridX={enableGridX}\r\n          enableGridY={enableGridY}\r\n        />\r\n      );\r\n\r\n    default:\r\n      return <></>;\r\n  }\r\n};\r\nconst mapStateToProps = state => ({\r\n  currentDataStorage: state.currentDataStorage\r\n});\r\nexport default connect(mapStateToProps)(AltrpDiagram);\r\n"],"sourceRoot":""}