{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/classes/AltrpModel.js","webpack:///./resources/modules/editor/src/js/components/widgets/BreadcrumbsWidget.js"],"names":["AltrpModel","data","this","cloneDeep","clone","isEmpty","name","defaultValue","get","has","value","getData","set","unset","window","Breadcrumbs","altrpLibs","Blueprint","GlobalStyles","createGlobalStyle","elementId","settings","styles","color","getResponsiveSetting","font","typographicControllerToStyles","current_color","current_font","BreadcrumbsWidget","props","state","element","getSettings","pending","getId","component","elementDecorator","baseRender","render","isEditor","href","icon","text","getBreadcrumbsItems","map","item","idx","newItem","replaceContentWithData","title","getCurrentModel","className","dangerouslySetInnerHTML","__html","length","path","onClick","e","preventDefault","history","altrpHistory","push","location","breadcrumbsProps","items","collapseFrom","popoverProps","portalClassName","Component"],"mappings":"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","file":"BreadcrumbsWidget.cbd6d570f89162e00b0f.bundle.js","sourcesContent":["/**\r\n * Имеет интерфейс для доступы к свойствам data (любой вложенности)\r\n * @class AltrpModel\r\n */\r\nimport cloneDeep from 'lodash.clonedeep';\r\nimport get from 'lodash.get';\r\nimport set from 'lodash.set';\r\nimport has from 'lodash.has';\r\nimport unset from 'lodash.unset';\r\nimport isEmpty from 'lodash.isempty';\r\n// import {cloneDeep, get, set, has, unset, isString, isEmpty} from \"lodash\";\r\n\r\nclass AltrpModel {\r\n  constructor(data = {}) {\r\n    this.data = cloneDeep(data);\r\n  }\r\n\r\n  /**\r\n   * Возваращает объект данных\r\n   * @params {boolean} clone - клонировать или ссылку на данные\r\n   * @return {{}}\r\n   */\r\n  getData(clone = true) {\r\n    if(clone){\r\n      return cloneDeep(this.data);\r\n    }\r\n    return this.data;\r\n  }\r\n\r\n  /**\r\n   * Пустой ли объект\r\n   */\r\n  isEmpty(){\r\n    return isEmpty(this.data);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  getProperty(name, defaultValue = '') {\r\n    return get(this.data, name, defaultValue);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  hasProperty(name, defaultValue = '') {\r\n    return has(this.data, name);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {{}}\r\n   */\r\n  setProperty(name, value = '') {\r\n    if(value instanceof AltrpModel){\r\n      value = value.getData(false);\r\n    }\r\n    return set(this.data, name, value);\r\n  }\r\n  /**\r\n   * Удаляет свойства name\r\n   * @params {string} name\r\n   * @return {*}\r\n   */\r\n  unsetProperty(name) {\r\n    return unset(this.data, name);\r\n  }\r\n}\r\nwindow.AltrpModel = AltrpModel;\r\nexport default AltrpModel\r\n","import {\r\n  getBreadcrumbsItems,\r\n  getResponsiveSetting,\r\n  isEditor,\r\n  replaceContentWithData\r\n} from '../../../../../front-app/src/js/helpers';\r\nimport {typographicControllerToStyles} from \"../../../../../front-app/src/js/helpers/styles\";\r\nconst {Breadcrumbs} = window.altrpLibs.Blueprint;\r\n\r\nconst GlobalStyles = createGlobalStyle`\r\n  ${({elementId, settings})=>{\r\n    let styles = `.altrp-portal.altrp-portal${elementId}{`;\r\n\r\n    styles += `.bp3-menu-item:not(.bp3-disabled){`;\r\n\r\n    let color = getResponsiveSetting(settings, 'color');\r\n\r\n    if(color && color.color){\r\n      styles += `color:${color.color};`;\r\n    }\r\n    let font = getResponsiveSetting(settings, 'font');\r\n    if(font){\r\n      styles += typographicControllerToStyles(font);\r\n    }\r\n    styles += `}`;\r\n    styles += `.bp3-menu-item:not(.bp3-disabled):hover{`;\r\n\r\n    color = getResponsiveSetting(settings, 'color', ':hover');\r\n\r\n    if(color && color.color){\r\n      styles += `color:${color.color};`;\r\n    }\r\n    font = getResponsiveSetting(settings, 'font', ':hover');\r\n\r\n    if(font){\r\n      styles += typographicControllerToStyles(font);\r\n    }\r\n    styles += `}`;\r\n\r\n\r\n    styles += `.bp3-menu-item.bp3-disabled{`;\r\n\r\n    let current_color = getResponsiveSetting(settings, 'current_color');\r\n\r\n    if(current_color && current_color.color){\r\n      styles += `color:${current_color.color};`;\r\n    }\r\n\r\n    let current_font = getResponsiveSetting(settings, 'current_font');\r\n\r\n    if(current_font){\r\n      styles += typographicControllerToStyles(current_font);\r\n    }\r\n\r\n    styles += `}`;\r\n\r\n    styles += '}';\r\n\r\n    return styles\r\n  }}\r\n`;\r\n\r\nclass BreadcrumbsWidget extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      settings: props.element.getSettings(),\r\n      pending: false\r\n    };\r\n    this.element = props.element;\r\n    this.elementId = props.element.getId();\r\n    props.element.component = this;\r\n    if (window.elementDecorator) {\r\n      window.elementDecorator(this);\r\n    }\r\n    if(props.baseRender){\r\n      this.render = props.baseRender(this);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return {[]}\r\n   */\r\n  getBreadcrumbsItems(){\r\n    let data  =[];\r\n    if(isEditor()){\r\n      data = [\r\n        {\r\n          href: '#',\r\n          icon: 'folder-close',\r\n          text: 'Main',\r\n        },\r\n        {\r\n          href: '#',\r\n          icon: 'derive-column',\r\n          text: 'Second Item',\r\n        },\r\n        {\r\n          icon: 'endorsed',\r\n          text: 'Last Item',\r\n        },\r\n      ];\r\n    } else {\r\n      data = getBreadcrumbsItems()\r\n      data = data.map((item, idx) =>{\r\n        const newItem = {\r\n          text: replaceContentWithData(item.title, this.props.element.getCurrentModel()),\r\n        };\r\n        if(item.icon){\r\n          newItem.icon = <span className=\"altrp-menu-item__icon bp3-icon\" dangerouslySetInnerHTML={{__html: item.icon}}/>\r\n        }\r\n        if(idx + 1 < data.length){\r\n          newItem.href = item.path\r\n          newItem.onClick = e => {\r\n            e.preventDefault();\r\n            if (isEditor() || !this.props.history) {\r\n              window.location.href = item.path\r\n              return\r\n            }\r\n            window.altrpHistory?.push(item.path)\r\n          };\r\n        }\r\n        return newItem;\r\n      });\r\n    }\r\n    return  data;\r\n  }\r\n\r\n  render() {\r\n    const breadcrumbsProps = {\r\n      items: this.getBreadcrumbsItems(),\r\n      collapseFrom: this.element.getResponsiveSetting('collapse') || 'start',\r\n      popoverProps: {\r\n        portalClassName: `altrp-portal altrp-portal${this.elementId}`,\r\n      },\r\n    };\r\n    return <>\r\n      <GlobalStyles settings={this.element.getSettings()} elementId={this.elementId}/>\r\n      <Breadcrumbs {...breadcrumbsProps}/>\r\n    </>;\r\n  }\r\n}\r\n\r\nexport default BreadcrumbsWidget;\r\n"],"sourceRoot":""}