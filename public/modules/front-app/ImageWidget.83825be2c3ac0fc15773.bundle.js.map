{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/classes/AltrpModel.js","webpack:///./resources/modules/editor/src/js/components/altrp-image/Skeleton.js","webpack:///./resources/modules/editor/src/js/components/altrp-image/ImagePlaceholder.js","webpack:///./resources/modules/editor/src/js/components/altrp-image/AltrpImage.js","webpack:///./resources/modules/editor/src/js/components/widgets/ImageWidget.js"],"names":["AltrpModel","data","this","cloneDeep","clone","isEmpty","name","defaultValue","get","has","value","getData","set","unset","window","defaultBaseColor","SkeletonSpan","styled","duration","delay","keyframes","Math","floor","undefined","color","highlightColor","props","className","_","isNumber","width","settings","aspect_ratio_size","getResponsiveSetting","Number","height","indexOf","style","custom_aspect","isString","mediaWidth","mediaHeight","altrpHelpers","isEditor","isSSR","renderAsset","AltrpImage","imageRef","React","createRef","visible","element","lazy","altrpImageLazy","state","update","timeoutId","setTimeout","setState","clearTimeout","prevProps","prevState","current","getRoot","popupGUID","popupTrigger","popupID","scrollPosition","scroller","mainScrollbars","document","querySelector","checkElementInViewBox","media","image","noDefault","placeholderStyles","File","default","Object","keys","length","url","assetType","background","placeholder","main_color","ref","getSettings","altrpSkeletonColor","altrpSkeletonHighlightColor","cloneElement","id","Fragment","Component","reactRedux","connect","globalDefaults","push","Link","ImageWidget","component","elementDecorator","baseRender","render","link","image_link","cursorPointer","background_image","classNames","content_media","model","hasCardModel","getCardModel","currentModel","getContent","isObject","getDataByPath","altrpImage","toPrevPage","onClick","history","back","linkUrl","parseURLTemplate","getCurrentModel","linkProps","openInNew","target","tag","href","to"],"mappings":"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","file":"ImageWidget.83825be2c3ac0fc15773.bundle.js","sourcesContent":["/**\r\n * Имеет интерфейс для доступы к свойствам data (любой вложенности)\r\n * @class AltrpModel\r\n */\r\nimport cloneDeep from 'lodash.clonedeep';\r\nimport get from 'lodash.get';\r\nimport set from 'lodash.set';\r\nimport has from 'lodash.has';\r\nimport unset from 'lodash.unset';\r\nimport isEmpty from 'lodash.isempty';\r\n// import {cloneDeep, get, set, has, unset, isString, isEmpty} from \"lodash\";\r\n\r\nclass AltrpModel {\r\n  constructor(data = {}) {\r\n    this.data = cloneDeep(data);\r\n  }\r\n\r\n  /**\r\n   * Возваращает объект данных\r\n   * @params {boolean} clone - клонировать или ссылку на данные\r\n   * @return {{}}\r\n   */\r\n  getData(clone = true) {\r\n    if(clone){\r\n      return cloneDeep(this.data);\r\n    }\r\n    return this.data;\r\n  }\r\n\r\n  /**\r\n   * Пустой ли объект\r\n   */\r\n  isEmpty(){\r\n    return isEmpty(this.data);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  getProperty(name, defaultValue = '') {\r\n    return get(this.data, name, defaultValue);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  hasProperty(name, defaultValue = '') {\r\n    return has(this.data, name);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {{}}\r\n   */\r\n  setProperty(name, value = '') {\r\n    if(value instanceof AltrpModel){\r\n      value = value.getData(false);\r\n    }\r\n    return set(this.data, name, value);\r\n  }\r\n  /**\r\n   * Удаляет свойства name\r\n   * @params {string} name\r\n   * @return {*}\r\n   */\r\n  unsetProperty(name) {\r\n    return unset(this.data, name);\r\n  }\r\n}\r\nwindow.AltrpModel = AltrpModel;\r\nexport default AltrpModel\r\n","import styled, { keyframes} from 'styled-components';\r\n\r\nexport const defaultBaseColor = \"#eee\";\r\n\r\nexport const defaultHighlightColor = \"#f5f5f5\";\r\n\r\nexport const skeletonKeyframes = (duration, delay) => keyframes`\r\n  0% {\r\n    background-position: -200px 0;\r\n  }\r\n  ${\r\n  delay > 0\r\n    ? `${Math.floor((1 / (duration + delay)) * duration * 100)}% {\r\n    background-position: calc(200px + 100%) 0;\r\n  }`\r\n    : undefined\r\n}\r\n  100% {\r\n    background-position: calc(200px + 100%) 0;\r\n  }\r\n`;\r\nconst SkeletonSpan = styled.span`\r\n  animation: ${skeletonKeyframes} 1.2s ease-in-out infinite;\r\n  background-color: ${({color})=>`${color || defaultBaseColor}`};\r\n  background-size: 200px 100%;\r\n  background-repeat: no-repeat;\r\n  background-image: linear-gradient(90deg, ${({highlightColor, color})=>{\r\n    return `${color || defaultBaseColor}, ${highlightColor || defaultHighlightColor}, ${color || defaultBaseColor}`;\r\n  }});\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  height: 100%;\r\n`;\r\nconst Skeleton = (props) => <div className={props.className}><SkeletonSpan {...props} className=\"altrp-skeleton__span\"/></div>\r\nexport default Skeleton;\r\n","import styled from 'styled-components';\r\nimport {getResponsiveSetting} from \"../../../../../front-app/src/js/helpers\";\r\n\r\nconst ImagePlaceholder = styled.div`& {\r\n  position: relative;\r\n  max-width: 100%;\r\n  overflow: hidden;\r\n  width:${props => {\r\n  if (_.isNumber(props.width)) {\r\n    return props.width + 'px';\r\n  }\r\n  return props.width ? props.width : '100%'\r\n}};\r\n${(props) => {\r\n  const {settings} = props;\r\n  const aspect_ratio_size = getResponsiveSetting(settings, 'aspect_ratio_size');\r\n  if(Number(aspect_ratio_size) !== 0 && aspect_ratio_size === 'custom'|| Number(aspect_ratio_size)){\r\n    return 'height:auto;'\r\n  }\r\n  if(! props.height || props.height.indexOf('%') !== -1) {\r\n    return 'height:auto;'\r\n  }\r\n  return `height:${props.height ? props.height : 'auto'};`;\r\n}}\r\n\r\n  background-color: ${props => props.color ? props.color : '#fff'};\r\n}\r\n&::before{\r\n  display: block;\r\n  content: '';\r\n  width: 100%;\r\n${(props) => {\r\n  const {settings, height} = props;\r\n  let style = '';\r\n  const aspect_ratio_size = getResponsiveSetting(settings, 'aspect_ratio_size');\r\n  if(Number(aspect_ratio_size) !== 0) {\r\n    if(aspect_ratio_size === 'custom') {\r\n      let custom_aspect = getResponsiveSetting(settings, 'custom_aspect');\r\n      custom_aspect = Number(custom_aspect) || 100;\r\n      style += `padding-top:${custom_aspect}%;`;\r\n    } else if(Number(aspect_ratio_size)){\r\n      style += `padding-top:${aspect_ratio_size}%;`;\r\n    }\r\n    return style;\r\n  }\r\n  if (height && _.isString(height) && height.indexOf('%') === -1) {\r\n    return style;\r\n  }\r\n  if (Number(props.mediaWidth) && Number(props.mediaHeight)) {\r\n    style += `padding-top:${(props.mediaHeight / props.mediaWidth) * 100}%;`\r\n  }\r\n  return style;\r\n}};\r\n}\r\n&& .altrp-skeleton,\r\n&& .altrp-image{\r\n  position:absolute;\r\n  top:0;\r\n  left:0;\r\n  right:0;\r\n  bottom:0;\r\n  height:100%;\r\n  width:100%;\r\n}\r\n`;\r\n\r\nexport default ImagePlaceholder;\r\n","import Skeleton from './Skeleton';\r\nimport ImagePlaceholder from \"./ImagePlaceholder\";\r\nimport {checkElementInViewBox} from \"../../../../../front-app/src/js/helpers/elements\";\r\nconst {isEditor, isSSR, renderAsset} = window.altrpHelpers;\r\n\r\nclass AltrpImage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.imageRef = React.createRef();\r\n    let visible = true;\r\n    if(isSSR() && ! props.element?.getResponsiveSetting('lazyload_disable')){\r\n      visible = false;\r\n    } else if (isEditor() || props.lazy === false) {\r\n\r\n    } else if (window.altrpImageLazy\r\n        && window.altrpImageLazy !== 'none'\r\n        && props.element\r\n        && ! props.element?.getResponsiveSetting('lazyload_disable')) {\r\n      visible = false;\r\n    }\r\n    this.state = {\r\n      visible,\r\n      update: 0,\r\n    };\r\n    this.timeoutId = setTimeout(() => this.setState(state => ({...state, update: state.update++})), 500);\r\n  }\r\n\r\n  /**\r\n   * очищаем обновление\r\n   */\r\n  componentWillUnmount() {\r\n    clearTimeout(this.timeoutId);\r\n  }\r\n\r\n  /**\r\n   * Проверим нужно ли обновить видимость\r\n   * @param {{}} prevProps\r\n   * @param {{}} prevState\r\n   */\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if(this.state.visible){\r\n      clearTimeout(this.timeoutId);\r\n    }\r\n    if (this.state.visible || ! this.imageRef.current) {\r\n      return;\r\n    }\r\n    if(this.props?.element?.getRoot()?.popupGUID && this.props.element.getRoot().popupGUID === this.props.popupTrigger.popupID){\r\n      this.setState(state => ({...state, visible: true}));\r\n    }\r\n    if (prevProps.scrollPosition === this.props.scrollPosition && prevState.update === this.state.update) {\r\n      return;\r\n    }\r\n    let scroller = window.mainScrollbars;\r\n    if(! scroller){\r\n      scroller = document.querySelector('.front-app-content');\r\n    }\r\n    if(! scroller){\r\n      scroller = document.querySelector('.front-app');\r\n    }\r\n    if (this.imageRef.current && checkElementInViewBox(this.imageRef.current, scroller)) {\r\n      clearTimeout(this.timeoutId);\r\n      this.setState(state => ({...state, visible: true}));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let media = {...this.props.image};\r\n    const {visible} = this.state;\r\n    const noDefault = this.props.noDefault || false;\r\n    const placeholderStyles = {};\r\n\r\n    let width = this.props.width;\r\n    let height = this.props.height;\r\n    if (! isSSR() && this.props.image instanceof File) {\r\n      media = this.props.image\r\n    } else {\r\n      if (this.props.default) {\r\n        if ((Object.keys(media).length === 0)) {\r\n          media = this.props.default;\r\n        }\r\n      } else if (noDefault) {\r\n        return \"\"\r\n      } else {\r\n        media.url = media.url || '/img/nullImage.png';\r\n        media.name = media.name || 'null';\r\n        media.assetType = media.assetType || undefined;\r\n      }\r\n    }\r\n    let image = renderAsset(media);\r\n    if(visible || window.altrpImageLazy === 'skeleton'){\r\n      placeholderStyles.background = 'transparent';\r\n    }\r\n\r\n    let placeholder = <ImagePlaceholder color={media.main_color}\r\n                                        className={'altrp-image-placeholder '}\r\n                                        ref={this.imageRef}\r\n                                        settings={this.props.element?.getSettings() || {}}\r\n                                        height={height}\r\n                                        width={width}\r\n                                        style={placeholderStyles}\r\n                                        mediaWidth={media.width || 100}\r\n                                        mediaHeight={media.height || 75}>\r\n      {window.altrpImageLazy === 'skeleton'\r\n        && ! visible\r\n        &&\r\n          <Skeleton className=\"altrp-skeleton\"\r\n                    color={window.altrpSkeletonColor}\r\n                    highlightColor={window.altrpSkeletonHighlightColor}/>\r\n\r\n      }\r\n      {visible && React.cloneElement(image, {\r\n        className: this.props.className,\r\n        id: this.props.id || null,\r\n        style: this.props.style,\r\n      })}\r\n      </ImagePlaceholder>;\r\n\r\n    return <React.Fragment>\r\n      {placeholder}\r\n    </React.Fragment>\r\n  }\r\n}\r\n\r\nlet _export;\r\nif (isEditor()) {\r\n  _export = AltrpImage;\r\n} else {\r\n\r\n  function mapStateToProps(state) {\r\n    return {\r\n      scrollPosition: state.scrollPosition,\r\n      popupTrigger: state.popupTrigger,\r\n    };\r\n  }\r\n\r\n  _export = window.reactRedux.connect(mapStateToProps)(AltrpImage)\r\n}\r\nexport default _export;\r\n","import {\r\n  getDataByPath,\r\n  isEditor, parseURLTemplate\r\n} from \"../../../../../front-app/src/js/helpers\";\r\nimport AltrpImage from \"../altrp-image/AltrpImage\";\r\n\r\n(window.globalDefaults = window.globalDefaults || []).push(`\r\n  .altrp-image {\r\n    margin-top: 0;\r\n    margin-right: 0;\r\n    margin-bottom: 0;\r\n    margin-left: 0;\r\n    padding-top: 0;\r\n    padding-right: 0;\r\n    padding-bottom: 0;\r\n    padding-left: 0;\r\n    opacity: 1;\r\n    object-fit: cover;\r\n    border-color: rgb(50,168,82);\r\n    border-radius: 0;\r\n  }\r\n\r\n  .altrp-image-container {\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n`)\r\n\r\nconst Link = window.Link\r\nclass ImageWidget extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      settings: props.element.getSettings(),\r\n    };\r\n    props.element.component = this;\r\n    if (window.elementDecorator) {\r\n      window.elementDecorator(this);\r\n    }\r\n    if(props.baseRender){\r\n      this.render = props.baseRender(this);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { element } = this.props;\r\n    const link = this.state.settings.image_link || {};\r\n    const cursorPointer = this.props.element.getSettings(\"cursor_pointer\", false);\r\n    const background_image = this.props.element.getSettings(\r\n      \"background_image\",\r\n      {}\r\n    );\r\n    let classNames = \"altrp-image-container\";\r\n    let media = this.state.settings.content_media;\r\n\r\n    if(cursorPointer) {\r\n      classNames += \" cursor-pointer\"\r\n    }\r\n\r\n    /**\r\n     * Для карточки модель может быть другой\r\n     * @type {AltrpModel}\r\n     */\r\n    let model = element.hasCardModel()\r\n      ? element.getCardModel()\r\n      : this.props.currentModel;\r\n    /**\r\n     * Возьмем данные из окружения\r\n     */\r\n    if(this.getContent('raw_url')){\r\n      media = {\r\n        url: this.getContent('raw_url'),\r\n        assetType: \"media\",\r\n      }\r\n    } else if (\r\n      this.getContent(\"content_path\") &&\r\n      _.isObject(getDataByPath(this.getContent(\"content_path\"), null, model))\r\n    ) {\r\n      media = getDataByPath(this.getContent(\"content_path\"), null, model);\r\n      /**\r\n       * Проверим массив ли с файлами content_path\r\n       */\r\n      if (_.get(media, \"0\") instanceof File) {\r\n        media = _.get(media, \"0\");\r\n      } else {\r\n        media.assetType = \"media\";\r\n      }\r\n    } else if (\r\n      this.getContent(\"content_path\") &&\r\n      _.isString(getDataByPath(this.getContent(\"content_path\"), null, model))\r\n    ) {\r\n      media = getDataByPath(this.getContent(\"content_path\"), null, model);\r\n      media = {\r\n        assetType: \"media\",\r\n        url: media,\r\n        name: \"null\"\r\n      };\r\n    } else if (this.getContent('default_url') && _.isString(getDataByPath(this.getContent(\"default_url\"), null, model))){\r\n      media = {\r\n        assetType: \"media\",\r\n        url: getDataByPath(this.getContent(\"default_url\"), null, model),\r\n        name: \"default\"\r\n      };\r\n    }\r\n    let width = this.props.element.getResponsiveSetting('width_size');\r\n    let height = this.props.element.getResponsiveSetting('height_size');\r\n    width = _.get(width, 'size', '100') + _.get(width, 'unit', '%');\r\n    if(_.get(height, 'size')){\r\n      height = _.get(height, 'size') + _.get(height, 'unit', '%');\r\n    } else {\r\n      height = '';\r\n    }\r\n\r\n    if(_.get(this.props.element.getResponsiveSetting('height_size'), 'size', '100') === \"0\") {\r\n      height = \"\"\r\n    }\r\n\r\n    let altrpImage = (\r\n      <AltrpImage\r\n        image={media}\r\n        width={width}\r\n        element={this.props.element}\r\n        height={height}\r\n        className={\r\n          \"altrp-image\" +\r\n          (background_image ? \" altrp-background-image\" : \"\")\r\n        }\r\n      />\r\n    );\r\n\r\n    if (link.toPrevPage && !isEditor()) {\r\n      return (\r\n        <div\r\n          className={classNames}\r\n          onClick={() => {\r\n            history.back();//todo: реализовать для h-altrp\r\n          }}\r\n        >\r\n          {altrpImage}\r\n        </div>\r\n      );\r\n    } else {\r\n      let linkUrl = link.url || '';\r\n      linkUrl = parseURLTemplate(linkUrl, this.props.element.getCurrentModel().getData());\r\n      const linkProps = {\r\n\r\n      };\r\n      if(link.openInNew){\r\n        linkProps.target = '_blank';\r\n      }\r\n\r\n      return (\r\n        <div\r\n          className={classNames}\r\n        >\r\n          {(linkUrl && ! isEditor()) ? (\r\n            link.tag === \"a\" || window['h-altrp'] ? (\r\n              <a href={linkUrl} {...linkProps}>{altrpImage}</a>\r\n            ) : (\r\n              <Link to={linkUrl} {...linkProps}>{altrpImage}</Link>\r\n            )\r\n          ) : (\r\n            altrpImage\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n// const path = window.location.pathname;\r\n// let _export;\r\n// if (path.includes(\"reports\")) {\r\n//   _export = ImageWidget;\r\n// } else {\r\n//   _export = withRouter(ImageWidget);\r\n// }\r\nexport default ImageWidget;\r\n"],"sourceRoot":""}