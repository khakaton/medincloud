{"version":3,"sources":["webpack:///./resources/modules/admin/src/components/altrp-select/AltrpSelect.js","webpack:///./resources/modules/editor/src/js/classes/modules/TemplateLoader.js","webpack:///./resources/modules/editor/src/js/components/altrp-query-component/altrp-query-component.js","webpack:///./resources/modules/editor/src/js/components/altrp-table/components/PageButton.js","webpack:///./resources/modules/editor/src/js/components/altrp-table/components/PaginationComponent.js","webpack:///./resources/modules/editor/src/js/components/altrp-table/components/Pagination.js","webpack:///./resources/modules/front-app/src/js/classes/FrontElementsFabric.js","webpack:///./resources/modules/editor/src/js/components/widgets/styled-components/ElementWrapperComponent.js","webpack:///./resources/modules/front-app/src/js/constants/DEFAULT_REACT_ELEMENTS.js","webpack:///./resources/modules/front-app/src/js/components/ElementWrapper.js","webpack:///./resources/modules/front-app/src/js/store/elements-storage/actions.js"],"names":["renderScrollbar","props","autoHeight","children","AltrpSelect","loadOptions","searchString","callback","options","optionsResource","search","setState","state","optionsRoute","Resource","route","selectRef","React","customStyles","control","base","boxShadow","borderColor","isFocused","menuPortal","zIndex","selectProps","onChange","this","placeholder","noOptionsMessage","styles","menuPortalTarget","document","body","menuPlacement","menuPosition","onKeyDown","components","MenusList","captureMenuScroll","isDisabled","ref","_","assign","isArray","value","map","item","_i","label","isString","isNumber","isObject","forEach","option","find","o","Component","TemplateLoader","resource","templatesCache","AltrpModel","get","window","__altrp_settings__","templateId","force","update","Number","hasProperty","Promise","resolve","reject","pendingCallbacks","push","statuses","template","setProperty","getProperty","loadTemplate","templateData","JSON","parse","frontElementsFabric","templateLoader","_status","_error","_latestData","_data","useQuerySettings","forceFetchOnMount","refetchOnWindowFocus","query","data","settings","updateToken","defaultSortSettings","tables_columns","column","column_is_default_sorted","order_by","accessor","order","useState","page","setPage","sortSetting","setSortSettings","filterSetting","setFilterSettings","fetchModels","useCallback","key","groupBy","choose_datasource","queryData","filterSettingJSON","stringify","altrpUdateToken","length","filters","getQueried","pageSize","usePaginatedQuery","dataSourceName","getParams","status","resolvedData","latestData","error","useEffect","hasMore","queryCache","useQuery","getResource","isEmpty","setAltrpIndex","finalData","childrenProps","child","PageButton","index","pageIndex","gotoPage","className","onClick","styled","width_count_item","getResponsiveSetting","height_count_item","size","unit","Pagination","nextPage","previousPage","setPageSize","pageCount","widgetId","inner_page_count_options","inner_page_type","current_page_text","inner_page_count","next_icon","prev_icon","first_last_buttons_count","middle_buttons_count","posts_pagination_type","is_with_ellipsis","countOptions","useMemo","split","pageText","replace","generateButtonsArray","Array","hide_pre_page_button","disabled","dangerouslySetInnerHTML","__html","prev_text","renderAssetIcon","hide_pages_buttons_button","hide_next_page_button","next_text","hide_page_input","type","defaultValue","e","target","hide_pagination_select","classNamePrefix","isSearchable","FrontElementsFabric","object","parent","pageId","models","element","FrontElement","addModelInfo","modelName","modelId","model","frontElementsManager","checkElementExists","name","parseData","id","lastElement","dynamicContentSettings","setParent","clonedElement","cloneDeep","updateParents","c","ElementWrapperDivComponent","div","layout_column_width","_export","altrpHelpers","altrpCompare","altrpRandomId","conditionsChecker","isEditor","replaceContentWithData","setTitle","ElementWrapper","updateStore","currentModel","appStore","getState","currentUser","currentDataStorage","elementDisplay","getSettings","reactElement","elementId","getId","wrapper","elementWrapperRef","createRef","elementRef","dispatch","addElement","errorInfo","frontApp","onWidgetMount","isFunction","updateFonts","checkElementDisplay","stylesModule","stylesContainer","current","getElementsByClassName","prevProps","prevState","getName","title","currentTitle","altrpPage","changeCurrentPageProperty","conditions","modelField","conditional_model_field","operator","conditional_other_operator","conditional_other_condition_value","getCurrentModel","formsStore","formId","logic","formConditions","display","field_id","hide_on_wide_screen","hide_on_desktop","hide_on_laptop","hide_on_tablet","hide_on_big_phone","hide_on_small_phone","isFixed","hide_on_trigger","tooltip_position","tooltip_text","classes","getType","getPrefixClasses","getData","style","whiteSpace","toString","componentStack","width","CSSId","ContentComponent","getComponentClass","content","createElement","rootElement","getChildren","match","altrpresponses","altrpPageState","altrpMeta","currentScreen","baseRender","history","getTemplateType","WrapperComponent","NavComponent","wrapperProps","DEFAULT_REACT_ELEMENTS","AltrpTooltip","position","withRouter","reactRedux","connect","forwardRef","ADD_ELEMENT","CLEAR_ELEMENTS","elementComponent","clearElements"],"mappings":"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","file":"4766.9fcef575fc7814480424.bundle.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport AsyncSelect from \"react-select/async\";\r\nimport Resource from \"../../../../editor/src/js/classes/Resource\";\r\nimport Select from \"react-select\";\r\nimport { Scrollbars } from \"react-custom-scrollbars\";\r\nimport {parseParamsFromString, parseURLTemplate} from \"../../../../front-app/src/js/helpers\";\r\n\r\nexport const renderScrollbar = (props) => {\r\n  return <Scrollbars autoHeight >{props.children}</Scrollbars>;\r\n};\r\n\r\nclass AltrpSelect extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      options: props.options || [],\r\n    };\r\n    if(props.optionsRoute){\r\n      this.optionsResource = new Resource({route: props.optionsRoute});\r\n    }\r\n    this.selectRef = React.createRef();\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  async componentDidMount(){\r\n\r\n  }\r\n  /**\r\n   * изменение значения\r\n   */\r\n  onChange(){\r\n\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  loadOptions = async (searchString, callback)=>{\r\n    let options = [];\r\n    if(this.optionsResource){\r\n      options = await this.optionsResource.search(searchString);\r\n    }\r\n    this.setState(state=>({\r\n      ...state,\r\n      options\r\n    }));\r\n    return callback(options);\r\n  };\r\n\r\n  render(){\r\n    const customStyles = {\r\n      control: (base, state) => ({\r\n        ...base,\r\n        boxShadow: \"none\",\r\n        borderColor: state.isFocused ? \"hsl(0,0%,80%)\" : \"hsl(0,0%,80%)\",\r\n        \"&:hover\": {\r\n          borderColor: \"hsl(0,0%,80%)\"\r\n        }\r\n      }),\r\n      menuPortal: base => ({ ...base, zIndex: 99999 }),\r\n      // option: (provided, state) => ({\r\n      //   ...provided,\r\n      //   backgroundColor: state.isSelected ?\r\n      //     background.selected.color :\r\n      //     state.isFocused ? background.focused.color : background.normal.color\r\n      // })\r\n    };\r\n\r\n    let selectProps = {\r\n      onChange: this.onChange,\r\n      options: this.state.options || [],\r\n      placeholder: this.props.placeholder,\r\n      loadOptions: this.loadOptions,\r\n      noOptionsMessage: this.props.noOptionsMessage || (() => \"not found\"),\r\n      styles: customStyles,\r\n      menuPortalTarget: document.body,\r\n      menuPlacement: 'auto',\r\n      menuPosition: 'absolute',\r\n      onKeyDown : this.onKeyDown,\r\n      components: { MenusList: renderScrollbar },\r\n      captureMenuScroll: false,\r\n      isDisabled: this.state.isDisabled,\r\n      ref: this.selectRef,\r\n    };\r\n\r\n    _.assign(selectProps, this.props);\r\n\r\n    if(_.isArray(selectProps.value)){\r\n      selectProps.value = selectProps.value.map(item => {\r\n        let _i = {\r\n          label: '',\r\n          value: '',\r\n        };\r\n        if(_.isString(item) || _.isNumber(item)){\r\n          _i.value = item;\r\n          _i.label = item;\r\n        } else if(_.isObject(item)) {\r\n          return item;\r\n        }\r\n        if(_.isArray(selectProps.options)){\r\n          selectProps.options.forEach(option=>{\r\n            if(option.value === _i.value){\r\n              _i = {...option,};\r\n            }\r\n          });\r\n        }\r\n        return _i;\r\n      });\r\n    }\r\n    if(selectProps.value && ! _.isObject(selectProps.value)){\r\n      selectProps.value = selectProps.options.find(o=>{\r\n        return o.value == selectProps.value;\r\n      });\r\n    }\r\n    if( this.optionsResource){\r\n      return <AsyncSelect {...selectProps} />\r\n    } else {\r\n      return <Select {...selectProps} />\r\n    }\r\n  }\r\n}\r\n\r\nexport default AltrpSelect\r\n\r\n\r\n\r\n","import Resource from \"../Resource\";\r\nimport AltrpModel from \"../AltrpModel\";\r\nimport frontElementsFabric from \"../../../../../front-app/src/js/classes/FrontElementsFabric\";\r\n\r\n/**\r\n * @class TemplateLoader\r\n */\r\nclass TemplateLoader {\r\n  /**\r\n   * Хранилище статусов получения данных, чтобы не делать много параллельных запросов\r\n   * @type {{}}\r\n   */\r\n  static statuses = {};\r\n  /**\r\n   * Хранилище обратных вызовов, чтобы не делать много параллельных запросов\r\n   * @type {{}}\r\n   */\r\n  static pendingCallbacks = {};\r\n\r\n\r\n  constructor(){\r\n    this.resource = new Resource({route: '/ajax/templates'});\r\n    this.templatesCache = new AltrpModel(_.get(window.__altrp_settings__, 'templates_data',{}));\r\n  }\r\n\r\n  /**\r\n   * Загрузить шаблон по ид\r\n   * @param {integer | string} templateId\r\n   * @param {boolean} force\r\n   * @param {*} templateId\r\n   * @return {[]}\r\n   */\r\n  async loadTemplate(templateId, force = false){\r\n\r\n    let update = force;\r\n    templateId = Number(templateId) ? Number(templateId) : templateId;\r\n\r\n    if(! update){\r\n      update = ! this.templatesCache.hasProperty(templateId);\r\n    }\r\n\r\n    if(_.get(TemplateLoader, `statuses.${templateId}`) === 'loading'){\r\n      return new Promise((resolve, reject) => {\r\n        TemplateLoader.pendingCallbacks[templateId] = TemplateLoader.pendingCallbacks[templateId] || [];\r\n        TemplateLoader.pendingCallbacks[templateId].push(resolve);\r\n      })\r\n    }\r\n\r\n    TemplateLoader.statuses[templateId] = 'loading';\r\n\r\n    try {\r\n\r\n      let template = null;\r\n\r\n      if (update) {\r\n        template = await this.resource.get(templateId);\r\n        this.templatesCache.setProperty(templateId, template);\r\n      } else {\r\n        template = this.templatesCache.getProperty(templateId);\r\n      }\r\n\r\n      if(_.isArray(TemplateLoader.pendingCallbacks[templateId])){\r\n        TemplateLoader.pendingCallbacks[templateId].forEach(callback=>{\r\n          callback(template);\r\n        });\r\n      }\r\n\r\n      TemplateLoader.statuses[templateId] = 'loaded';\r\n      TemplateLoader.pendingCallbacks[templateId] = [];\r\n      return template;\r\n\r\n    }catch(error){\r\n      if(_.isArray(TemplateLoader.pendingCallbacks[templateId])){\r\n        TemplateLoader.pendingCallbacks[templateId].forEach(callback=>{\r\n          callback(null);\r\n        });\r\n      }\r\n      TemplateLoader.statuses[templateId] = 'loaded';\r\n      TemplateLoader.pendingCallbacks[templateId] = [];\r\n      return null;\r\n    }\r\n\r\n    //return Promise.resolve(this.templatesCache.getProperty(templateId));\r\n  }\r\n\r\n  /**\r\n   * Загрузить шаблон по ид\r\n   * @param {integer | string} templateId\r\n   * @param {boolean} force\r\n   * @param {*} templateId\r\n   */\r\n  async loadParsedTemplate(templateId, force = false){\r\n\r\n    if(! templateId){\r\n      return null;\r\n    }\r\n    templateId = Number(templateId) ? Number(templateId) : templateId;\r\n\r\n    let templateData = _.get((await this.loadTemplate(templateId, force)), 'data');\r\n    templateData = JSON.parse(templateData);\r\n\r\n    return frontElementsFabric.parseData(templateData);\r\n  }\r\n\r\n}\r\n\r\n window.templateLoader =  new TemplateLoader();\r\n\r\nexport default window.templateLoader;\r\n","import React, {useState, useCallback, useEffect} from \"react\";\r\nimport Query from \"../../classes/Query\";\r\nimport {useQuery, usePaginatedQuery, queryCache} from  \"react-query\";\r\nimport {setAltrpIndex} from \"../../../../../front-app/src/js/helpers\";\r\n\r\n/**\r\n * Компонент для получения данных при помощи запросов\r\n * @param {{\r\n *  children: array,\r\n *  data: array,\r\n *  query: {Query}\r\n * }} props\r\n * @return {React.Component}\r\n * @constructor\r\n */\r\nconst AltrpQueryComponent = (props)=>{\r\n  let _data = [], _status, _error, _latestData;\r\n\r\n  const useQuerySettings = {\r\n    forceFetchOnMount: true,\r\n    refetchOnWindowFocus: true,\r\n  };\r\n\r\n  let {children = [], query, data, settings, updateToken} = props;\r\n  /**\r\n   * проверим есть ли настройки для сортировок по умолчанию\r\n   */\r\n  const defaultSortSettings =  {};\r\n  settings.tables_columns && settings.tables_columns.forEach(column => {\r\n    if(column.column_is_default_sorted && ! defaultSortSettings.order_by){\r\n      defaultSortSettings.order_by = column.accessor;\r\n      defaultSortSettings.order = _.get(column, 'column_is_default_sorted_direction', 'ASC')\r\n    }\r\n  });\r\n  const [page, setPage] = useState(1);\r\n\r\n  const [sortSetting, setSortSettings] = useState(defaultSortSettings);\r\n  const [filterSetting, setFilterSettings] = useState({});\r\n  const fetchModels = useCallback(async (key, page = 1, sortSetting, filterSetting, params, updateToken, groupBy) => {\r\n    if(settings.choose_datasource === 'datasource'){\r\n      return data;\r\n    }\r\n    let queryData = {page};\r\n    const filterSettingJSON = JSON.stringify(filterSetting);\r\n    if(sortSetting){\r\n      queryData = _.assign(sortSetting, queryData);\r\n    }\r\n    if(updateToken){\r\n      queryData.altrpUdateToken = updateToken;\r\n    }\r\n    if(groupBy){\r\n      queryData.order = 'ASC';\r\n      queryData.order_by = groupBy;\r\n    }\r\n    if(filterSettingJSON.length > 2){\r\n      queryData.filters = filterSettingJSON;\r\n    }\r\n    return await query.getQueried(queryData)\r\n  });\r\n\r\n  if(query.pageSize){\r\n    /**\r\n     * Если есть пагинация\r\n     */\r\n    const {\r\n      status,\r\n      resolvedData,\r\n      latestData,\r\n      error,\r\n    } = usePaginatedQuery([query.dataSourceName, page, sortSetting, filterSetting, query.getParams(), updateToken],\r\n        fetchModels,\r\n        useQuerySettings);\r\n    _data = resolvedData ? resolvedData : _data;\r\n    _status = status;\r\n    _error = error;\r\n    _latestData = latestData;\r\n    useEffect(() => {\r\n      if (latestData?.hasMore) {\r\n        queryCache.prefetchQuery([query.dataSourceName, page + 1], fetchModels);\r\n      }\r\n    }, [latestData, fetchModels, page, sortSetting, filterSetting, updateToken]);\r\n  }else {\r\n    /**\r\n     * Если нет пагинации\r\n     */\r\n    const {status, data, error,} = useQuery([query.dataSourceName,query.getParams(), updateToken],\r\n      (updateToken) => {\r\n        return query.getResource().getQueried({...sortSetting,filters: filterSettingJSON, groupBy})\r\n      }, useQuerySettings);\r\n    _data = data;\r\n    _status = status;\r\n    _error = error;\r\n  }\r\n  if(_.isObject(_data) && ! _.isArray(_data)){\r\n    _data = [_data];\r\n  }\r\n  if(! _data.length){\r\n    _data = data;\r\n  }\r\n\r\n  if(! _.isArray(children)){\r\n    children = [children];\r\n  }\r\n\r\n  if(_.isEmpty(data)){\r\n    data = _data\r\n  }\r\n  React.useEffect(()=>{\r\n    setAltrpIndex(data)\r\n  }, [data]);\r\n  let finalData = React.useMemo(()=>{\r\n    if(! _.isArray(data)){\r\n      if(_.isObject(data)){\r\n        return [data]\r\n      }\r\n      return [];\r\n    }\r\n    return data;\r\n  }, [data]);\r\n  const childrenProps = {...props,\r\n    data: finalData,\r\n    _status,\r\n    setFilterSettings,\r\n    setSortSettings,\r\n    filterSetting,\r\n    sortSetting,\r\n    _latestData,\r\n    setPage,\r\n    page,\r\n    _error};\r\n  return children.map(child => React.cloneElement(child, {...childrenProps, key:child.key}));\r\n\r\n};\r\n\r\nexport default AltrpQueryComponent","\r\nexport default function PageButton({ index, pageIndex, gotoPage }) {\r\n  return <button\r\n      className={`altrp-pagination-pages__item ${(index === pageIndex) ? 'active' : ''}`}\r\n      onClick={() => gotoPage(index)}\r\n  >\r\n    {index + 1}\r\n  </button>\r\n}","import styled from 'styled-components';\r\nimport {getResponsiveSetting} from \"../../../../../../front-app/src/js/helpers\";\r\n\r\nconst PaginationComponent = styled.div`\r\n& .altrp-pagination-pages__item{\r\n${({settings}) => {\r\n  let styles = '';\r\n  const width_count_item = getResponsiveSetting(settings, 'width_count_item');\r\n  const height_count_item = getResponsiveSetting(settings, 'height_count_item');\r\n  if (!width_count_item) {\r\n    styles += `width: 35px;`;\r\n    styles += `padding-left: 0;`;\r\n    styles += `padding-right: 0;`;\r\n  } else if(width_count_item.size && width_count_item.unit){\r\n    styles += `width: ${width_count_item.size}${width_count_item.unit};`;\r\n    styles += `padding-left: 0;`;\r\n    styles += `padding-right: 0;`;\r\n  }\r\n  if (! height_count_item) {\r\n    styles += `height: 35px;`;\r\n    styles += `padding-top: 0;`;\r\n    styles += `padding-bottom: 0;`;\r\n  } else if(height_count_item.size && height_count_item.unit){\r\n    styles += `height: ${height_count_item.size}${height_count_item.unit};`;\r\n    styles += `padding-top: 0;`;\r\n    styles += `padding-bottom: 0;`;\r\n  }\r\n  return styles;\r\n}}\r\n}\r\n`;\r\n\r\nexport default PaginationComponent;","import {generateButtonsArray, renderAssetIcon} from \"../../../../../../front-app/src/js/helpers\";\r\nimport PageButton from \"./PageButton\";\r\nimport AltrpSelect from \"../../../../../../admin/src/components/altrp-select/AltrpSelect\";\r\nimport PaginationComponent from \"./PaginationComponent\";\r\n\r\n/**\r\n *\r\n * @param {{}}settings\r\n * @param {function} nextPage\r\n * @param {function} previousPage\r\n * @param {function} setPageSize\r\n * @param {function} gotoPage\r\n * @param {int} pageIndex\r\n * @param {int} pageCount\r\n * @param {int} pageSize\r\n * @param {string} widgetId\r\n * @return {*}\r\n */\r\nexport default function Pagination(\r\n    {\r\n      settings,\r\n      nextPage,\r\n      previousPage,\r\n      setPageSize,\r\n      pageIndex,\r\n      pageCount,\r\n      pageSize,\r\n      widgetId,\r\n      gotoPage,\r\n    }) {\r\n  const {\r\n    inner_page_count_options,\r\n    inner_page_type,\r\n    current_page_text,\r\n    inner_page_count,\r\n    next_icon, prev_icon,\r\n    first_last_buttons_count,\r\n    middle_buttons_count,\r\n    posts_pagination_type ,\r\n    is_with_ellipsis\r\n  } = settings;\r\n  let countOptions =\r\n      React.useMemo(() => {\r\n        let countOptions = null;\r\n        if (inner_page_count_options) {\r\n          countOptions = inner_page_count_options.split('\\n');\r\n          countOptions = countOptions.map(o => ({ value: Number(o), label: Number(o) }));\r\n        }\r\n        return countOptions\r\n      }, [inner_page_count_options]);\r\n\r\n  const pageText = React.useMemo(() => {\r\n    let pageText = current_page_text || 'Current Page: {{page}}';\r\n    pageText = pageText.replace('{{page}}', pageIndex + 1).replace('{{page_count}}', pageCount);\r\n    if (inner_page_type === 'pages' || posts_pagination_type === 'pages') {\r\n      // let paginatePageCount = Number(inner_page_count) || pageCount;\r\n      // if (paginatePageCount <= 0 || paginatePageCount > pageCount) {\r\n      //   paginatePageCount = pageCount;\r\n      // }\r\n      // let array = [];\r\n      // for (let i = 0; i < paginatePageCount; i++) {\r\n      //   array.push(i);\r\n      // }\r\n      // let startIndex = (paginatePageCount === pageCount) ? 1 : (pageIndex + 1) - Math.floor(paginatePageCount / 2);\r\n      // if (startIndex <= 0) {\r\n      //   startIndex = 1;\r\n      // }\r\n      // if (startIndex + paginatePageCount > pageCount) {\r\n      //   startIndex = pageCount - paginatePageCount + 1;\r\n      // }\r\n      // pageText = <div className=\"altrp-pagination-pages\">{array.map((i, idx) => {\r\n      //   idx += startIndex;\r\n      //   return <button className={`altrp-pagination-pages__item ${(idx - 1 === pageIndex) ? 'active' : ''}`}\r\n      //     key={idx}\r\n      //     onClick={() => {\r\n      //       gotoPage(idx - 1);\r\n      //     }}>\r\n      //     {idx}\r\n      //   </button>\r\n\r\n      // })}</div>\r\n      return <div className=\"altrp-pagination-pages\">\r\n        {(pageCount > first_last_buttons_count * 2 + middle_buttons_count)\r\n        && first_last_buttons_count && middle_buttons_count\r\n            ? generateButtonsArray(pageIndex, pageCount, first_last_buttons_count, middle_buttons_count)\r\n                .map((item, index) => item === \"ellipsis\"\r\n                    ? is_with_ellipsis ? <div key={item + index} className=\"altrp-pagination__ellipsis\">...</div> : <span>&nbsp;</span>\r\n                    : <PageButton key={item} index={item} pageIndex={pageIndex} gotoPage={gotoPage} />)\r\n            : [...Array(pageCount)].map((_, index) => <PageButton key={index} index={index} pageIndex={pageIndex} gotoPage={gotoPage} />)}\r\n      </div>\r\n    }\r\n    return pageText;\r\n  }, [current_page_text, pageIndex, pageCount, inner_page_type, inner_page_count, settings]);\r\n  if(inner_page_type === 'none'){\r\n    return null;\r\n  }\r\n  return <PaginationComponent className=\"altrp-pagination\" settings={settings}>\r\n    {!settings.hide_pre_page_button && <button className={\"altrp-pagination__previous\"}\r\n                                               onClick={() => {\r\n                                                 previousPage();\r\n                                               }}\r\n                                               disabled={pageIndex === 0}>\r\n      <span dangerouslySetInnerHTML={{ __html: _.isString(settings.prev_text) ? settings.prev_text : 'Previous Page' }} />\r\n      {renderAssetIcon(prev_icon)}\r\n    </button>}\r\n    {!settings.hide_pages_buttons_button && <div className=\"altrp-pagination__count\">\r\n      {pageText}\r\n    </div>}\r\n    {!settings.hide_next_page_button && <button className=\"altrp-pagination__next\"\r\n                                                onClick={() => {\r\n                                                  nextPage()\r\n                                                }}\r\n                                                disabled={pageCount === pageIndex + 1}>\r\n      <span dangerouslySetInnerHTML={{ __html: _.isString(settings.next_text) ? settings.next_text : 'Next Page' }} />\r\n      {renderAssetIcon(next_icon)}\r\n    </button>}\r\n    {! settings.hide_page_input &&\r\n    <input className=\"altrp-pagination__goto-page\"\r\n           type=\"number\"\r\n           defaultValue={pageIndex + 1}\r\n           onChange={(e) => {\r\n             const page = e.target.value ? Number(e.target.value) - 1 : 0;\r\n             gotoPage(page)\r\n           }} />}\r\n    {! settings.hide_pagination_select && countOptions &&\r\n    <AltrpSelect className=\"altrp-pagination__select-size\"\r\n      options={countOptions}\r\n      classNamePrefix={widgetId + ' altrp-field-select2'}\r\n      value={countOptions.find(o => o.value === pageSize)}\r\n      isSearchable={false}\r\n      onChange={value => {\r\n        setPageSize(value.value)\r\n      }} />}\r\n\r\n  </PaginationComponent>\r\n}\r\n","import FrontElement from \"./FrontElement\";\r\nclass FrontElementsFabric {\r\n  /**\r\n   * парсим данные шаблона\r\n   * @param {object} object\r\n   * @param {FrontElement | null} parent\r\n   * @param {int | null} pageId\r\n   * @param {array | null} models\r\n   * @return {FrontElement}\r\n   */\r\n  parseData(object, parent, pageId, models){\r\n    let children = [];\r\n    /**\r\n     * @member {FrontElement} element\r\n     * */\r\n    let element = new FrontElement(object);\r\n    if(pageId){\r\n      element.addModelInfo({\r\n        modelName: 'page',\r\n        modelId: pageId,\r\n      });\r\n    }\r\n    if(_.isArray(models)){\r\n      for(let model of models){\r\n        element.addModelInfo({\r\n            ...model,\r\n        });\r\n      }\r\n    }\r\n    if(object.children && object.children.length ){\r\n      for(let child of object.children){\r\n        window.frontElementsManager.checkElementExists(child.name) ?\r\n            children.push( this.parseData(child, element) ) : '';\r\n      }\r\n    }\r\n    element.id = object.id;\r\n    element.lastElement = object.lastElement;\r\n    element.children = children;\r\n    element.settings = object.settings;\r\n    element.name = object.name;\r\n    element.type = object.type;\r\n    element.dynamicContentSettings = object.dynamicContentSettings;\r\n    if(parent){\r\n      element.setParent(parent);\r\n    }\r\n    element.update();\r\n    return element;\r\n  }\r\n\r\n  /**\r\n   * Правильное клонирование элемента\r\n   * @params {FrontElement} element\r\n   * @return {FrontElement | null}\r\n   */\r\n  cloneElement(element){\r\n    if(! element){\r\n      return null;\r\n    }\r\n    let clonedElement = _.cloneDeep(element);\r\n    // console.log(element.idForAction);\r\n    this.updateParents(clonedElement);\r\n    return clonedElement\r\n  }\r\n\r\n  /**\r\n   * Обновляет ссылку на родителя у элементов\r\n   * @params {FrontElement} element\r\n   */\r\n\r\n  updateParents(element){\r\n    if(_.isArray(element.children)){\r\n      element.children.forEach(c=>{\r\n        c.setParent(element);\r\n        this.updateParents(c);\r\n        // console.log(c);\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nwindow.frontElementsFabric = new FrontElementsFabric();\r\nexport default window.frontElementsFabric;\r\n","\r\nimport { getResponsiveSetting } from \"../../../../../../front-app/src/js/helpers\";\r\n\r\nconst settingsToStyles = ({ settings }) => {\r\n   let styles = '';\r\n\r\n   styles += '&.altrp-column{';\r\n   const layout_column_width = getResponsiveSetting(settings, 'layout_column_width');\r\n   if (layout_column_width) {\r\n      if (Number(layout_column_width)) {\r\n         styles += `width:${layout_column_width}%;`;\r\n      } else {\r\n         styles += `width:${layout_column_width};`;\r\n      }\r\n   }\r\n\r\n   styles += '}';\r\n   return styles;\r\n};\r\n\r\nexport const ElementWrapperDivComponent = styled.div`${settingsToStyles}`;\r\n","const DEFAULT_REACT_ELEMENTS = [\r\n  'input',\r\n  'input-select',\r\n  'input-select2',\r\n  'input-radio',\r\n  'input-checkbox',\r\n  'input-wysiwyg',\r\n  'input-textarea',\r\n  'input-slider',\r\n  'input-image-select',\r\n  'input-accept',\r\n  'input-text',\r\n  'input-text-common',\r\n  'input-password',\r\n  'input-number',\r\n  'input-tel',\r\n  'input-email',\r\n  'input-date',\r\n  'input-hidden',\r\n  'input-file',\r\n  'input-gallery',\r\n  'breadcrumbs',\r\n  'map',\r\n  'map_builder',\r\n  'menu',\r\n  'diagram',\r\n  'input',\r\n  'nav',\r\n  'dashboards',\r\n  'tour',\r\n  'icon',\r\n  'export',\r\n  'template',\r\n  'gallery',\r\n  'dropbar',\r\n  'posts',\r\n  'table',\r\n  'tabs',\r\n  'heading-type-animating',\r\n]\r\nexport default DEFAULT_REACT_ELEMENTS\r\n","import { withRouter } from \"react-router-dom\";\r\nimport { addElement } from \"../store/elements-storage/actions\";\r\nimport AltrpTooltip from \"../../../../editor/src/js/components/altrp-tooltip/AltrpTooltip\";\r\nimport { changeCurrentPageProperty } from \"../store/current-page/actions\";\r\nimport { ElementWrapperDivComponent } from \"../../../../editor/src/js/components/widgets/styled-components/ElementWrapperComponent\";\r\nimport NavComponent from \"../../../../editor/src/js/components/widgets/styled-components/NavComponent\";\r\nimport DEFAULT_REACT_ELEMENTS from \"../constants/DEFAULT_REACT_ELEMENTS\";\r\nconst {\r\n  altrpCompare,\r\n  altrpRandomId,\r\n  conditionsChecker,\r\n  isEditor,\r\n  replaceContentWithData,\r\n  setTitle\r\n} = window.altrpHelpers;\r\n\r\nclass ElementWrapper extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      elementDisplay: !this.props.element.getSettings(\"default_hidden\")\r\n    };\r\n    this.reactElement = this.props.element.getSettings(\"react_element\");\r\n    this.elementId = this.props.element.getId();\r\n    this.settings = this.props.element.getSettings();\r\n    props.element.wrapper = this;\r\n    this.elementWrapperRef = React.createRef();\r\n    this.elementRef = React.createRef();\r\n    if(! isEditor()){\r\n      appStore.dispatch(addElement(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Отлавливаем ошибки\r\n   * @param error\r\n   * @param errorInfo\r\n   */\r\n  componentDidCatch(error, errorInfo) {\r\n    this.setState(state => ({\r\n      ...state,\r\n      error: error,\r\n      errorInfo: errorInfo\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Иногда надо обновить элемент (FrontElement)\r\n   */\r\n  componentDidMount() {\r\n    !isEditor() && window?.frontApp?.onWidgetMount();\r\n    if (_.isFunction(this.props.element.update)) {\r\n      this.props.element.update();\r\n      this.props.element.updateFonts();\r\n    }\r\n    this.checkElementDisplay();\r\n  }\r\n  /**\r\n   * Подписываемся на обновление store редакса\r\n   */\r\n  updateStore = () => {\r\n    if (this.state.currentModel !== appStore.getState().currentModel) {\r\n      this.setState(state => ({\r\n        ...state,\r\n        currentModel: appStore.getState().currentModel\r\n      }));\r\n    }\r\n    /**\r\n     * Обновляем пользователя\r\n     */\r\n    if (this.state.currentUser !== appStore.getState().currentUser) {\r\n      this.setState(state => ({\r\n        ...state,\r\n        currentModel: appStore.getState().currentUser\r\n      }));\r\n    }\r\n\r\n    /**\r\n     * Обновляем currentDataStorage\r\n     */\r\n    if (\r\n      this.state.currentDataStorage !== appStore.getState().currentDataStorage\r\n    ) {\r\n      this.setState(state => ({\r\n        ...state,\r\n        currentDataStorage: appStore.getState().currentDataStorage\r\n      }));\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Вернет HTMLElement, в котором записаны css стили текущего компонента\r\n   * @return {null | HTMLElement}\r\n   */\r\n  getStylesHTMLElement() {\r\n    if (!_.get(window, \"stylesModule.stylesContainer.current\")) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      window.stylesModule.stylesContainer.current.getElementsByClassName(\r\n        `altrp-styles${this.props.element.getId()}`\r\n      )[0] || null\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Нужно ли обновить отображение обертки элементов\r\n   * @param {{}} prevProps\r\n   * @param {{}} prevState\r\n   */\r\n  componentDidUpdate(prevProps, prevState) {\r\n    this.checkElementDisplay();\r\n    if (\r\n      appStore.getState().currentModel.getProperty(\"altrpModelUpdated\") &&\r\n      appStore\r\n        .getState()\r\n        .currentDataStorage.getProperty(\"currentDataStorageLoaded\") &&\r\n      !isEditor() &&\r\n      this.props.element.getName() === \"section\"\r\n    ) {\r\n      let title = appStore.getState().currentTitle;\r\n      title = replaceContentWithData(title);\r\n      if (appStore.getState().altrpPage.getProperty(\"title\") !== title) {\r\n        appStore.dispatch(changeCurrentPageProperty(\"title\", title));\r\n      }\r\n      setTitle(title);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Обновить элемент изменив this.state.updateToken\r\n   */\r\n  updateElement() {\r\n    this.setState(state => ({ ...state, updateToken: altrpRandomId() }));\r\n  }\r\n\r\n  /**\r\n   * Проверка видимости элемента\r\n   * @param {{}} prevProps\r\n   * @param {{}} prevState\r\n   */\r\n  checkElementDisplay(prevProps, prevState) {\r\n    /**\r\n     * @member {FrontElement} element\r\n     */\r\n    const { element } = this.props;\r\n    if (!element.getSettings(\"conditional_other\")) {\r\n      return;\r\n    }\r\n    let conditions = element.getSettings(\"conditions\", []);\r\n    conditions = conditions.map(c => {\r\n      const {\r\n        conditional_model_field: modelField,\r\n        conditional_other_operator: operator,\r\n        conditional_other_condition_value: value\r\n      } = c;\r\n      return {\r\n        modelField,\r\n        operator,\r\n        value\r\n      };\r\n    });\r\n    let elementDisplay = conditionsChecker(\r\n      conditions,\r\n      element.getSettings(\"conditional_other_display\") === \"AND\",\r\n      this.props.element.getCurrentModel(),\r\n      true\r\n    );\r\n\r\n    if (this.state.elementDisplay === elementDisplay) {\r\n      return;\r\n    }\r\n\r\n    this.setState(state => ({\r\n      ...state,\r\n      elementDisplay\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Переключает видимость элемента\r\n   */\r\n  toggleElementDisplay() {\r\n    this.setState(state => ({\r\n      ...state,\r\n      elementDisplay: !state.elementDisplay\r\n    }));\r\n  }\r\n  /**\r\n   * Метод для проверки видимости поля формы\r\n   * @return {boolean}\r\n   */\r\n  inputIsDisplay() {\r\n    const { formsStore } = this.state;\r\n    const formId = this.props.element.getSettings(\"form_id\", \"\");\r\n    const logic = this.props.element.getSettings(\r\n      \"form_condition_display_on\",\r\n      \"AND\"\r\n    );\r\n    const formConditions = this.props.element.getSettings(\r\n      \"form_conditions\",\r\n      []\r\n    );\r\n    let display = true;\r\n    formConditions.forEach(c => {\r\n      if (logic === \"AND\") {\r\n        display *= altrpCompare(\r\n          _.get(formsStore, `${formId}.${c.field_id}`),\r\n          c.value,\r\n          c.operator\r\n        );\r\n      } else {\r\n        display += altrpCompare(\r\n          _.get(formsStore, `${formId}.${c.field_id}`),\r\n          c.value,\r\n          c.operator\r\n        );\r\n      }\r\n    });\r\n    return display;\r\n  }\r\n\r\n  render() {\r\n    const {element} = this.props;\r\n    const {\r\n      hide_on_wide_screen,\r\n      hide_on_desktop,\r\n      hide_on_laptop,\r\n      hide_on_tablet,\r\n      hide_on_big_phone,\r\n      hide_on_small_phone,\r\n      hide_on_trigger,\r\n      isFixed,\r\n      tooltip_position\r\n    } = element.settings;\r\n    let { tooltip_text } = element.settings;\r\n    let classes = `altrp-element altrp-element${element.getId()} altrp-element_${element.getType()}`;\r\n    classes += element.getPrefixClasses() + \" \";\r\n    if (element.getType() === \"widget\") {\r\n      classes += ` altrp-widget_${element.getName()}`;\r\n    }\r\n    if(this.props.element.getResponsiveSetting('css_class')){\r\n      classes += ` ${replaceContentWithData(\r\n        this.props.element.getResponsiveSetting('css_class'),\r\n        this.props.element.getCurrentModel().getData()\r\n      )} `;\r\n    }\r\n    if (hide_on_wide_screen) {\r\n      classes += \" hide_on_wide_screen\";\r\n    }\r\n    if (hide_on_desktop) {\r\n      classes += \" hide_on_desktop\";\r\n    }\r\n    if (hide_on_laptop) {\r\n      classes += \" hide_on_laptop\";\r\n    }\r\n    if (hide_on_tablet) {\r\n      classes += \" hide_on_tablet\";\r\n    }\r\n    if (hide_on_big_phone) {\r\n      classes += \" hide_on_big_phone\";\r\n    }\r\n    if (hide_on_small_phone) {\r\n      classes += \" hide_on_small_phone\";\r\n    }\r\n    if (isFixed) {\r\n      classes += \" fixed-section\";\r\n    }\r\n    if (this.state.errorInfo) {\r\n      return (\r\n        <div className=\"altrp-error\" data-eltype={element.getType()}>\r\n          <h2>Something went wrong.</h2>\r\n          <details style={{ whiteSpace: \"pre-wrap\" }}>\r\n            {this.state.error && this.state.error.toString()}\r\n            <br />\r\n            {this.state.errorInfo.componentStack}\r\n          </details>\r\n        </div>\r\n      );\r\n    }\r\n    const styles = {};\r\n\r\n    if (element.getResponsiveSetting(\"layout_column_width\")) {\r\n      if (\r\n        Number(element.getResponsiveSetting(\"layout_column_width\"))\r\n      ) {\r\n        styles.width =\r\n          element.getResponsiveSetting(\"layout_column_width\") + \"%\";\r\n      } else {\r\n        styles.width = element.getResponsiveSetting(\r\n          \"layout_column_width\"\r\n        );\r\n      }\r\n    }\r\n    if (!this.state.elementDisplay) {\r\n      styles.display = \"none\";\r\n    }\r\n    let CSSId = element.getSettings(\"advanced_element_id\", \"\");\r\n    CSSId = replaceContentWithData(\r\n      CSSId,\r\n      element.getCurrentModel().getData()\r\n    );\r\n    if (this.CSSId !== CSSId) {\r\n      this.CSSId = CSSId;\r\n    }\r\n    let ContentComponent = frontElementsManager.getComponentClass(\r\n      element.getName()\r\n    );\r\n    const content = React.createElement(ContentComponent, {\r\n      ref: this.elementRef,\r\n      rootElement: this.props.rootElement,\r\n      ElementWrapper: this.props.ElementWrapper,\r\n      element: element,\r\n      children: element.getChildren(),\r\n      match: this.props.match,\r\n      currentModel: this.props.currentModel,\r\n      currentUser: this.props.currentUser,\r\n      currentDataStorage: this.props.currentDataStorage,\r\n      altrpresponses: this.props.altrpresponses,\r\n      formsStore: this.props.formsStore,\r\n      elementDisplay: this.state.elementDisplay,\r\n      altrpPageState: this.props.altrpPageState,\r\n      altrpMeta: this.props.altrpMeta,\r\n      updateToken: this.state.updateToken,\r\n      currentScreen: this.props.currentScreen,\r\n      baseRender: this.props.baseRender,\r\n      history: this.props.history,\r\n      appStore\r\n    });\r\n    if (element.getTemplateType() === \"email\") {\r\n      if (!this.state.elementDisplay) {\r\n        return null;\r\n      }\r\n      return <>{content}</>;\r\n    }\r\n\r\n    let WrapperComponent = ElementWrapperDivComponent;\r\n    switch (element.getName()) {\r\n      case \"nav\":\r\n        WrapperComponent = NavComponent;\r\n        break;\r\n    }\r\n\r\n    tooltip_text = replaceContentWithData(\r\n      tooltip_text,\r\n      element.getCurrentModel().getData()\r\n    );\r\n\r\n    const wrapperProps = {\r\n      className: classes,\r\n      ref: this.elementWrapperRef,\r\n      elementId: this.elementId,\r\n      settings: this.settings,\r\n      style: styles,\r\n      id: this.CSSId,\r\n    };\r\n    if (\r\n      this.reactElement ||\r\n      DEFAULT_REACT_ELEMENTS.indexOf(element.getName()) !== -1\r\n    ) {\r\n      wrapperProps[\"data-react-element\"] = element.getId();\r\n    }\r\n    if(! _.isEmpty(element.getResponsiveSetting('wrapper_click_actions'))){\r\n      wrapperProps[\"data-altrp-wrapper-click-actions\"] = element.getId();\r\n    }\r\n    wrapperProps[\"data-altrp-id\"] = element.getId();\r\n    return  (\r\n      <WrapperComponent {...wrapperProps} element={element.getId()}>\r\n        {content}\r\n        {tooltip_text && (\r\n          <AltrpTooltip position={tooltip_position}>\r\n            {tooltip_text}\r\n          </AltrpTooltip>\r\n        )}\r\n      </WrapperComponent>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    altrpresponses: state.altrpresponses,\r\n    formsStore: state.formsStore,\r\n    currentDataStorage: state.currentDataStorage,\r\n    currentModel: state.currentModel,\r\n    currentUser: state.currentUser,\r\n    altrpMeta: state.altrpMeta,\r\n    altrpPageState: state.altrpPageState,\r\n    currentScreen: state.currentScreen\r\n  };\r\n}\r\nlet _export;\r\nif(window['h-altrp']){\r\n  _export = ElementWrapper;\r\n} else {\r\n  _export = withRouter(ElementWrapper)\r\n}\r\nexport default window.reactRedux.connect(mapStateToProps, null, null, {\r\n  forwardRef: true\r\n})(_export);\r\n","export const ADD_ELEMENT = 'ADD_ELEMENT';\r\nexport const CLEAR_ELEMENTS = 'CLEAR_ELEMENTS';\r\n\r\n/**\r\n *\r\n * @param {React.Component}elementComponent\r\n * @return {{}} - {\r\n *     type: {string},\r\n *     sectionComponent: {React.Component},\r\n *   }\r\n */\r\nexport function addElement(elementComponent) {\r\n  return {\r\n    type: ADD_ELEMENT,\r\n    elementComponent\r\n  };\r\n}\r\n\r\n/**\r\n * Перед загрузкой новых данных, старые удаляем\r\n * @return {{type: string}}\r\n */\r\nexport function clearElements() {\r\n  return {\r\n    type: CLEAR_ELEMENTS,\r\n  };\r\n}\r\n\r\n"],"sourceRoot":""}