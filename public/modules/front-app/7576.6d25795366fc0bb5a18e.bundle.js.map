{"version":3,"sources":["webpack:///./resources/modules/front-app/src/js/constants/INPUT_WIDGETS.js","webpack:///./resources/modules/front-app/src/js/classes/FrontElement.js","webpack:///./resources/modules/front-app/src/js/store/fonts-storage/actions.js"],"names":["data","withoutComponent","this","name","settings","lazySection","children","cssClassStorage","type","id","window","frontElementsManager","componentClass","getComponentClass","getName","parent","forms","component","root","modelsList","getId","appStore","dispatch","addSettings","length","console","error","findClosestByType","getType","indexOf","updateStyles","widgetsForForm","INPUT_WIDGETS","getSettings","getFormId","formInit","actionsRegistered","actionsManager","default","registerWidgetActions","getIdForAction","formsIsInit","formsManager","method","addForm","registerForm","modelName","getModelName","afterLoginRedirect","afterLogoutRedirect","getForms","forEach","form","addSubmitButton","addField","push","idForAction","altrpRandomId","settingName","_default","_","get","cloneDeep","stylesModulePromise","then","stylesModule","addElementStyles","getStringifyStyles","styles","screens","CONSTANTS","splice","breakpoint","rules","hasOwnProperty","selector","concat","join","screen","isObject","mediaQuery","stringStyles","log","has","getValue","maskIsValid","props","elementDisplay","elementIsDisplay","value","state","dynamic","getContent","isArray","trueValue","falseValue","valueReplacement","getRoot","getModelsList","modelInfo","related","_modelInfo","modelsStorage","modelCallbacksStorage","callback","changeCss","toPairs","classStorage","element","model","index","rootElement","cardModel","isCard","AltrpModel","Number","hasCardModel","getCardModel","getState","currentModel","fieldId","replaceContentWithData","getCurrentModel","getData","formId","fonts","font","addFont","dynamicSettingName","elementState","getResponsiveSetting","templateType","newSettings","assign","set","setState","ADD_FONT","REMOVE_FONT","elementId","controllerName","fontName"],"mappings":"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","file":"7576.6d25795366fc0bb5a18e.bundle.js","sourcesContent":["const INPUT_WIDGETS = [\r\n  'input',\r\n  'input-select',\r\n  'input-select2',\r\n  'input-switch',\r\n  'input-wysiwyg',\r\n  'input-checkbox',\r\n  'input-radio',\r\n  'input-image-select',\r\n  'input-file',\r\n  'input-gallery',\r\n  'input-accept',\r\n  'input-date',\r\n  'input-textarea',\r\n  'input-slider',\r\n  'input-text-common',\r\n  'input-password',\r\n  'input-tel',\r\n  'input-number',\r\n  'input-email',\r\n  'input-date',\r\n];\r\nexport default INPUT_WIDGETS;\r\n","import CONSTANTS from \"../../../../editor/src/js/consts\";\r\nimport {\r\n  altrpRandomId,\r\n  getResponsiveSetting,\r\n  replaceContentWithData,\r\n  valueReplacement\r\n} from \"../helpers\";\r\nimport AltrpModel from \"../../../../editor/src/js/classes/AltrpModel\";\r\nimport {addFont} from \"../store/fonts-storage/actions\";\r\nimport {addSettings} from \"../store/elements-settings/actions\";\r\nimport INPUT_WIDGETS from \"../constants/INPUT_WIDGETS\";\r\n\r\nclass FrontElement {\r\n\r\n  constructor(data = {}, withoutComponent = false){\r\n    this.name = data.name;\r\n    this.settings = data.settings;\r\n    this.lazySection = data.lazySection;\r\n    this.children = data.children;\r\n    this.cssClassStorage = data.cssClassStorage;\r\n    this.type = data.type;\r\n    this.id = data.id;\r\n    if(window.frontElementsManager && ! withoutComponent){\r\n      this.componentClass = window.frontElementsManager.getComponentClass(this.getName());\r\n    }\r\n    this.parent = null;\r\n    /**\r\n     * Список форм для текущего элемента (кнопки, интпута)\r\n     * @type {AltrpForm[]}\r\n     */\r\n    this.forms = [];\r\n    /**\r\n     * Ссылка на компонент\r\n     * @type {React.Component | null}\r\n     */\r\n    this.component = null;\r\n\r\n    /**\r\n     * Ссылка на родителя\r\n     * @type {FrontElement}\r\n     */\r\n    /**\r\n     * Ссылка на корневой элемент шаблона\r\n     * @type {FrontElement}\r\n     */\r\n    this.root = null;\r\n\r\n    /**\r\n     * Список данных моделей для текущего шаблона. Например:\r\n     *  {\r\n     *      modelName: string\r\n     *      modelId: 1,\r\n     *  }\r\n     *  Для каждого шаблона типа content устанавливается одна обязательная модель Page\r\n     *  Для шаблонов header и footer нужно предусмотреть изменение данных моджели типа Page\r\n     *  (при смене страницы header footer могут не меняться)\r\n     *  * @type {array}\r\n     */\r\n    this.modelsList = []\r\n    if(this.getId()){\r\n      appStore.dispatch(addSettings(this.getId(), this.getName(), {...this.settings}, this?.children?.length || 0))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Устанавливаем ссылку на элемент-родитель\r\n   * @param {FrontElement} parent\r\n   */\r\n  setParent(parent){\r\n    if(! parent){\r\n      console.error(this);\r\n    }\r\n    this.parent = parent;\r\n  }\r\n\r\n\r\n  /**\r\n   * Возвращает ссылку на корневой элемент шаблона\r\n   * @return {FrontElement}\r\n   */\r\n  getRoot(){\r\n    if(!this.root){\r\n      this.root = this.findClosestByType('root-element')\r\n    }\r\n    return this.root;\r\n  }\r\n\r\n  /**\r\n   * Возвращает ссылку на первый элемент указанного типа (поиск идет к корню дерева)\r\n   * @param {string} type\r\n   * @return {FrontElement}\r\n   */\r\n  findClosestByType(type){\r\n    if(type === 'widget' && (this.getType() !== 'widget')){\r\n      return null;\r\n    }\r\n    if(type === 'column' && (['root-element', 'section', ].indexOf(this.getType()) !== -1)){\r\n      return null;\r\n    }\r\n    if(type === 'section' && (this.getType() === 'root-element')){\r\n      return null;\r\n    }\r\n    if (this.getType() === type){\r\n      return this;\r\n    }\r\n    if(! this.parent){\r\n      return null;\r\n      // console.log(type);\r\n      // console.log(this);\r\n    }\r\n    return this.parent.findClosestByType(type)\r\n  }\r\n\r\n  /**\r\n   * Вызывается для обновления элемента\r\n   */\r\n  update(){\r\n    this.updateStyles();\r\n\r\n    let widgetsForForm = [\r\n        'button',\r\n      ...INPUT_WIDGETS\r\n    ];\r\n    let widgetsWithActions = [\r\n        'button',\r\n      ...INPUT_WIDGETS\r\n    ];\r\n    /**\r\n     * Инициация событий в первую очередь\r\n     */\r\n    if(widgetsWithActions.indexOf(this.getName()) >= 0 && this.getSettings('actions', []).length){\r\n      try{\r\n        // this.registerActions();\r\n      } catch(e){\r\n        console.error(e);\r\n      }\r\n      // if(this.getName() === 'button'){\r\n      //   return;\r\n      // }\r\n    }\r\n\r\n    if(widgetsForForm.indexOf(this.getName()) >= 0 && this.getFormId()){\r\n      this.formInit();\r\n      return;\r\n    }\r\n    if(widgetsForForm.indexOf(this.getName()) >= 0 && this.getSettings('form_actions') === 'delete'){\r\n      this.formInit();\r\n      return;\r\n    }\r\n  }\r\n  async registerActions(){\r\n    if(this.actionsRegistered){\r\n      return;\r\n    }\r\n    /**\r\n     * @member {ActionsManager|*} actionsManager\r\n     */\r\n    const actionsManager = (await import(/* webpackChunkName: 'ActionsManager' */'./modules/ActionsManager.js')).default;\r\n    switch (this.getName()){\r\n      case 'button':{\r\n        actionsManager.registerWidgetActions(this.getIdForAction(), this.getSettings('actions', []), 'click', this);\r\n      }\r\n      break;\r\n      case 'input':{\r\n        actionsManager.registerWidgetActions(this.getIdForAction(), this.getSettings('actions', []), 'blur', this);\r\n      }\r\n    }\r\n\r\n    this.actionsRegistered = true;\r\n  }\r\n  /**\r\n   * Если элемент поле или кнопка нужно инициализирваоть форму в FormsManager\r\n   */\r\n  async formInit(){\r\n    /**\r\n     * @member {FormsManager} formsManager\r\n     */\r\n    if(! this.component){\r\n      return;\r\n    }\r\n    if(this.formsIsInit){\r\n      return\r\n    }\r\n    this.formsIsInit = true;\r\n    let formsManager = await import(/* webpackChunkName: 'FormsManager' */'../../../../editor/src/js/classes/modules/FormsManager.js');\r\n    formsManager = formsManager.default;\r\n\r\n    switch (this.getName()) {\r\n      case 'button': {\r\n        let method = 'POST';\r\n        switch (this.getSettings('form_actions')){\r\n          case 'add_new':{\r\n            this.addForm(formsManager.registerForm(this.getFormId(), this.getSettings('choose_model'), method));\r\n          }\r\n          break;\r\n          case 'delete':{\r\n            method = 'DELETE';\r\n            let modelName = this.getModelName();\r\n            if(modelName){\r\n              this.addForm(formsManager.registerForm(this.getId(), modelName, method));\r\n            }\r\n          }\r\n          break;\r\n          case 'edit':{\r\n            method = 'PUT';\r\n            let modelName = this.getModelName();\r\n            if(modelName){\r\n              this.addForm(formsManager.registerForm(this.getFormId(), modelName, method));\r\n            }\r\n          }\r\n          break;\r\n          case 'login':{\r\n            method = 'POST';\r\n            this.addForm(formsManager.registerForm(this.getFormId(),\r\n                'login',\r\n                method,\r\n                {afterLoginRedirect:this.getSettings('redirect_after')}));\r\n          }\r\n          break;\r\n          case 'logout':{\r\n            method = 'POST';\r\n            this.addForm(formsManager.registerForm(this.getFormId(),\r\n                'logout',\r\n                method,\r\n                {afterLogoutRedirect:this.getSettings('redirect_after')}\r\n              ));\r\n          }\r\n          break;\r\n          case 'email':{\r\n            method = 'POST';\r\n            this.addForm(formsManager.registerForm(this.getFormId(),\r\n                'email',\r\n                method,\r\n                {afterLogoutRedirect:this.getSettings('redirect_after')}\r\n              ));\r\n          }\r\n          break;\r\n        }\r\n        this.getForms().forEach(form=>{\r\n          form.addSubmitButton(this);\r\n        });\r\n      }\r\n      break;\r\n      case 'input-select':\r\n      case 'input-select2':\r\n      case 'input-switch':\r\n      case 'input-wysiwyg':\r\n      case 'input-checkbox':\r\n      case 'input-radio':\r\n      case 'input-image-select':\r\n      case 'input-file':\r\n      case 'input-gallery':\r\n      case 'input-accept':\r\n      case 'input-date':\r\n      case 'input-textarea':\r\n      case 'input-password':\r\n      case 'input-email':\r\n      case 'input-tel':\r\n      case 'input-number':\r\n      case 'input-text':\r\n      case 'input-text-common':\r\n      case 'input': {\r\n        formsManager.addField(this.getFormId(), this);\r\n      }\r\n      break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @return {AltrpForm[]}\r\n   */\r\n  getForms(){\r\n    return this.forms;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {AltrpForm} form\r\n   */\r\n  addForm(form){\r\n    this.forms.push(form);\r\n  }\r\n  /**\r\n   * Возвращает массив потомков текущего элемента\r\n   * @return {array}\r\n   */\r\n\r\n  getChildren(){\r\n    return this.children;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns {string}\r\n   */\r\n  getId(){\r\n    return this.id;\r\n  }\r\n\r\n  /**\r\n   * id для повторяющихся виджетов с действиями\r\n   * @return {string}\r\n   */\r\n  getIdForAction(){\r\n    if(! this.idForAction){\r\n      this.idForAction = altrpRandomId();\r\n    }\r\n    return this.idForAction;\r\n    let id = this.getId();//todo: delete this\r\n    if(this.getCurrentModel().getProperty('altrpIndex') !== ''){\r\n      id += `_${this.getCurrentModel().getProperty('altrpIndex')}`;\r\n    }\r\n    return id;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns {string}\r\n   */\r\n  getName(){\r\n    return this.name;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns {string}\r\n   */\r\n  getType(){\r\n    return this.type;\r\n  }\r\n\r\n  /**\r\n   * Получить настройку или все настройки\r\n   * @param {string} settingName\r\n   * @param {*} _default\r\n   * @return {*}\r\n   */\r\n  getSettings(settingName, _default = ''){\r\n    if(! settingName)\r\n    {\r\n      return _.cloneDeep(this.settings);\r\n    }\r\n    if(_.get(this.settings, settingName) === false || _.get(this.settings, settingName) === 0){\r\n      return _.get(this.settings, settingName);\r\n    }\r\n    return _.get(this.settings, settingName) || _default;\r\n  }\r\n  updateStyles(){\r\n    window.stylesModulePromise.then(stylesModule => {\r\n      /**\r\n       * @member {Styles} stylesModule\r\n       * */\r\n      // console.log(this.id);\r\n      // console.log(this.getId());\r\n      // console.log(this.getName());\r\n      // console.log(this.getType());\r\n      stylesModule.addElementStyles(this.getId(), this.getStringifyStyles());\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Возвращает CSS-стили в виде строки\r\n   * для вставки в тег style текущего элемента\r\n   * @return {string}\r\n   */\r\n  getStringifyStyles(){\r\n    let styles = '';\r\n    if(typeof this.settings.styles !== 'object'){\r\n      return styles\r\n    }\r\n    /**\r\n     * Чтобы сохранить последовательность медиа-запросов в CSS,\r\n     * добавлять будем в первоначальной последовательности.\r\n     * Для этого сначала создадим копию массива со всеми настройками экранов\r\n     * @type {{}}\r\n     */\r\n    let screens = _.cloneDeep(CONSTANTS.SCREENS);\r\n    /**\r\n     * Удалим дефолтный - он не нужен\r\n     * @type {{}}\r\n     */\r\n    screens.splice(0,1);\r\n    for(let breakpoint in this.settings.styles){\r\n      let rules = {};\r\n      if(this.settings.styles.hasOwnProperty(breakpoint)){\r\n        for(let settingName in this.settings.styles[breakpoint]){\r\n          if(this.settings.styles[breakpoint].hasOwnProperty(settingName)) {\r\n            for(let selector in this.settings.styles[breakpoint][settingName]){\r\n              if(this.settings.styles[breakpoint][settingName].hasOwnProperty(selector)) {\r\n                rules[selector] = rules[selector] || [];\r\n                // console.log(this.settings.styles[breakpoint][settingName][selector]);\r\n                rules[selector] = rules[selector].concat(this.settings.styles[breakpoint][settingName][selector])\r\n              }\r\n            }\r\n          }\r\n        }\r\n        /**\r\n         * Оборачиваем в медиа запрос при необходимости\r\n         *\r\n         */\r\n        if(breakpoint === CONSTANTS.DEFAULT_BREAKPOINT){\r\n          for(let selector in rules){\r\n            if(rules.hasOwnProperty(selector)){\r\n              styles += `${selector} {` + rules[selector].join('') + '}';\r\n            }\r\n          }\r\n        } else {\r\n          // styles += `${getMediaQueryByName(breakpoint)}{`;\r\n          // for(let selector in rules){\r\n          //   if(rules.hasOwnProperty(selector)){\r\n          //     styles += `${selector} {` + rules[selector].join('') + '}';\r\n          //   }\r\n          // }\r\n          // styles += `}`;\r\n          screens.forEach(screen=>{\r\n            /**\r\n             * Для каждого breakpoint сохраним\r\n             * в соответствующей настройке экрана css правила\r\n             */\r\n            if(screen.name === breakpoint){\r\n              screen.rules = rules;\r\n            }\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    screens.forEach(screen=>{\r\n\r\n      /**\r\n       * Если rules записаны, то добавим в styles в нужном порядке\r\n       */\r\n      if(!_.isObject(screen.rules)){\r\n        return;\r\n      }\r\n      styles += `${screen.mediaQuery}{`;\r\n      for(let selector in screen.rules){\r\n        if(screen.rules.hasOwnProperty(selector)){\r\n          styles += `${selector} {` + screen.rules[selector].join('') + '}';\r\n        }\r\n      }\r\n      styles += `}`;\r\n    });\r\n    styles += this.settings.stringStyles || '';\r\n    if(this.settings.stringStyles){\r\n      console.log(this.settings.stringStyles);\r\n    }\r\n    return styles;\r\n  }\r\n\r\n  /**\r\n   * Возвращает css-селектор в виде строки\r\n   * @return {string}\r\n   */\r\n  getSelector(){\r\n    if(this.type === 'root-element'){\r\n      return `.altrp-template-root${this.getId()}`;\r\n    }\r\n    return `.altrp-element${this.getId()}`;\r\n  }\r\n\r\n  /**\r\n   * Возвращает количестве колонок в секции\r\n   * @return {*}\r\n   */\r\n  getColumnsCount(){\r\n    return this.children.length;\r\n  }\r\n\r\n  /**\r\n   *  Проводит валидацию поля, если это виджет input,\r\n   *  если другой виджет, то просто возвращает true\r\n   *  @return {boolean}\r\n   */\r\n  fieldValidate(){\r\n    if(INPUT_WIDGETS.indexOf(this.getName()) === -1){\r\n      return true;\r\n    }\r\n    if(! this.getSettings('content_required')){\r\n      return true;\r\n    }\r\n    if(_.has(this, 'maskIsValid')){\r\n      return this.getValue() && this.maskIsValid;\r\n    }\r\n    return this.getValue();\r\n  }\r\n\r\n  /**\r\n   * Проверяет рекурсивно (проверяет всех предков) виден ли элемент свойство elementDisplay пропсов компонента\r\n   * @return {boolean}\r\n   */\r\n  elementIsDisplay(){\r\n    let display = true;\r\n    if(this.getName() === 'root-element'){\r\n      return true;\r\n    }\r\n    if(this.component.props.elementDisplay || this.getSettings('conditional_ignore_in_forms')){\r\n      display = this.parent ? this.parent.elementIsDisplay() : true;\r\n    } else {\r\n      return false;\r\n    }\r\n    return display;\r\n  }\r\n\r\n  /**\r\n   * Возвращает значение если виджет input, если другое, то null\r\n   */\r\n  getValue(){\r\n\r\n    if(INPUT_WIDGETS.indexOf(this.getName()) === -1){\r\n      return null;\r\n    }\r\n    if(! this.elementIsDisplay()){\r\n      return null;\r\n    }\r\n    const settings = this.getSettings();\r\n    let value = this.component.state.value;\r\n    /**\r\n     * Если значение динамическое и не менялось в виджете,\r\n     * то используем метод this.getContent для получения значения, а не динмического объекта\r\n     */\r\n    if(value && value.dynamic){\r\n      value = this.getContent('content_default_value')\r\n    }\r\n    switch (this.getSettings('content_type')){\r\n      /**\r\n       * Если нужен массив\r\n       */\r\n      case 'checkbox':{\r\n        value = _.isArray(value) ? value : (value ? [value] : []);\r\n      }\r\n        break;\r\n      case 'accept':{\r\n        let trueValue = this.getSettings('accept_checked') || true;\r\n        let falseValue = this.getSettings('accept_unchecked') || false;\r\n        falseValue = valueReplacement(falseValue);\r\n        trueValue = valueReplacement(trueValue);\r\n        value = value ? trueValue : falseValue;\r\n      }\r\n        break;\r\n\r\n    }\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * Список моделей для шаблона включая модель Page\r\n   * @return {AltrpModelUpdater[]}\r\n   */\r\n  getModelsList(){\r\n    return this.getRoot().modelsList || [];\r\n  }\r\n\r\n  /**\r\n   * Имя модели\r\n   * из списка моделей извлекает имя модели не являющейся Page и возращает и это имя\r\n   * @return {string | null}\r\n   */\r\n  getModelName(){\r\n    let modelName = null;\r\n    this.getModelsList().forEach(modelInfo=>{\r\n      if(modelInfo.modelName!=='page' && ! modelInfo.related){\r\n        modelName = modelInfo.modelName\r\n      }\r\n    });\r\n    return modelName;\r\n  }\r\n\r\n  /**\r\n   * Получаем данные о модели (modelName и modelId) из корневого элемента по названию модели\r\n   * @param {string} modelName\r\n   * @return {{}}\r\n   */\r\n  getModelsInfoByModelName(modelName){\r\n    let modelsList = this.getModelsList();\r\n    let modelInfo = null;\r\n    modelsList.forEach(_modelInfo=>{\r\n      if(_modelInfo.modelName === modelName){\r\n        modelInfo = _modelInfo;\r\n      }\r\n    });\r\n    return modelInfo\r\n  }\r\n\r\n  /**\r\n   * @param {AltrpModelUpdater[]} modelsList\r\n   */\r\n  setModelsList(modelsList){\r\n    this.getRoot().modelsList = modelsList;\r\n  }\r\n  /**\r\n   * Добавляет информацию о модели в список моделей\r\n   * @param {{}} modelInfo\r\n   */\r\n  addModelInfo(modelInfo){\r\n    this.getRoot().modelsList = this.getRoot().modelsList || [];\r\n    this.getRoot().modelsList.push({...modelInfo})\r\n  }\r\n\r\n  /**\r\n   * Задайет id для всех моделей корневого элемента не являющихся моделью страницы (page)\r\n   * todo: нужно вызывать в элементе при смене роута в том случае если роут имеет id\r\n   * @param {int} id\r\n   */\r\n  setModelsIds(id){\r\n\r\n  }\r\n\r\n  /**\r\n   * Получает данные для контента элемента\r\n   * делегирует на this.component\r\n   * @param {string} settingName\r\n   * @return {*}\r\n   */\r\n  getContent(settingName){\r\n    if(this.component){\r\n      return this.component.getContent(settingName)\r\n    }\r\n    return'';\r\n  }\r\n\r\n  /**\r\n   * Сохраняет данные модели\r\n   * @param modelName\r\n   * @param data\r\n   */\r\n  setModelData(modelName, data){\r\n    this.modelsStorage = this.modelsStorage || {};\r\n    this.modelsStorage[modelName] = {...data};\r\n    if(this.modelCallbacksStorage && this.modelCallbacksStorage[modelName]){\r\n      this.modelCallbacksStorage[modelName](this.modelsStorage[modelName]);\r\n    }\r\n  }\r\n  /**\r\n   * Подписывает на изменения модели\r\n   */\r\n  onUpdateModelStorage(modelName, callback){\r\n    this.modelCallbacksStorage = this.modelCallbacksStorage || {};\r\n    this.modelCallbacksStorage[modelName] = callback;\r\n    if(this.modelsStorage && this.modelsStorage[modelName]){\r\n      callback(this.modelsStorage[modelName]);\r\n    }\r\n  }\r\n  /**\r\n   * Парсит объект и извлекает из него строку со всеми классами у которых есть свойство prefixClass\r\n   * @return {string}\r\n   */\r\n\r\n  getPrefixClasses() {\r\n    let changeCss = _.toPairs(this.cssClassStorage);\r\n    let classStorage = ' ';\r\n    changeCss.forEach(element => {\r\n      classStorage += `${element[1]} `;\r\n    });\r\n    return classStorage;\r\n  }\r\n\r\n  /**\r\n   * Модель для карточки внутри виджетов\r\n   * @param {AltrpModel} model\r\n   * @param {null | int} index\r\n   */\r\n  setCardModel(model, index = null) {\r\n    let rootElement = this.getRoot();\r\n    if(! model){\r\n      rootElement.cardModel = null;\r\n      rootElement.isCard = false;\r\n      return;\r\n    }\r\n    if(! model instanceof AltrpModel){\r\n      model = new AltrpModel(model);\r\n    }\r\n    index = Number(index);\r\n    // model.setProperty('altrpIndex', index);\r\n    rootElement.cardModel = model;\r\n    rootElement.isCard = true;\r\n  }\r\n\r\n  /**\r\n   * Есть ли данные модели для карточки\r\n   * @return {boolean}\r\n   */\r\n  hasCardModel(){\r\n    let rootElement = this.getRoot();\r\n    if(! rootElement){\r\n      return false;\r\n    }\r\n    return ! ! (rootElement.cardModel && rootElement.isCard)\r\n  }\r\n  /**\r\n   * Получить данные модели для карточки\r\n   * @return {AltrpModel}\r\n   */\r\n  getCardModel(){\r\n    let model;\r\n    if(this.getType() === 'root-element'){\r\n      model = this.cardModel;\r\n    } else {\r\n      model = this.getRoot().cardModel;\r\n    }\r\n    if(! model instanceof AltrpModel){\r\n      model = new AltrpModel(model);\r\n    }\r\n    return model;\r\n  }\r\n\r\n\r\n  /**\r\n   * Возвращает текущую модель для элемента\r\n   * (для карточки на странице будут свои модели)\r\n   * @return {AltrpModel}\r\n   */\r\n  getCurrentModel(){\r\n    return this.hasCardModel() ? this.getCardModel() : (appStore.getState().currentModel || new AltrpModel);\r\n  }\r\n\r\n  /**\r\n   * Получить id поля\r\n   */\r\n  getFieldId(){\r\n    let fieldId = this.getSettings('field_id');\r\n    if(! fieldId){\r\n      return fieldId;\r\n    }\r\n    if(fieldId.indexOf('{{') !== -1){\r\n      fieldId = replaceContentWithData(fieldId, this.getCurrentModel().getData());\r\n    }\r\n    return fieldId;\r\n  }\r\n  /**\r\n   * Получить id поля\r\n   */\r\n  getFormId(){\r\n    let formId = this.getSettings('form_id');\r\n    if(! formId){\r\n      return formId;\r\n    }\r\n    if(formId.indexOf('{{') !== -1 && this.component){\r\n      formId = replaceContentWithData(formId, this.getCurrentModel().getData());\r\n    }\r\n    return formId;\r\n  }\r\n\r\n  updateFonts(){\r\n    let fonts = _.get(this.settings,'__altrpFonts__',{});\r\n\r\n    fonts = _.toPairs(fonts);\r\n    fonts.forEach(([settingName, font])=>{\r\n      appStore.dispatch(addFont(this.getId(), settingName, font));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Получить данные динамических настроек\r\n   * @param {string} dynamicSettingName\r\n   * @return {{} | null}\r\n   */\r\n  getDynamicSetting(dynamicSettingName){\r\n    return _.get(this.settings, `altrpDynamicSetting.${dynamicSettingName}`, null);\r\n  }\r\n\r\n  /**\r\n   * значение настройки в зависимости от разрешения\r\n   * @param {string} settingName\r\n   * @param {string} elementState\r\n   * @param _default\r\n   * @return {*}\r\n   */\r\n  getResponsiveSetting(settingName, elementState = '', _default){\r\n    return getResponsiveSetting(this.getSettings(), settingName, elementState, _default)\r\n  }\r\n\r\n  /**\r\n   * Возвращает текущий тип шаблона\r\n   * @return {string}\r\n   */\r\n  getTemplateType(){\r\n    const rootElement = this.getRoot();\r\n    return rootElement ? (rootElement.templateType || 'content') : 'content';\r\n  }\r\n\r\n  /**\r\n   * Обновляем настройки элемента на фронте с обновлением компонента\r\n   * @param value\r\n   * @param settingName\r\n   */\r\n  updateSetting(value, settingName = ''){\r\n    let newSettings;\r\n    if(! settingName && _.isObject(value)){\r\n       newSettings = {..._.assign(this.settings, value)};\r\n    }\r\n    if(settingName){\r\n      newSettings = {...this.settings};\r\n      _.set(newSettings, settingName, value);\r\n    }\r\n    if(newSettings){\r\n      this.settings = newSettings;\r\n      if(this.component){\r\n        this.component.setState(state => ({...state, settings: newSettings}));\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default FrontElement\r\n","export const ADD_FONT = 'ADD_FONT';\r\nexport const REMOVE_FONT = 'REMOVE_FONT';\r\n\r\n/**\r\n *\r\n * @param {string} elementId\r\n * @param {string} controllerName\r\n * @param {string} fontName\r\n * @return {{}} -\r\n *   {\r\n *     type: {string},\r\n *     metaValue: {},\r\n *     metaName: {string},\r\n *   }\r\n */\r\nexport function addFont(elementId, controllerName, fontName) {\r\n  return {\r\n    type: ADD_FONT,\r\n    elementId,\r\n    controllerName,\r\n    fontName\r\n  };\r\n}\r\n\r\n/**\r\n *\r\n * @param {string} elementId\r\n * @param {string} controllerName\r\n * @return {{}} -\r\n *   {\r\n *     type: {string},\r\n *     metaValue: {},\r\n *     metaName: {string},\r\n *   }\r\n */\r\nexport function removeFont(elementId, controllerName, ) {\r\n  return {\r\n    type: REMOVE_FONT,\r\n    elementId,\r\n    controllerName,\r\n\r\n  };\r\n}\r\n"],"sourceRoot":""}