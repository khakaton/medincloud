{"version":3,"sources":["webpack:///./node_modules/react-query/dist/react-query.mjs"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutPropertiesLoose","excluded","sourceKeys","keys","indexOf","statusLoading","statusError","statusSuccess","_uid","cancelledError","isServer","window","noop","Console","console","error","warn","log","functionalUpdate","updater","old","stableStringifyReplacer","_","value","isObject","concat","sort","map","_ref","a","Array","isArray","deepIncludes","b","some","isDocumentVisible","document","undefined","visibilityState","getQueryArgs","args","_args$","_queryKey","queryKey","_args$$variables","variables","_queryFn","queryFn","_args$$config","config","Error","_queryKey2","_args$2","_variables","_queryFn2","_args$3","_args$4","handleSuspense","queryInfo","suspense","useErrorBoundary","status","setTimeout","query","state","wasSuspended","refetch","configContext","defaultConfigRef","current","retry","retryDelay","attemptIndex","Math","min","pow","staleTime","cacheTime","refetchAllOnWindowFocus","refetchInterval","queryKeySerializerFn","defaultQueryKeySerializerFn","_unused","obj","queryHash","JSON","stringify","parse","queryFnParamsFilter","d","throwOnError","onMutate","onSuccess","onError","onSettled","refetchOnMount","isDataEqual","deepEqual","valueOf","_await","then","direct","Promise","resolve","_catch","body","recover","result","e","_async","f","reject","_invoke","queryCache","listeners","cache","queries","isFetching","notifyGlobalListeners","values","reduce","acc","forEach","subscribe","cb","push","splice","clear","findQueries","predicate","_temp","exact","_defaultConfigRef$cur","filter","getQueries","getQuery","getQueryData","_cache$getQuery","data","removeQueries","_temp2","foundQueries","clearTimeout","staleTimeout","cancelQueries","_temp3","cancel","refetchQueries","_temp4","_ref5","force","all","fetch","err","_buildQuery","userQueryKey","queryVariables","_config$queryKeySeria","options","reducer","queryReducer","defaultQueryReducer","noQueryHash","initialData","hasInitialData","isStale","manual","instances","type","actionInit","initialStatus","dispatch","action","onStateUpdate","scheduleStaleTimeout","Infinity","actionMarkStale","scheduleGarbageCollection","actionMarkGC","cacheTimeout","markedForGarbageCollection","heal","cancelled","cancelPromises","promise","updateInstance","instance","found","find","id","instanceId","tryFetchData","_len2","_key2","shouldContinueRetryOnFocus","_exit2","actionFailed","failureCount","delay","_result4","_temp6","_ref7","_ref7$__queryFn","__queryFn","callbackInstances","unshift","suspenseInstance","actionFetch","setData","actionError","setState","actionSetState","actionSuccess","makeQuery","prefetchQuery","_exit","_len","_key","_getQueryArgs","_getQueryArgs$","res","wasPrefetched","_result3","setQueryData","_temp5","_ref6","makeQueryCache","queryCacheContext","queryCaches","canFetchMore","updatedAt","Date","now","removePreviousHandler","callback","visibilityChangeEvent","focusEvent","useBaseQuery","ref","queryRef","newQuery","rerender","mounted","useMountedCallback","getLatestConfig","useGetLatest","rest","_catch$2","catch","currentRefetchInterval","clearInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","useQuery","usePaginatedQuery","lastDataRef","latestData","resolvedData","paginatedQuery","handleFocus","_window","addEventListener","removeEventListener","navigator","onLine","refetchOnWindowFocus"],"mappings":"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","file":"9981.9d844f70e9a49ab9b532.bundle.js","sourcesContent":["import React from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar statusIdle = 'idle';\nvar statusLoading = 'loading';\nvar statusError = 'error';\nvar statusSuccess = 'success';\nvar _uid = 0;\nvar uid = function uid() {\n  return _uid++;\n};\nvar cancelledError = {};\nvar isServer = typeof window === 'undefined';\nvar noop = function noop() {};\nvar identity = function identity(d) {\n  return d;\n};\nvar Console = console || {\n  error: noop,\n  warn: noop,\n  log: noop\n};\nfunction useUid() {\n  var ref = React.useRef(null);\n\n  if (ref.current === null) {\n    ref.current = uid();\n  }\n\n  return ref.current;\n}\nfunction setConsole(c) {\n  Console = c;\n}\nfunction useGetLatest(obj) {\n  var ref = React.useRef();\n  ref.current = obj;\n  return React.useCallback(function () {\n    return ref.current;\n  }, []);\n}\nfunction functionalUpdate(updater, old) {\n  return typeof updater === 'function' ? updater(old) : updater;\n}\nfunction stableStringifyReplacer(_, value) {\n  return isObject(value) ? Object.assign.apply(Object, [{}].concat(Object.keys(value).sort().map(function (key) {\n    var _ref;\n\n    return _ref = {}, _ref[key] = value[key], _ref;\n  }))) : value;\n}\nfunction stableStringify(obj) {\n  return JSON.stringify(obj, stableStringifyReplacer);\n}\nfunction isObject(a) {\n  return a && typeof a === 'object' && !Array.isArray(a);\n}\nfunction deepIncludes(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (typeof a !== typeof b) {\n    return false;\n  }\n\n  if (typeof a === 'object') {\n    return !Object.keys(b).some(function (key) {\n      return !deepIncludes(a[key], b[key]);\n    });\n  }\n\n  return false;\n}\nfunction isDocumentVisible() {\n  return typeof document === 'undefined' || document.visibilityState === undefined || document.visibilityState === 'visible' || document.visibilityState === 'prerender';\n}\nfunction isOnline() {\n  return navigator.onLine === undefined || navigator.onLine;\n}\nfunction getQueryArgs(args) {\n  if (isObject(args[0])) {\n    if (args[0].hasOwnProperty('queryKey') && args[0].hasOwnProperty('queryFn')) {\n      var _args$ = args[0],\n          _queryKey = _args$.queryKey,\n          _args$$variables = _args$.variables,\n          variables = _args$$variables === void 0 ? [] : _args$$variables,\n          _queryFn = _args$.queryFn,\n          _args$$config = _args$.config,\n          _config = _args$$config === void 0 ? {} : _args$$config;\n\n      return [_queryKey, variables, _queryFn, _config];\n    } else {\n      throw new Error('queryKey and queryFn keys are required.');\n    }\n  }\n\n  if (typeof args[2] === 'function') {\n    var _queryKey2 = args[0],\n        _args$2 = args[1],\n        _variables = _args$2 === void 0 ? [] : _args$2,\n        _queryFn2 = args[2],\n        _args$3 = args[3],\n        _config2 = _args$3 === void 0 ? {} : _args$3;\n\n    return [_queryKey2, _variables, _queryFn2, _config2];\n  }\n\n  var queryKey = args[0],\n      queryFn = args[1],\n      _args$4 = args[2],\n      config = _args$4 === void 0 ? {} : _args$4;\n  return [queryKey, [], queryFn, config];\n}\nfunction useMountedCallback(callback) {\n  var mounted = React.useRef(false);\n  React[isServer ? 'useEffect' : 'useLayoutEffect'](function () {\n    mounted.current = true;\n    return function () {\n      return mounted.current = false;\n    };\n  }, []);\n  return React.useCallback(function () {\n    return mounted.current ? callback.apply(void 0, arguments) : void 0;\n  }, [callback]);\n}\nfunction handleSuspense(queryInfo) {\n  if (queryInfo.config.suspense || queryInfo.config.useErrorBoundary) {\n    if (queryInfo.status === statusError) {\n      setTimeout(function () {\n        queryInfo.query.state.status = 'loading';\n      });\n      throw queryInfo.error;\n    }\n  }\n\n  if (queryInfo.config.suspense) {\n    if (queryInfo.status === statusLoading) {\n      queryInfo.query.wasSuspended = true;\n      throw queryInfo.refetch();\n    }\n  }\n} // This deep-equal is directly based on https://github.com/epoberezkin/fast-deep-equal.\n// The parts for comparing any non-JSON-supported values has been removed\n\nfunction deepEqual(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    var length, i, keys;\n\n    if (Array.isArray(a)) {\n      length = a.length; // eslint-disable-next-line eqeqeq\n\n      if (length != b.length) return false;\n\n      for (i = length; i-- !== 0;) {\n        if (!deepEqual(a[i], b[i])) return false;\n      }\n\n      return true;\n    }\n\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;) {\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n    }\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n      if (!deepEqual(a[key], b[key])) return false;\n    }\n\n    return true;\n  } // true if both NaN, false otherwise\n  // eslint-disable-next-line no-self-compare\n\n\n  return a !== a && b !== b;\n}\n\nvar configContext = React.createContext();\nvar DEFAULTS = {\n  retry: 3,\n  retryDelay: function retryDelay(attemptIndex) {\n    return Math.min(1000 * Math.pow(2, attemptIndex), 30000);\n  },\n  staleTime: 0,\n  cacheTime: 5 * 60 * 1000,\n  refetchAllOnWindowFocus: true,\n  refetchInterval: false,\n  suspense: false,\n  queryKeySerializerFn: defaultQueryKeySerializerFn,\n  queryFnParamsFilter: identity,\n  throwOnError: false,\n  useErrorBoundary: undefined,\n  // this will default to the suspense value\n  onMutate: noop,\n  onSuccess: noop,\n  onError: noop,\n  onSettled: noop,\n  refetchOnMount: true,\n  isDataEqual: deepEqual\n};\nvar defaultConfigRef = {\n  current: DEFAULTS\n};\nfunction useConfigContext() {\n  return React.useContext(configContext) || defaultConfigRef.current;\n}\nfunction ReactQueryConfigProvider(_ref) {\n  var config = _ref.config,\n      children = _ref.children;\n  var configContextValue = React.useContext(configContext);\n  var newConfig = React.useMemo(function () {\n    var newConfig = _extends({}, configContextValue || defaultConfigRef.current, config); // Default useErrorBoundary to the suspense value\n\n\n    if (typeof newConfig.useErrorBoundary === 'undefined') {\n      newConfig.useErrorBoundary = newConfig.suspense;\n    }\n\n    return newConfig;\n  }, [config, configContextValue]);\n  React.useEffect(function () {\n    // restore previous config on unmount\n    return function () {\n      defaultConfigRef.current = _extends({}, configContextValue || DEFAULTS); // Default useErrorBoundary to the suspense value\n\n      if (typeof defaultConfigRef.current.useErrorBoundary === 'undefined') {\n        defaultConfigRef.current.useErrorBoundary = defaultConfigRef.current.suspense;\n      }\n    };\n  }, [configContextValue]);\n\n  if (!configContextValue) {\n    defaultConfigRef.current = newConfig;\n  }\n\n  return /*#__PURE__*/React.createElement(configContext.Provider, {\n    value: newConfig\n  }, children);\n}\nfunction defaultQueryKeySerializerFn(queryKey) {\n  if (!queryKey) {\n    return [];\n  }\n\n  if (typeof queryKey === 'function') {\n    try {\n      return defaultQueryKeySerializerFn(queryKey());\n    } catch (_unused) {\n      return [];\n    }\n  }\n\n  if (typeof queryKey === 'string') {\n    queryKey = [queryKey];\n  }\n\n  var queryHash = stableStringify(queryKey);\n  queryKey = JSON.parse(queryHash);\n  return [queryHash, queryKey];\n}\n\nfunction _await(value, then, direct) {\n  if (direct) {\n    return then ? then(value) : value;\n  }\n\n  if (!value || !value.then) {\n    value = Promise.resolve(value);\n  }\n\n  return then ? value.then(then) : value;\n}\n\nfunction _catch(body, recover) {\n  try {\n    var result = body();\n  } catch (e) {\n    return recover(e);\n  }\n\n  if (result && result.then) {\n    return result.then(void 0, recover);\n  }\n\n  return result;\n}\n\nfunction _async(f) {\n  return function () {\n    for (var args = [], i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    try {\n      return Promise.resolve(f.apply(this, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\n\nfunction _invoke(body, then) {\n  var result = body();\n\n  if (result && result.then) {\n    return result.then(then);\n  }\n\n  return then(result);\n}\n\nvar queryCache = makeQueryCache();\nvar queryCacheContext = React.createContext(queryCache);\nvar queryCaches = [queryCache];\nfunction useQueryCache() {\n  return React.useContext(queryCacheContext);\n}\nfunction ReactQueryCacheProvider(_ref) {\n  var queryCache = _ref.queryCache,\n      children = _ref.children;\n  var cache = React.useMemo(function () {\n    return queryCache || makeQueryCache();\n  }, [queryCache]);\n  React.useEffect(function () {\n    queryCaches.push(cache);\n    return function () {\n      // remove the cache from the active list\n      var i = queryCaches.indexOf(cache);\n\n      if (i >= 0) {\n        queryCaches.splice(i, 1);\n      } // if the cache was created by us, we need to tear it down\n\n\n      if (queryCache == null) {\n        cache.clear();\n      }\n    };\n  }, [cache, queryCache]);\n  return /*#__PURE__*/React.createElement(queryCacheContext.Provider, {\n    value: cache\n  }, children);\n}\nvar actionInit = {};\nvar actionFailed = {};\nvar actionMarkStale = {};\nvar actionMarkGC = {};\nvar actionFetch = {};\nvar actionSuccess = {};\nvar actionError = {};\nvar actionSetState = {};\nfunction makeQueryCache() {\n  var listeners = [];\n  var cache = {\n    queries: {},\n    isFetching: 0\n  };\n\n  var notifyGlobalListeners = function notifyGlobalListeners() {\n    cache.isFetching = Object.values(cache.queries).reduce(function (acc, query) {\n      return query.state.isFetching ? acc + 1 : acc;\n    }, 0);\n    listeners.forEach(function (d) {\n      return d(cache);\n    });\n  };\n\n  cache.subscribe = function (cb) {\n    listeners.push(cb);\n    return function () {\n      listeners.splice(listeners.indexOf(cb), 1);\n    };\n  };\n\n  cache.clear = function () {\n    Object.values(cache.queries).forEach(function (query) {\n      return query.clear();\n    });\n    cache.queries = {};\n    notifyGlobalListeners();\n  };\n\n  var findQueries = function findQueries(predicate, _temp) {\n    var _ref2 = _temp === void 0 ? {} : _temp,\n        exact = _ref2.exact;\n\n    if (typeof predicate !== 'function') {\n      var _defaultConfigRef$cur = defaultConfigRef.current.queryKeySerializerFn(predicate),\n          queryHash = _defaultConfigRef$cur[0],\n          queryKey = _defaultConfigRef$cur[1];\n\n      predicate = function predicate(d) {\n        return exact ? d.queryHash === queryHash : deepIncludes(d.queryKey, queryKey);\n      };\n    }\n\n    return Object.values(cache.queries).filter(predicate);\n  };\n\n  cache.getQueries = findQueries;\n\n  cache.getQuery = function (queryKey) {\n    return findQueries(queryKey, {\n      exact: true\n    })[0];\n  };\n\n  cache.getQueryData = function (queryKey) {\n    var _cache$getQuery;\n\n    return (_cache$getQuery = cache.getQuery(queryKey)) == null ? void 0 : _cache$getQuery.state.data;\n  };\n\n  cache.removeQueries = function (predicate, _temp2) {\n    var _ref3 = _temp2 === void 0 ? {} : _temp2,\n        exact = _ref3.exact;\n\n    var foundQueries = findQueries(predicate, {\n      exact: exact\n    });\n    foundQueries.forEach(function (query) {\n      clearTimeout(query.staleTimeout);\n      delete cache.queries[query.queryHash];\n    });\n\n    if (foundQueries.length) {\n      notifyGlobalListeners();\n    }\n  };\n\n  cache.cancelQueries = function (predicate, _temp3) {\n    var _ref4 = _temp3 === void 0 ? {} : _temp3,\n        exact = _ref4.exact;\n\n    var foundQueries = findQueries(predicate, {\n      exact: exact\n    });\n    foundQueries.forEach(function (query) {\n      query.cancel();\n    });\n\n    if (foundQueries.length) {\n      notifyGlobalListeners();\n    }\n  };\n\n  cache.refetchQueries = _async(function (predicate, _temp4) {\n    var _ref5 = _temp4 === void 0 ? {} : _temp4,\n        exact = _ref5.exact,\n        throwOnError = _ref5.throwOnError,\n        force = _ref5.force;\n\n    var foundQueries = predicate === true ? Object.values(cache.queries) : findQueries(predicate, {\n      exact: exact\n    });\n    return _catch(function () {\n      return _await(Promise.all(foundQueries.map(function (query) {\n        return query.fetch({\n          force: force\n        });\n      })));\n    }, function (err) {\n      if (throwOnError) {\n        throw err;\n      }\n    });\n  });\n\n  cache._buildQuery = function (userQueryKey, queryVariables, queryFn, config) {\n    var _config$queryKeySeria = config.queryKeySerializerFn(userQueryKey),\n        queryHash = _config$queryKeySeria[0],\n        queryKey = _config$queryKeySeria[1];\n\n    var query = cache.queries[queryHash];\n\n    if (query) {\n      Object.assign(query, {\n        queryVariables: queryVariables,\n        queryFn: queryFn\n      });\n      query.config = _extends({}, query.config, config);\n    } else {\n      query = makeQuery({\n        cache: cache,\n        queryKey: queryKey,\n        queryHash: queryHash,\n        queryVariables: queryVariables,\n        queryFn: queryFn,\n        config: config\n      }); // If the query started with data, schedule\n      // a stale timeout\n\n      if (!isServer && query.state.data) {\n        query.scheduleStaleTimeout(); // Simulate a query healing process\n\n        query.heal(); // Schedule for garbage collection in case\n        // nothing subscribes to this query\n\n        query.scheduleGarbageCollection();\n      }\n\n      if (query.queryHash) {\n        if (!isServer) {\n          cache.queries[queryHash] = query; // Here, we setTimeout so as to not trigger\n          // any setState's in parent components in the\n          // middle of the render phase.\n\n          setTimeout(function () {\n            notifyGlobalListeners();\n          });\n        }\n      }\n    }\n\n    return query;\n  };\n\n  cache.prefetchQuery = _async(function () {\n    var _exit = false;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var _getQueryArgs = getQueryArgs(args),\n        queryKey = _getQueryArgs[0],\n        queryVariables = _getQueryArgs[1],\n        queryFn = _getQueryArgs[2],\n        _getQueryArgs$ = _getQueryArgs[3],\n        force = _getQueryArgs$.force,\n        config = _objectWithoutPropertiesLoose(_getQueryArgs$, [\"force\"]);\n\n    config = _extends({}, defaultConfigRef.current, config);\n\n    var query = cache._buildQuery(queryKey, queryVariables, queryFn, config); // Don't prefetch queries that are fresh, unless force is passed\n\n\n    return _invoke(function () {\n      if (query.state.isStale || force) {\n        // Trigger a fetch and return the promise\n        return _catch(function () {\n          return _await(query.fetch({\n            force: force\n          }), function (res) {\n            query.wasPrefetched = true;\n            _exit = true;\n            return res;\n          });\n        }, function (err) {\n          if (config.throwOnError) {\n            throw err;\n          }\n        });\n      }\n    }, function (_result3) {\n      return _exit ? _result3 : query.state.data;\n    });\n  });\n\n  cache.setQueryData = function (queryKey, updater, _temp5) {\n    var _ref6 = _temp5 === void 0 ? {} : _temp5,\n        exact = _ref6.exact,\n        config = _objectWithoutPropertiesLoose(_ref6, [\"exact\"]);\n\n    var queries = findQueries(queryKey, {\n      exact: exact\n    });\n\n    if (!queries.length && typeof queryKey !== 'function') {\n      queries = [cache._buildQuery(queryKey, undefined, function () {\n        return Promise.resolve();\n      }, _extends({}, defaultConfigRef.current, config))];\n    }\n\n    queries.forEach(function (d) {\n      return d.setData(updater);\n    });\n  };\n\n  function makeQuery(options) {\n    var queryCache = options.cache;\n    var reducer = options.config.queryReducer || defaultQueryReducer;\n    var noQueryHash = typeof options.queryHash === 'undefined';\n    var initialData = typeof options.config.initialData === 'function' ? options.config.initialData() : options.config.initialData;\n    var hasInitialData = typeof initialData !== 'undefined';\n    var isStale = noQueryHash ? true : !hasInitialData;\n    var manual = options.config.manual;\n    var initialStatus = noQueryHash || manual || hasInitialData ? statusSuccess : statusLoading;\n\n    var query = _extends({}, options, {\n      instances: [],\n      state: reducer(undefined, {\n        type: actionInit,\n        initialStatus: initialStatus,\n        initialData: initialData,\n        hasInitialData: hasInitialData,\n        isStale: isStale,\n        manual: manual\n      })\n    });\n\n    var dispatch = function dispatch(action) {\n      query.state = reducer(query.state, action);\n      query.instances.forEach(function (d) {\n        return d.onStateUpdate(query.state);\n      });\n      notifyGlobalListeners();\n    };\n\n    query.scheduleStaleTimeout = function () {\n      if (query.config.staleTime === Infinity) {\n        return;\n      }\n\n      query.staleTimeout = setTimeout(function () {\n        if (queryCache.getQuery(query.queryKey)) {\n          dispatch({\n            type: actionMarkStale\n          });\n        }\n      }, query.config.staleTime);\n    };\n\n    query.scheduleGarbageCollection = function () {\n      if (query.config.cacheTime === Infinity) {\n        return;\n      }\n\n      dispatch({\n        type: actionMarkGC\n      });\n      query.cacheTimeout = setTimeout(function () {\n        cache.removeQueries(function (d) {\n          return d.state.markedForGarbageCollection && d.queryHash === query.queryHash;\n        });\n      }, typeof query.state.data === 'undefined' && query.state.status !== 'error' ? 0 : query.config.cacheTime);\n    };\n\n    query.heal = function () {\n      // Stop the query from being garbage collected\n      clearTimeout(query.cacheTimeout); // Mark the query as not cancelled\n\n      query.cancelled = null;\n    };\n\n    query.cancel = function () {\n      query.cancelled = cancelledError;\n\n      if (query.cancelPromises) {\n        query.cancelPromises();\n      }\n\n      delete query.promise;\n      notifyGlobalListeners();\n    };\n\n    query.updateInstance = function (instance) {\n      var found = query.instances.find(function (d) {\n        return d.id === instance.id;\n      });\n\n      if (found) {\n        Object.assign(found, instance);\n      } else {\n        found = _extends({\n          onStateUpdate: noop\n        }, instance);\n        query.instances.push(instance);\n      }\n    };\n\n    query.subscribe = function (instanceId) {\n      query.heal(); // Return the unsubscribe function\n\n      return function () {\n        query.instances = query.instances.filter(function (d) {\n          return d.id !== instanceId;\n        });\n\n        if (!query.instances.length) {\n          query.cancel(); // Schedule garbage collection\n\n          query.scheduleGarbageCollection();\n        }\n      };\n    }; // Set up the fetch function\n\n\n    var tryFetchData = _async(function (queryFn) {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      return _catch(function () {\n        // Perform the query\n        var promise = queryFn.apply(void 0, query.config.queryFnParamsFilter(args));\n\n        query.cancelPromises = function () {\n          return promise.cancel == null ? void 0 : promise.cancel();\n        };\n\n        return _await(promise, function (data) {\n          delete query.shouldContinueRetryOnFocus;\n          delete query.cancelPromises;\n          if (query.cancelled) throw query.cancelled;\n          return data;\n        });\n      }, function (error) {\n        var _exit2 = false;\n        delete query.cancelPromises;\n        if (query.cancelled) throw query.cancelled; // If we fail, increase the failureCount\n\n        dispatch({\n          type: actionFailed\n        }); // Do we need to retry the request?\n\n        return _invoke(function () {\n          if (query.config.retry === true || query.state.failureCount <= query.config.retry || typeof query.config.retry === 'function' && query.config.retry(query.state.failureCount, error)) {\n            // Only retry if the document is visible\n            if (!isDocumentVisible()) {\n              // set this flag to continue fetch retries on focus\n              query.shouldContinueRetryOnFocus = true;\n              _exit2 = true;\n              return new Promise(noop);\n            }\n\n            delete query.shouldContinueRetryOnFocus; // Determine the retryDelay\n\n            var delay = functionalUpdate(query.config.retryDelay, query.state.failureCount); // Return a new promise with the retry\n\n            _exit2 = true;\n            return _await(new Promise(function (resolve, reject) {\n              // Keep track of the retry timeout\n              setTimeout(_async(function () {\n                return query.cancelled ? reject(query.cancelled) : _catch(function () {\n                  return _await(tryFetchData.apply(void 0, [queryFn].concat(args)), function (data) {\n                    if (query.cancelled) return reject(query.cancelled);\n                    resolve(data);\n                  });\n                }, function (error) {\n                  if (query.cancelled) return reject(query.cancelled);\n                  reject(error);\n                });\n              }), delay);\n            }));\n          }\n        }, function (_result4) {\n          if (_exit2) return _result4;\n          throw error;\n        });\n      });\n    });\n\n    query.fetch = _async(function (_temp6) {\n      var _ref7 = _temp6 === void 0 ? {} : _temp6,\n          force = _ref7.force,\n          _ref7$__queryFn = _ref7.__queryFn,\n          __queryFn = _ref7$__queryFn === void 0 ? query.queryFn : _ref7$__queryFn;\n\n      // Don't refetch fresh queries that don't have a queryHash\n      if (!query.queryHash || !query.state.isStale && !force) {\n        return;\n      } // Create a new promise for the query cache if necessary\n\n\n      if (!query.promise) {\n        query.promise = _async(function () {\n          // If there are any retries pending for this query, kill them\n          query.cancelled = null;\n          var callbackInstances = [].concat(query.instances);\n\n          if (query.wasSuspended) {\n            callbackInstances.unshift(query.suspenseInstance);\n          }\n\n          return _catch(function () {\n            // Set up the query refreshing state\n            dispatch({\n              type: actionFetch\n            }); // Try to fetch\n\n            return _await(tryFetchData.apply(void 0, [__queryFn].concat(query.queryKey, query.queryVariables)), function (data) {\n              query.setData(function (old) {\n                return query.config.isDataEqual(old, data) ? old : data;\n              });\n              callbackInstances.forEach(function (instance) {\n                return instance.onSuccess && instance.onSuccess(query.state.data);\n              });\n              callbackInstances.forEach(function (instance) {\n                return instance.onSettled && instance.onSettled(query.state.data, null);\n              });\n              delete query.promise;\n              return data;\n            });\n          }, function (error) {\n            dispatch({\n              type: actionError,\n              cancelled: error === query.cancelled,\n              error: error\n            });\n            delete query.promise;\n\n            if (error !== query.cancelled) {\n              callbackInstances.forEach(function (instance) {\n                return instance.onError && instance.onError(error);\n              });\n              callbackInstances.forEach(function (instance) {\n                return instance.onSettled && instance.onSettled(undefined, error);\n              });\n              throw error;\n            }\n          });\n        })();\n      }\n\n      return query.promise;\n    });\n\n    query.setState = function (updater) {\n      return dispatch({\n        type: actionSetState,\n        updater: updater\n      });\n    };\n\n    query.setData = function (updater) {\n      // Set data and mark it as cached\n      dispatch({\n        type: actionSuccess,\n        updater: updater\n      }); // Schedule a fresh invalidation!\n\n      clearTimeout(query.staleTimeout);\n      query.scheduleStaleTimeout();\n    };\n\n    query.clear = function () {\n      clearTimeout(query.staleTimeout);\n      clearTimeout(query.cacheTimeout);\n      query.cancel();\n    };\n\n    return query;\n  }\n\n  return cache;\n}\nfunction defaultQueryReducer(state, action) {\n  switch (action.type) {\n    case actionInit:\n      return {\n        status: action.initialStatus,\n        error: null,\n        isFetching: action.hasInitialData || action.manual ? false : action.initialStatus === 'loading',\n        canFetchMore: false,\n        failureCount: 0,\n        isStale: action.isStale,\n        markedForGarbageCollection: false,\n        data: action.initialData,\n        updatedAt: action.hasInitialData ? Date.now() : 0\n      };\n\n    case actionFailed:\n      return _extends({}, state, {\n        failureCount: state.failureCount + 1\n      });\n\n    case actionMarkStale:\n      return _extends({}, state, {\n        isStale: true\n      });\n\n    case actionMarkGC:\n      {\n        return _extends({}, state, {\n          markedForGarbageCollection: true\n        });\n      }\n\n    case actionFetch:\n      return _extends({}, state, {\n        status: state.status === statusError ? statusLoading : state.status,\n        isFetching: true,\n        failureCount: 0\n      });\n\n    case actionSuccess:\n      return _extends({}, state, {\n        status: statusSuccess,\n        data: functionalUpdate(action.updater, state.data),\n        error: null,\n        isStale: false,\n        isFetching: false,\n        canFetchMore: action.canFetchMore,\n        updatedAt: Date.now(),\n        failureCount: 0\n      });\n\n    case actionError:\n      return _extends({}, state, {\n        isFetching: false,\n        isStale: true\n      }, !action.cancelled && {\n        status: statusError,\n        error: action.error\n      });\n\n    case actionSetState:\n      return functionalUpdate(action.updater, state);\n\n    default:\n      throw new Error();\n  }\n}\n\nvar visibilityChangeEvent = 'visibilitychange';\nvar focusEvent = 'focus';\n\nvar onWindowFocus = function onWindowFocus() {\n  var refetchAllOnWindowFocus = defaultConfigRef.current.refetchAllOnWindowFocus;\n\n  if (isDocumentVisible() && isOnline()) {\n    queryCaches.forEach(function (queryCache) {\n      return queryCache.refetchQueries(function (query) {\n        if (!query.instances.length) {\n          return false;\n        }\n\n        if (query.config.manual === true) {\n          return false;\n        }\n\n        if (query.shouldContinueRetryOnFocus) {\n          // delete promise, so `fetch` will create new one\n          delete query.promise;\n          return true;\n        }\n\n        if (typeof query.config.refetchOnWindowFocus === 'undefined') {\n          return refetchAllOnWindowFocus;\n        } else {\n          return query.config.refetchOnWindowFocus;\n        }\n      }).catch(Console.error);\n    });\n  }\n};\n\nvar removePreviousHandler;\nfunction setFocusHandler(callback) {\n  // Unsub the old watcher\n  if (removePreviousHandler) {\n    removePreviousHandler();\n  } // Sub the new watcher\n\n\n  removePreviousHandler = callback(onWindowFocus);\n}\nsetFocusHandler(function (handleFocus) {\n  var _window;\n\n  // Listen to visibillitychange and focus\n  if (!isServer && ((_window = window) == null ? void 0 : _window.addEventListener)) {\n    window.addEventListener(visibilityChangeEvent, handleFocus, false);\n    window.addEventListener(focusEvent, handleFocus, false);\n    return function () {\n      // Be sure to unsubscribe if a new handler is set\n      window.removeEventListener(visibilityChangeEvent, handleFocus);\n      window.removeEventListener(focusEvent, handleFocus);\n    };\n  }\n});\n\nfunction useIsFetching() {\n  var queryCache = useQueryCache();\n\n  var _React$useState = React.useState({}),\n      state = _React$useState[0],\n      setState = _React$useState[1];\n\n  React.useEffect(function () {\n    return queryCache.subscribe(function () {\n      return setState({});\n    });\n  }, []);\n  return React.useMemo(function () {\n    return state && queryCache.isFetching;\n  }, [state]);\n}\n\nfunction _await$1(value, then, direct) {\n  if (direct) {\n    return then ? then(value) : value;\n  }\n\n  if (!value || !value.then) {\n    value = Promise.resolve(value);\n  }\n\n  return then ? value.then(then) : value;\n}\n\nvar getDefaultState = function getDefaultState() {\n  return {\n    status: statusIdle,\n    data: undefined,\n    error: null\n  };\n};\n\nfunction _empty() {}\n\nvar actionReset = {};\n\nfunction _awaitIgnored(value, direct) {\n  if (!direct) {\n    return value && value.then ? value.then(_empty) : Promise.resolve();\n  }\n}\n\nvar actionLoading = {};\n\nfunction _invoke$1(body, then) {\n  var result = body();\n\n  if (result && result.then) {\n    return result.then(then);\n  }\n\n  return then(result);\n}\n\nvar actionResolve = {};\n\nfunction _catch$1(body, recover) {\n  try {\n    var result = body();\n  } catch (e) {\n    return recover(e);\n  }\n\n  if (result && result.then) {\n    return result.then(void 0, recover);\n  }\n\n  return result;\n}\n\nvar actionReject = {};\n\nfunction _async$1(f) {\n  return function () {\n    for (var args = [], i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    try {\n      return Promise.resolve(f.apply(this, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\n\nfunction mutationReducer(state, action) {\n  if (action.type === actionReset) {\n    return getDefaultState();\n  }\n\n  if (action.type === actionLoading) {\n    return {\n      status: statusLoading\n    };\n  }\n\n  if (action.type === actionResolve) {\n    return {\n      status: statusSuccess,\n      data: action.data\n    };\n  }\n\n  if (action.type === actionReject) {\n    return {\n      status: statusError,\n      error: action.error\n    };\n  }\n\n  throw new Error();\n}\n\nfunction useMutation(mutationFn, config) {\n  if (config === void 0) {\n    config = {};\n  }\n\n  var _React$useReducer = React.useReducer(mutationReducer, null, getDefaultState),\n      state = _React$useReducer[0],\n      unsafeDispatch = _React$useReducer[1];\n\n  var dispatch = useMountedCallback(unsafeDispatch);\n  var getMutationFn = useGetLatest(mutationFn);\n  var getConfig = useGetLatest(_extends({}, useConfigContext(), config));\n  var latestMutationRef = React.useRef();\n  var mutate = React.useCallback(_async$1(function (variables, _temp) {\n    var _ref = _temp === void 0 ? {} : _temp,\n        _ref$onSuccess = _ref.onSuccess,\n        onSuccess = _ref$onSuccess === void 0 ? noop : _ref$onSuccess,\n        _ref$onError = _ref.onError,\n        onError = _ref$onError === void 0 ? noop : _ref$onError,\n        _ref$onSettled = _ref.onSettled,\n        onSettled = _ref$onSettled === void 0 ? noop : _ref$onSettled,\n        throwOnError = _ref.throwOnError;\n\n    var config = getConfig();\n    var mutationId = uid();\n    latestMutationRef.current = mutationId;\n\n    var isLatest = function isLatest() {\n      return latestMutationRef.current === mutationId;\n    };\n\n    dispatch({\n      type: actionLoading\n    });\n    var snapshotValue;\n    return _catch$1(function () {\n      return _await$1(config.onMutate(variables), function (_config$onMutate) {\n        snapshotValue = _config$onMutate;\n        var data;\n        return _invoke$1(function () {\n          if (isLatest()) {\n            return _await$1(getMutationFn()(variables), function (_getMutationFn) {\n              data = _getMutationFn;\n            });\n          }\n        }, function () {\n          return _invoke$1(function () {\n            if (isLatest()) {\n              return _awaitIgnored(onSuccess(data, variables));\n            }\n          }, function () {\n            return _invoke$1(function () {\n              if (isLatest()) {\n                return _awaitIgnored(config.onSuccess(data, variables));\n              }\n            }, function () {\n              return _invoke$1(function () {\n                if (isLatest()) {\n                  return _awaitIgnored(onSettled(data, null, variables));\n                }\n              }, function () {\n                return _invoke$1(function () {\n                  if (isLatest()) {\n                    return _awaitIgnored(config.onSettled(data, null, variables));\n                  }\n                }, function () {\n                  if (isLatest()) {\n                    dispatch({\n                      type: actionResolve,\n                      data: data\n                    });\n                  }\n\n                  return data;\n                });\n              });\n            });\n          });\n        });\n      });\n    }, function (error) {\n      return _invoke$1(function () {\n        if (isLatest()) {\n          Console.error(error);\n          return _awaitIgnored(onError(error, variables, snapshotValue));\n        }\n      }, function () {\n        return _invoke$1(function () {\n          if (isLatest()) {\n            return _awaitIgnored(config.onError(error, variables, snapshotValue));\n          }\n        }, function () {\n          return _invoke$1(function () {\n            if (isLatest()) {\n              return _awaitIgnored(onSettled(undefined, error, variables, snapshotValue));\n            }\n          }, function () {\n            return _invoke$1(function () {\n              if (isLatest()) {\n                return _awaitIgnored(config.onSettled(undefined, error, variables, snapshotValue));\n              }\n            }, function () {\n              if (isLatest()) {\n                dispatch({\n                  type: actionReject,\n                  error: error\n                });\n\n                if (throwOnError != null ? throwOnError : config.throwOnError) {\n                  throw error;\n                }\n              }\n            });\n          });\n        });\n      });\n    });\n  }), [dispatch, getConfig, getMutationFn]);\n  var reset = React.useCallback(function () {\n    return dispatch({\n      type: actionReset\n    });\n  }, [dispatch]);\n  React.useEffect(function () {\n    if (getConfig().useErrorBoundary && state.error) {\n      throw state.error;\n    }\n  }, [getConfig, state.error]);\n  return [mutate, _extends({}, state, {\n    reset: reset\n  })];\n}\n\nfunction _await$2(value, then, direct) {\n  if (direct) {\n    return then ? then(value) : value;\n  }\n\n  if (!value || !value.then) {\n    value = Promise.resolve(value);\n  }\n\n  return then ? value.then(then) : value;\n}\n\nfunction _catch$2(body, recover) {\n  try {\n    var result = body();\n  } catch (e) {\n    return recover(e);\n  }\n\n  if (result && result.then) {\n    return result.then(void 0, recover);\n  }\n\n  return result;\n}\n\nfunction _async$2(f) {\n  return function () {\n    for (var args = [], i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    try {\n      return Promise.resolve(f.apply(this, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\n\nfunction useBaseQuery(queryKey, queryVariables, queryFn, config) {\n  if (config === void 0) {\n    config = {};\n  }\n\n  var instanceId = useUid();\n  config = _extends({}, useConfigContext(), config);\n  var queryCache = useQueryCache();\n  var queryRef = React.useRef();\n\n  var newQuery = queryCache._buildQuery(queryKey, queryVariables, queryFn, config);\n\n  var useCachedQuery = queryRef.current && typeof queryRef.current.queryHash === 'undefined' && typeof newQuery.queryHash === 'undefined'; // Do not use new query with undefined queryHash, if previous query also had undefined queryHash.\n  // Otherwise this will cause infinite loop.\n\n  if (!useCachedQuery) {\n    queryRef.current = newQuery;\n  }\n\n  var query = queryRef.current;\n\n  var _React$useState = React.useState(),\n      unsafeRerender = _React$useState[1];\n\n  var rerender = useMountedCallback(unsafeRerender);\n  var getLatestConfig = useGetLatest(config);\n  var refetch = React.useCallback(_async$2(function (_temp) {\n    var _ref = _temp === void 0 ? {} : _temp,\n        throwOnError = _ref.throwOnError,\n        rest = _objectWithoutPropertiesLoose(_ref, [\"throwOnError\"]);\n\n    return _catch$2(function () {\n      return _await$2(query.fetch(rest));\n    }, function (err) {\n      if (throwOnError) {\n        throw err;\n      }\n    });\n  }), [query]);\n  query.suspenseInstance = {\n    onSuccess: function onSuccess(data) {\n      return getLatestConfig().onSuccess(data);\n    },\n    onError: function onError(err) {\n      return getLatestConfig().onError(err);\n    },\n    onSettled: function onSettled(data, err) {\n      return getLatestConfig().onSettled(data, err);\n    }\n  }; // After mount, subscribe to the query\n\n  React.useEffect(function () {\n    // Update the instance to the query again, but not as a placeholder\n    query.updateInstance({\n      id: instanceId,\n      onStateUpdate: function onStateUpdate() {\n        return rerender({});\n      },\n      onSuccess: function onSuccess(data) {\n        return getLatestConfig().onSuccess(data);\n      },\n      onError: function onError(err) {\n        return getLatestConfig().onError(err);\n      },\n      onSettled: function onSettled(data, err) {\n        return getLatestConfig().onSettled(data, err);\n      }\n    });\n    return query.subscribe(instanceId);\n  }, [getLatestConfig, instanceId, query, rerender]);\n  React.useEffect(function () {\n    // Perform the initial fetch for this query if necessary\n    if (!getLatestConfig().manual && // Don't auto fetch if config is set to manual query\n    !query.wasPrefetched && // Don't double fetch for prefetched queries\n    !query.wasSuspended && // Don't double fetch for suspense\n    query.state.isStale && ( // Only refetch if stale\n    getLatestConfig().refetchOnMount || query.instances.length === 1)) {\n      refetch().catch(Console.error);\n    }\n\n    query.wasPrefetched = false;\n    query.wasSuspended = false;\n  }, [getLatestConfig, query, refetch]); // Handle refetch interval\n\n  React.useEffect(function () {\n    var query = queryRef.current;\n\n    if (config.refetchInterval && (!query.currentRefetchInterval || // shorter interval should override previous one\n    config.refetchInterval < query.currentRefetchInterval)) {\n      query.currentRefetchInterval = config.refetchInterval;\n      clearInterval(query.refetchIntervalId);\n      query.refetchIntervalId = setInterval(function () {\n        if (isDocumentVisible() || config.refetchIntervalInBackground) {\n          refetch().catch(Console.error);\n        }\n      }, config.refetchInterval);\n      return function () {\n        clearInterval(query.refetchIntervalId);\n        delete query.refetchIntervalId;\n        delete query.currentRefetchInterval;\n      };\n    }\n  }, [config.refetchInterval, config.refetchIntervalInBackground, refetch]);\n  return _extends({}, query.state, {\n    config: config,\n    query: query,\n    refetch: refetch\n  });\n}\n\nfunction useQuery() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var query = useBaseQuery.apply(void 0, getQueryArgs(args));\n  handleSuspense(query);\n  return query;\n}\n\nfunction usePaginatedQuery() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var _getQueryArgs = getQueryArgs(args),\n      queryKey = _getQueryArgs[0],\n      queryVariables = _getQueryArgs[1],\n      queryFn = _getQueryArgs[2],\n      _getQueryArgs$ = _getQueryArgs[3],\n      config = _getQueryArgs$ === void 0 ? {} : _getQueryArgs$;\n\n  var lastDataRef = React.useRef();\n\n  if (!queryKey) {\n    lastDataRef.current = undefined;\n  } // If latestData is set, don't use initialData\n\n\n  if (typeof lastDataRef.current !== 'undefined') {\n    delete config.initialData;\n  }\n\n  var query = useBaseQuery(queryKey, queryVariables, queryFn, config);\n  var latestData = query.data,\n      status = query.status;\n  React.useEffect(function () {\n    if (status === 'success' && typeof latestData !== 'undefined') {\n      lastDataRef.current = latestData;\n    }\n  }, [latestData, status]);\n  var resolvedData = latestData;\n\n  if (typeof resolvedData === 'undefined') {\n    resolvedData = lastDataRef.current;\n  }\n\n  if (typeof resolvedData !== 'undefined') {\n    status = 'success';\n  }\n\n  var paginatedQuery = _extends({}, query, {\n    resolvedData: resolvedData,\n    latestData: latestData,\n    status: status\n  });\n\n  handleSuspense(paginatedQuery);\n  return paginatedQuery;\n}\n\nfunction _await$3(value, then, direct) {\n  if (direct) {\n    return then ? then(value) : value;\n  }\n\n  if (!value || !value.then) {\n    value = Promise.resolve(value);\n  }\n\n  return then ? value.then(then) : value;\n}\n\nfunction _empty$1() {}\n\nfunction _invokeIgnored(body) {\n  var result = body();\n\n  if (result && result.then) {\n    return result.then(_empty$1);\n  }\n}\n\nfunction _settle(pact, state, value) {\n  if (!pact.s) {\n    if (value instanceof _Pact) {\n      if (value.s) {\n        if (state & 1) {\n          state = value.s;\n        }\n\n        value = value.v;\n      } else {\n        value.o = _settle.bind(null, pact, state);\n        return;\n      }\n    }\n\n    if (value && value.then) {\n      value.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n      return;\n    }\n\n    pact.s = state;\n    pact.v = value;\n    var observer = pact.o;\n\n    if (observer) {\n      observer(pact);\n    }\n  }\n}\n\nvar _Pact = /*#__PURE__*/function () {\n  function _Pact() {}\n\n  _Pact.prototype.then = function (onFulfilled, onRejected) {\n    var result = new _Pact();\n    var state = this.s;\n\n    if (state) {\n      var callback = state & 1 ? onFulfilled : onRejected;\n\n      if (callback) {\n        try {\n          _settle(result, 1, callback(this.v));\n        } catch (e) {\n          _settle(result, 2, e);\n        }\n\n        return result;\n      } else {\n        return this;\n      }\n    }\n\n    this.o = function (_this) {\n      try {\n        var value = _this.v;\n\n        if (_this.s & 1) {\n          _settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n        } else if (onRejected) {\n          _settle(result, 1, onRejected(value));\n        } else {\n          _settle(result, 2, value);\n        }\n      } catch (e) {\n        _settle(result, 2, e);\n      }\n    };\n\n    return result;\n  };\n\n  return _Pact;\n}();\n\nfunction _isSettledPact(thenable) {\n  return thenable instanceof _Pact && thenable.s & 1;\n}\n\nfunction _do(body, test) {\n  var awaitBody;\n\n  do {\n    var result = body();\n\n    if (result && result.then) {\n      if (_isSettledPact(result)) {\n        result = result.v;\n      } else {\n        awaitBody = true;\n        break;\n      }\n    }\n\n    var shouldContinue = test();\n\n    if (_isSettledPact(shouldContinue)) {\n      shouldContinue = shouldContinue.v;\n    }\n\n    if (!shouldContinue) {\n      return result;\n    }\n  } while (!shouldContinue.then);\n\n  var pact = new _Pact();\n\n  var reject = _settle.bind(null, pact, 2);\n\n  (awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n  return pact;\n\n  function _resumeAfterBody(value) {\n    result = value;\n\n    for (;;) {\n      shouldContinue = test();\n\n      if (_isSettledPact(shouldContinue)) {\n        shouldContinue = shouldContinue.v;\n      }\n\n      if (!shouldContinue) {\n        break;\n      }\n\n      if (shouldContinue.then) {\n        shouldContinue.then(_resumeAfterTest).then(void 0, reject);\n        return;\n      }\n\n      result = body();\n\n      if (result && result.then) {\n        if (_isSettledPact(result)) {\n          result = result.v;\n        } else {\n          result.then(_resumeAfterBody).then(void 0, reject);\n          return;\n        }\n      }\n    }\n\n    _settle(pact, 1, result);\n  }\n\n  function _resumeAfterTest(shouldContinue) {\n    if (shouldContinue) {\n      do {\n        result = body();\n\n        if (result && result.then) {\n          if (_isSettledPact(result)) {\n            result = result.v;\n          } else {\n            result.then(_resumeAfterBody).then(void 0, reject);\n            return;\n          }\n        }\n\n        shouldContinue = test();\n\n        if (_isSettledPact(shouldContinue)) {\n          shouldContinue = shouldContinue.v;\n        }\n\n        if (!shouldContinue) {\n          _settle(pact, 1, result);\n\n          return;\n        }\n      } while (!shouldContinue.then);\n\n      shouldContinue.then(_resumeAfterTest).then(void 0, reject);\n    } else {\n      _settle(pact, 1, result);\n    }\n  }\n}\n\nfunction _continue(value, then) {\n  return value && value.then ? value.then(then) : then(value);\n}\n\nfunction _async$3(f) {\n  return function () {\n    for (var args = [], i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    try {\n      return Promise.resolve(f.apply(this, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\n\nfunction _rethrow(thrown, value) {\n  if (thrown) throw value;\n  return value;\n}\n\nfunction _finallyRethrows(body, finalizer) {\n  try {\n    var result = body();\n  } catch (e) {\n    return finalizer(true, e);\n  }\n\n  if (result && result.then) {\n    return result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n  }\n\n  return finalizer(false, result);\n}\n\nfunction useInfiniteQuery() {\n  var queryInfoRef = React.useRef();\n\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var _getQueryArgs = getQueryArgs(args),\n      queryKey = _getQueryArgs[0],\n      queryVariables = _getQueryArgs[1],\n      queryFn = _getQueryArgs[2],\n      _getQueryArgs$ = _getQueryArgs[3],\n      config = _getQueryArgs$ === void 0 ? {} : _getQueryArgs$;\n\n  var getFetchMore = config.getFetchMore;\n  var getGetFetchMore = useGetLatest(getFetchMore); // The default queryFn will query all pages and map them together\n\n  var originalQueryFn = queryFn;\n  queryFn = _async$3(function () {\n    var _interrupt = false;\n    var data = [];\n    var pageVariables = [].concat(queryInfoRef.current.query.pageVariables);\n    var rebuiltPageVariables = [];\n    return _continue(_do(function () {\n      var args = pageVariables.shift();\n      return _invokeIgnored(function () {\n        if (!data.length) {\n          var _push3 = data.push;\n          // the first page query doesn't need to be rebuilt\n          return _await$3(originalQueryFn.apply(void 0, args), function (_originalQueryFn) {\n            _push3.call(data, _originalQueryFn);\n\n            rebuiltPageVariables.push(args);\n          });\n        } else {\n          // get an up-to-date cursor based on the previous data set\n          var nextCursor = getGetFetchMore()(data[data.length - 1], data); // break early if there's no next cursor\n          // otherwise we'll start from the beginning\n          // which will cause unwanted duplication\n\n          if (!nextCursor) {\n            _interrupt = true;\n            return;\n          }\n\n          var pageArgs = [].concat(args.slice(0, -1), [nextCursor]);\n          var _push4 = data.push;\n          return _await$3(originalQueryFn.apply(void 0, pageArgs), function (_originalQueryFn2) {\n            _push4.call(data, _originalQueryFn2);\n\n            rebuiltPageVariables.push(pageArgs);\n          });\n        }\n      });\n    }, function () {\n      return !_interrupt && !!pageVariables.length;\n    }), function () {\n      queryInfoRef.current.query.canFetchMore = getGetFetchMore()(data[data.length - 1], data);\n      queryInfoRef.current.query.pageVariables = rebuiltPageVariables;\n      return data;\n    });\n  });\n  var queryInfo = useBaseQuery(queryKey, queryVariables, queryFn, config);\n\n  if (typeof queryInfo.query.canFetchMore === 'undefined' && typeof queryInfo.data !== 'undefined') {\n    queryInfo.query.canFetchMore = getGetFetchMore()(queryInfo.data[queryInfo.data.length - 1], queryInfo.data);\n  }\n\n  queryInfoRef.current = queryInfo;\n  var refetch = queryInfo.refetch,\n      _queryInfo$data = queryInfo.data,\n      data = _queryInfo$data === void 0 ? [] : _queryInfo$data,\n      canFetchMore = queryInfo.query.canFetchMore; // Here we seed the pageVariabes for the query\n\n  if (!queryInfo.query.pageVariables) {\n    queryInfo.query.pageVariables = [[].concat(queryInfo.query.queryKey, queryInfo.query.queryVariables)];\n  }\n\n  var fetchMore = React.useCallback(function (fetchMoreInfo) {\n    if (fetchMoreInfo === void 0) {\n      fetchMoreInfo = queryInfoRef.current.query.canFetchMore;\n    }\n\n    return queryInfoRef.current.query.canFetchMore ? refetch({\n      force: true,\n      __queryFn: _async$3(function () {\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        return _finallyRethrows(function () {\n          queryInfoRef.current.query.setState(function (old) {\n            return _extends({}, old, {\n              isFetchingMore: true\n            });\n          });\n          var newArgs = [].concat(args, [fetchMoreInfo]);\n          queryInfoRef.current.query.pageVariables.push(newArgs);\n          var _queryInfoRef$current = queryInfoRef.current.data;\n          return _await$3(originalQueryFn.apply(void 0, newArgs), function (_originalQueryFn3) {\n            var data = [].concat(_queryInfoRef$current, [_originalQueryFn3]);\n            queryInfoRef.current.query.canFetchMore = getGetFetchMore()(data[data.length - 1], data);\n            return data;\n          });\n        }, function (_wasThrown, _result) {\n          queryInfoRef.current.query.setState(function (old) {\n            return _extends({}, old, {\n              isFetchingMore: false\n            });\n          });\n          return _rethrow(_wasThrown, _result);\n        });\n      })\n    }) : void 0;\n  }, [getGetFetchMore, originalQueryFn, refetch]);\n  handleSuspense(queryInfo);\n  return _extends({}, queryInfo, {\n    data: data,\n    canFetchMore: canFetchMore,\n    fetchMore: fetchMore\n  });\n}\n\nexport { ReactQueryCacheProvider, ReactQueryConfigProvider, deepIncludes, makeQueryCache, queryCache, setConsole, setFocusHandler, stableStringify, statusError, statusIdle, statusLoading, statusSuccess, useInfiniteQuery, useIsFetching, useMutation, usePaginatedQuery, useQuery, useQueryCache };\n//# sourceMappingURL=react-query.mjs.map\n"],"sourceRoot":""}