{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/classes/AltrpModel.js","webpack:///./resources/modules/editor/src/js/components/altrp-carousel/AltrpCarouselWrapper.js","webpack:///./resources/modules/editor/src/js/components/altrp-carousel/AltrpCarousel.js","webpack:///./resources/modules/editor/src/js/components/altrp-lightbox/AltrpLightbox.js"],"names":["AltrpModel","data","this","cloneDeep","clone","isEmpty","name","defaultValue","get","has","value","getData","set","unset","window","styled","props","slideStyles","settings","border_color_slides_style","border_width_slides_style","border_type_slide","color","borderWidthStyled","getResponsiveSetting","ArrowIcon","TemplateLoader","altrpHelpers","next","bind","previous","state","activeSlide","openLightBox","sliderImages","slides_repeater","forEach","image","setState","img","image_slides_repeater","url","push","prevProps","sliderImagesArray","getDataByPath","_","isArray","isObject","map","item","isEqual","synchronized_id","split","id","anotherSlider","getComponentByElementId","pushSliderToSynchronize","carousel","carouselsToSynchronize","filter","indexOf","index","slider","slickGoTo","slickNext","slickPrev","carouselContainerClasses","arrows_navigation_content","slides","dotsClasses","sliderClasses","dots_navigation_content","dots_position_navigation_content","slidesMap","arrows","customPaging","idx","active","innerSlider","currentSlide","className","dotsClass","dots","infinite","infinite_loop_additional_content","pauseOnHover","pause_on_interaction_loop_additional_content","autoplay","autoplay_additional_content","autoplaySpeed","Number","transition_autoplay_duration_additional_content","speed","transition_duration_additional_content","slidesToShow","per_view_slides_content","slidesToScroll","to_scroll_slides_content","rows","per_row_slides_content","afterChange","current","beforeChange","setSlide","adaptiveHeight","slide","typeSlide","switch_slides_repeater","media","assetType","content","renderAsset","templateId","card_slides_repeater","key","onClick","onDoubleClick","lightbox_slides_content","overlay_select_heading_additional_content","overlay_text_repeater","isEditor","prevArrow","nextArrow","arrowsClasses","arrows_position_navigation_content","lightbox","imagesSrcs","AltrpLightbox","images","onCloseRequest","color_lightbox_style","ref","c","Component","nextSrc","prevSrc","length","mainSrc","onMovePrevRequest","onMoveNextRequest","wrapperClassName"],"mappings":"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","file":"AltrpCarousel.60f889c3c5b608ee02ca.bundle.js","sourcesContent":["/**\r\n * Имеет интерфейс для доступы к свойствам data (любой вложенности)\r\n * @class AltrpModel\r\n */\r\nimport cloneDeep from 'lodash.clonedeep';\r\nimport get from 'lodash.get';\r\nimport set from 'lodash.set';\r\nimport has from 'lodash.has';\r\nimport unset from 'lodash.unset';\r\nimport isEmpty from 'lodash.isempty';\r\n// import {cloneDeep, get, set, has, unset, isString, isEmpty} from \"lodash\";\r\n\r\nclass AltrpModel {\r\n  constructor(data = {}) {\r\n    this.data = cloneDeep(data);\r\n  }\r\n\r\n  /**\r\n   * Возваращает объект данных\r\n   * @params {boolean} clone - клонировать или ссылку на данные\r\n   * @return {{}}\r\n   */\r\n  getData(clone = true) {\r\n    if(clone){\r\n      return cloneDeep(this.data);\r\n    }\r\n    return this.data;\r\n  }\r\n\r\n  /**\r\n   * Пустой ли объект\r\n   */\r\n  isEmpty(){\r\n    return isEmpty(this.data);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  getProperty(name, defaultValue = '') {\r\n    return get(this.data, name, defaultValue);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  hasProperty(name, defaultValue = '') {\r\n    return has(this.data, name);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {{}}\r\n   */\r\n  setProperty(name, value = '') {\r\n    if(value instanceof AltrpModel){\r\n      value = value.getData(false);\r\n    }\r\n    return set(this.data, name, value);\r\n  }\r\n  /**\r\n   * Удаляет свойства name\r\n   * @params {string} name\r\n   * @return {*}\r\n   */\r\n  unsetProperty(name) {\r\n    return unset(this.data, name);\r\n  }\r\n}\r\nwindow.AltrpModel = AltrpModel;\r\nexport default AltrpModel\r\n","import styled from 'styled-components';\r\nimport {dimensionsControllerToStyles, borderWidthStyled} from \"../../../../../front-app/src/js/helpers/styles\";\r\nimport {getResponsiveSetting} from \"../../../../../front-app/src/js/helpers\";\r\n\r\nconst AltrpCarouselWrapper = styled.div`\r\n& .altrp-carousel-slide{\r\n${(props)=>{\r\n  let slideStyles = '';\r\n  const {settings} = props;\r\n  const {\r\n    border_color_slides_style,\r\n    border_width_slides_style,\r\n    border_type_slide,\r\n  } = settings;\r\n  if(border_color_slides_style){\r\n    slideStyles += `border-color:${border_color_slides_style.color};`\r\n  }\r\n  if(border_type_slide){\r\n    slideStyles += `border-style:${border_type_slide};`\r\n  }\r\n  if(border_width_slides_style) {\r\n    slideStyles += borderWidthStyled(border_width_slides_style)\r\n  }\r\n  return slideStyles;\r\n}}\r\n}\r\n& .slick-current .altrp-carousel-slide{\r\n${(props)=>{\r\n  let slideStyles = '';\r\n  const {settings} = props;\r\n  const \r\n    border_color_slides_style = getResponsiveSetting(settings, 'border_color_slides_style', '.active'),\r\n    border_width_slides_style = getResponsiveSetting(settings, 'border_width_slides_style', '.active'),\r\n    border_type_slide = getResponsiveSetting(settings, 'border_type_slide', '.active');\r\n  \r\n  if(border_color_slides_style){\r\n    slideStyles += `border-color:${border_color_slides_style.color};`\r\n  }\r\n  if(border_type_slide){\r\n    slideStyles += `border-style:${border_type_slide};`\r\n  }\r\n  if(border_width_slides_style) {\r\n    slideStyles += borderWidthStyled(border_width_slides_style)\r\n  }\r\n  return slideStyles;\r\n}}\r\n}`;\r\n\r\nexport default AltrpCarouselWrapper;","import React, {Component} from \"react\";\r\nimport Slider from \"react-slick\";\r\nimport AltrpLightbox from \"../altrp-lightbox/AltrpLightbox\";\r\n\r\nimport ArrowIcon from \"../../../svgs/arrow.svg\"\r\nimport (\"slick-carousel/slick/slick.scss\");\r\nimport (\"slick-carousel/slick/slick-theme.scss\");\r\nimport ('./altrp-carousel.scss');\r\nimport {\r\n  getComponentByElementId,\r\n  getDataByPath,\r\n  getResponsiveSetting,\r\n  isEditor,\r\n  renderAsset\r\n} from \"../../../../../front-app/src/js/helpers\";\r\nconst {TemplateLoader} = window.altrpHelpers;\r\nimport AltrpCarouselWrapper from \"./AltrpCarouselWrapper\";\r\n\r\n/**\r\n * Компонент Карусли\r\n */\r\nclass AltrpCarousel extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.next = this.next.bind(this);\r\n    this.previous = this.previous.bind(this);\r\n    this.state = {\r\n      activeSlide: 0,\r\n      openLightBox: false,\r\n      sliderImages: []\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.slides_repeater.forEach(image => {\r\n      this.setState((state) => {\r\n\r\n        let img = {...image.image_slides_repeater} || {};\r\n        img.url = img.url || '/img/nullImage.png';\r\n\r\n        state.sliderImages.push(img.url);\r\n        return ({...state});\r\n      });\r\n    });\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if(this.props.slides_repeater !== prevProps.slides_repeater\r\n        && getResponsiveSetting(this.props, 'slides_item_source', '', 'custom') !== 'custom') {\r\n      let sliderImagesArray = [];\r\n      this.props.slides_repeater.forEach(image => {\r\n        let img = {...image.image_slides_repeater} || {};\r\n        img.url = img.url || '/img/nullImage.png';\r\n        sliderImagesArray.push(img.url);\r\n      });\r\n      this.setState((state) => ({...state, sliderImages: sliderImagesArray}));\r\n    }\r\n    if(getResponsiveSetting(this.props, 'slides_item_source', '', 'custom') === 'path'){\r\n\r\n      let sliderImages = getDataByPath(getResponsiveSetting(this.props, 'slides_path'));\r\n      if(! _.isArray(sliderImages) && _.isObject(sliderImages)){\r\n        sliderImages = [sliderImages];\r\n      } else if(! _.isArray(sliderImages)){\r\n        sliderImages = [];\r\n      }\r\n      sliderImages = sliderImages.map(item => _.get(item, 'media.url') ? _.get(item, 'media.url') : item.url);\r\n      if(!_.isEqual(sliderImages, this.state.sliderImages)){\r\n        this.setState((state) => ({...state, sliderImages}));\r\n      }\r\n    }\r\n    let {synchronized_id} = this.props;\r\n    if(synchronized_id){\r\n      synchronized_id = synchronized_id.split(',');\r\n      synchronized_id.forEach(id=>{\r\n        let anotherSlider = getComponentByElementId(id);\r\n        if(anotherSlider){\r\n          this.pushSliderToSynchronize(anotherSlider);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Добавляем компонент слайдера к синхронизируемым\r\n   */\r\n  pushSliderToSynchronize(carousel){\r\n    if(_.isArray(carousel)){\r\n      this.carouselsToSynchronize = [...carousel];\r\n      this.carouselsToSynchronize = this.carouselsToSynchronize.filter(carousel=> carousel !== this);\r\n      return;\r\n    }\r\n    const carouselsToSynchronize = this.carouselsToSynchronize || [];\r\n    carousel = _.get(carousel, 'elementRef.current.carousel.current');\r\n    if(carousel && carouselsToSynchronize.indexOf(carousel) === -1){\r\n      carouselsToSynchronize.push(carousel);\r\n      carouselsToSynchronize.push(this);\r\n      carouselsToSynchronize.forEach(carousel=>{\r\n        carousel.pushSliderToSynchronize(carouselsToSynchronize);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   *\r\n   * @param {int} index\r\n   */\r\n  setSlide(index){\r\n    this.slider.slickGoTo(index)\r\n  }\r\n  next() {\r\n    this.slider.slickNext();\r\n  }\r\n\r\n  previous() {\r\n    this.slider.slickPrev();\r\n  }\r\n\r\n  render(){\r\n    let carouselContainerClasses = \"altrp-carousel-container\";\r\n\r\n    carouselContainerClasses += (!this.props.arrows_navigation_content ? \" altrp-carousel-container-no-arrow\" : \"\");\r\n\r\n    //точки\r\n    let slides = getResponsiveSetting(this.props,'slides_repeater', '', []) ;\r\n\r\n\r\n    let dotsClasses = \"altrp-carousel-dots\";\r\n\r\n    let sliderClasses = \"altrp-carousel-slides\";\r\n\r\n    //позиция точек\r\n    if(this.props.dots_navigation_content) {\r\n      switch (this.props.dots_position_navigation_content) {\r\n        case \"topLeft\":\r\n          dotsClasses += \" altrp-carousel-dots-top-left\";\r\n          sliderClasses += \" altrp-carousel-slides-dots-top\";\r\n          break;\r\n        case \"top\":\r\n          dotsClasses += \" altrp-carousel-dots-top\";\r\n          sliderClasses += \" altrp-carousel-slides-dots-top\";\r\n          break;\r\n        case \"topRight\":\r\n          dotsClasses += \" altrp-carousel-dots-top-right\";\r\n          sliderClasses += \" altrp-carousel-slides-dots-top\";\r\n          break;\r\n        case \"bottomLeft\":\r\n          dotsClasses += \" altrp-carousel-dots-bottom-left\";\r\n          sliderClasses += \" altrp-carousel-slides-dots-bottom\";\r\n          break;\r\n        case \"bottom\":\r\n          sliderClasses += \" altrp-carousel-slides-dots-bottom\";\r\n          break;\r\n        case \"bottomRight\":\r\n          dotsClasses += \" altrp-carousel-dots-bottom-right\";\r\n          sliderClasses += \" altrp-carousel-slides-dots-bottom\";\r\n          break\r\n      }\r\n    }\r\n    // настройки слайдера\r\n    let settings = {\r\n      arrows: false,\r\n      customPaging: (idx) => {\r\n        let active = false;\r\n        if(this.slider){\r\n          active = this.slider.innerSlider.state.currentSlide === idx;\r\n        }\r\n        return (\r\n            <a>\r\n              <div className={'altrp-carousel-paging ' + (active ? 'active' : '')}/>\r\n            </a>\r\n        )},\r\n      dotsClass: dotsClasses,\r\n      dots: this.props.dots_navigation_content,\r\n      infinite: this.props.infinite_loop_additional_content,\r\n      pauseOnHover: this.props.pause_on_interaction_loop_additional_content,\r\n      autoplay: this.props.autoplay_additional_content,\r\n      className: sliderClasses,\r\n      autoplaySpeed: Number(this.props.transition_autoplay_duration_additional_content),\r\n      speed: Number(this.props.transition_duration_additional_content),\r\n      slidesToShow: Number(this.props.per_view_slides_content),\r\n      slidesToScroll: Number(this.props.to_scroll_slides_content),\r\n      rows: Number(this.props.per_row_slides_content),\r\n      afterChange: current => this.setState({ activeSlide: current }),\r\n      beforeChange: (current, next) => {\r\n        this.carouselsToSynchronize && this.carouselsToSynchronize.forEach(carousel => {carousel.setSlide(next)})\r\n      },\r\n      adaptiveHeight: true,\r\n    };\r\n\r\n    // слайды\r\n    const itemsSourceType = getResponsiveSetting(this.props, 'slides_item_source', '', 'custom');\r\n    let slidesMap;\r\n    switch(itemsSourceType){\r\n      case 'custom':{\r\n        slidesMap = slides.map((slide, idx) => {\r\n          const typeSlide = slide.switch_slides_repeater || false;\r\n          let media = slide.image_slides_repeater ? {...slide.image_slides_repeater} : {};\r\n\r\n          media.url = media.url || '/img/nullImage.png';\r\n          media.name = media.name || 'null';\r\n          media.assetType = media.assetType || 'mediaBackground';\r\n          if(media.assetType === 'media') {\r\n            media.assetType = 'mediaBackground';\r\n          }\r\n\r\n          let content = renderAsset(media, {\r\n            className: 'altrp-carousel-slide-img',\r\n          });\r\n\r\n          if(typeSlide === true) {\r\n            content = <TemplateLoader templateId={slide.card_slides_repeater}/>\r\n          }\r\n\r\n          return (\r\n              <div className=\"altrp-carousel-slide\" key={idx}\r\n                   onClick={()=>{\r\n                     this.slider.slickGoTo(idx);\r\n                   }}\r\n                   onDoubleClick={ () => {\r\n                     this.slider.slickGoTo(idx);\r\n                     if(this.props.lightbox_slides_content) {\r\n                       this.setState((state) => ({\r\n                         ...state,\r\n                         openLightBox: true\r\n                       }))\r\n                     }\r\n                   }}\r\n              >\r\n                {\r\n                  content\r\n                }\r\n                {\r\n                  this.props.overlay_select_heading_additional_content === \"text\" ? (\r\n                      <div className=\"altrp-carousel-slide-overlay\">\r\n                        <p className=\"altrp-carousel-slide-overlay-text\">{slide.overlay_text_repeater}</p>\r\n                      </div>\r\n                  ) : null\r\n                }\r\n              </div>\r\n          );\r\n        });\r\n      }break;\r\n      case 'path':{\r\n        if(isEditor()){\r\n          slidesMap = [\r\n            (\r\n              <div className=\"altrp-carousel-slide\" key={1}>{\r\n                renderAsset({\r\n                  url: '/img/nullImage.png',\r\n                  assetType: 'mediaBackground',\r\n                }, {\r\n                  key: 1,\r\n                  className: 'altrp-carousel-slide-img',\r\n                })\r\n              }</div>\r\n            ),\r\n            (\r\n              <div className=\"altrp-carousel-slide\" key={2}>{\r\n                renderAsset({\r\n                  url: '/img/nullImage.png',\r\n                  assetType: 'mediaBackground',\r\n                }, {\r\n                  key: 1,\r\n                  className: 'altrp-carousel-slide-img',\r\n                })\r\n              }</div>\r\n            ),\r\n            (\r\n              <div className=\"altrp-carousel-slide\" key={3}>{\r\n                renderAsset({\r\n                  url: '/img/nullImage.png',\r\n                  assetType: 'mediaBackground',\r\n                }, {\r\n                  key: 1,\r\n                  className: 'altrp-carousel-slide-img',\r\n                })\r\n              }</div>\r\n            ),\r\n            (\r\n              <div className=\"altrp-carousel-slide\" key={4}>{\r\n                renderAsset({\r\n                  url: '/img/nullImage.png',\r\n                  assetType: 'mediaBackground',\r\n                }, {\r\n                  key: 1,\r\n                  className: 'altrp-carousel-slide-img',\r\n                })\r\n              }</div>\r\n            ),\r\n            (\r\n              <div className=\"altrp-carousel-slide\" key={5}>{\r\n                renderAsset({\r\n                  url: '/img/nullImage.png',\r\n                  assetType: 'mediaBackground',\r\n                }, {\r\n                  key: 1,\r\n                  className: 'altrp-carousel-slide-img',\r\n                })\r\n              }</div>\r\n            ),\r\n            (\r\n              <div className=\"altrp-carousel-slide\" key={6}>{\r\n                renderAsset({\r\n                  url: '/img/nullImage.png',\r\n                  assetType: 'mediaBackground',\r\n                }, {\r\n                  key: 1,\r\n                  className: 'altrp-carousel-slide-img',\r\n                })\r\n              }</div>\r\n            ),\r\n          ];\r\n        } else {\r\n          slidesMap = getDataByPath(getResponsiveSetting(this.props, 'slides_path'));\r\n          if(! _.isArray(slidesMap) && _.isObject(slidesMap)){\r\n            slidesMap = [slidesMap];\r\n          } else if(! _.isArray(slidesMap)){\r\n            slidesMap = [];\r\n          }\r\n          slidesMap = slidesMap.map((media, idx)=>{\r\n            if(_.isObject(media.media)){\r\n              media = media.media;\r\n            }\r\n\r\n            media.url = media.url || '/img/nullImage.png';\r\n            media.name = media.name || 'null';\r\n            media.assetType = media.assetType || 'mediaBackground';\r\n            if(media.assetType === 'media') {\r\n              media.assetType = 'mediaBackground';\r\n            }\r\n\r\n            let content = renderAsset(media, {\r\n              className: 'altrp-carousel-slide-img',\r\n            });\r\n\r\n            return (\r\n                <div className=\"altrp-carousel-slide\" key={idx}\r\n                     onClick={()=>{\r\n                       this.slider.slickGoTo(idx);\r\n                     }}\r\n                     onDoubleClick={ () => {\r\n                       this.slider.slickGoTo(idx);\r\n                       if(this.props.lightbox_slides_content) {\r\n                         this.setState((state) => ({\r\n                           ...state,\r\n                           openLightBox: true\r\n                         }))\r\n                       }\r\n                     }}\r\n                >\r\n                  {\r\n                    content\r\n                  }\r\n                </div>\r\n            );\r\n          });\r\n        }\r\n      }break;\r\n    }\r\n\r\n    //позиция стрелок\r\n    let prevArrow = \"\";\r\n    let nextArrow = \"\";\r\n\r\n    let arrowsClasses = \"\";\r\n\r\n    switch (this.props.arrows_position_navigation_content) {\r\n      case \"topLeft\":\r\n        arrowsClasses += \" altrp-carousel-arrow-top-left altrp-carousel-arrow-top-wrapper\";\r\n        break;\r\n      case \"top\":\r\n        arrowsClasses += \" altrp-carousel-arrow-top altrp-carousel-arrow-top-wrapper\"\r\n        break;\r\n      case \"topRight\":\r\n        arrowsClasses += \" altrp-carousel-arrow-top-right altrp-carousel-arrow-top-wrapper\"\r\n        break;\r\n      case \"bottomLeft\":\r\n        arrowsClasses += \" altrp-carousel-arrow-bottom-left altrp-carousel-arrow-bottom-wrapper\"\r\n        break;\r\n      case \"bottom\":\r\n        arrowsClasses += \" altrp-carousel-arrow-bottom altrp-carousel-arrow-bottom-wrapper\"\r\n        break;\r\n      case \"bottomRight\":\r\n        arrowsClasses += \" altrp-carousel-arrow-bottom-right altrp-carousel-arrow-bottom-wrapper\"\r\n        break\r\n    }\r\n\r\n    //стрелки\r\n    prevArrow = this.props.arrows_navigation_content ? (\r\n        <div className=\"altrp-carousel-arrow-prev altrp-carousel-arrow\" onClick={this.previous}>\r\n          <ArrowIcon/>\r\n        </div>\r\n      ) : \"\";\r\n\r\n    nextArrow = this.props.arrows_navigation_content ? (\r\n      <div className=\"altrp-carousel-arrow-next altrp-carousel-arrow\" onClick={this.next}>\r\n        <ArrowIcon/>\r\n      </div>\r\n    ) : \"\";\r\n\r\n    let lightbox = \"\";\r\n    if(this.props.lightbox_slides_content) {\r\n      const imagesSrcs = this.props.slides_repeater.map(img => {\r\n        if(img.image_slides_repeater) {\r\n          return img.image_slides_repeater.url\r\n        } else return '/img/nullImage.png'\r\n      });\r\n      lightbox =  this.state.openLightBox ? (\r\n        <AltrpLightbox\r\n          images={imagesSrcs}\r\n          current={this.state.activeSlide}\r\n          settings={{\r\n            onCloseRequest: () => this.setState({openLightBox: false})\r\n          }}\r\n          color={this.props.color_lightbox_style}\r\n        />\r\n      ) : \"\"\r\n\r\n    }\r\n\r\n    return <AltrpCarouselWrapper settings={{...this.props}} className=\"altrp-carousel\">\r\n      {\r\n        this.props.lightbox_slides_content ? lightbox : \"\"\r\n      }\r\n      { this.props.arrows_position_navigation_content === \"center\" ?\r\n        prevArrow\r\n        : \"\"\r\n      }\r\n      <div className={carouselContainerClasses}>\r\n        {\r\n          this.props.arrows_position_navigation_content !== \"center\" ? (\r\n            <div className={\"altrp-carousel-arrows-container\" + arrowsClasses}>\r\n              {prevArrow}\r\n              {nextArrow}\r\n            </div>\r\n          ) : \"\"\r\n        }\r\n        <Slider ref={c => (this.slider = c)}\r\n                {...settings}>\r\n          {\r\n            slidesMap\r\n          }\r\n        </Slider>\r\n      </div>\r\n      { this.props.arrows_position_navigation_content === \"center\" ? nextArrow : \"\" }\r\n    </AltrpCarouselWrapper>\r\n  }\r\n}\r\n\r\nexport default AltrpCarousel\r\n","import React, {Component} from 'react';\r\nimport Lightbox from 'react-image-lightbox';\r\nimport {isEditor} from \"../../../../../front-app/src/js/helpers\";\r\nimport ('./altrp-lightbox.scss');\r\n\r\nclass AltrpLightbox extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      current: props.current || 0\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let images = this.props.images;\r\n    const settings = this.props.settings;\r\n    let nextSrc = null;\r\n    let prevSrc = null;\r\n    const current = this.state.current;\r\n\r\n    if(images.length === 0 || images[0] === \"\") {\r\n      images = [\"/img/nullImage.png\"]\r\n    }\r\n\r\n    if(images.length > 1) {\r\n      nextSrc = images[(current + 1) % images.length];\r\n      prevSrc = images[(current + images.length - 1) % images.length];\r\n    }\r\n\r\n    return (\r\n      <Lightbox\r\n        {...settings}\r\n        mainSrc={images[current]}\r\n        onMovePrevRequest={() => {\r\n          this.setState({\r\n            current: (current + images.length - 1) % images.length,\r\n          })\r\n        }}\r\n        onMoveNextRequest={() => {\r\n          this.setState({\r\n            current: (current + 1) % images.length,\r\n          })\r\n        }}\r\n\r\n        prevSrc={prevSrc} nextSrc={nextSrc}\r\n        wrapperClassName=\"altrp-lightbox\"\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nexport default AltrpLightbox\r\n\r\n"],"sourceRoot":""}