{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/classes/AltrpModel.js","webpack:///./resources/modules/editor/src/js/components/widgets/InputRadioWidget.js"],"names":["AltrpModel","data","this","cloneDeep","clone","isEmpty","name","defaultValue","get","has","value","getData","set","unset","window","Radio","altrpLibs","Blueprint","RadioGroup","moment","altrpHelpers","globalDefaults","push","AltrpFieldContainer","styled","div","settings","content_label_position_type","InputRadioWidget","props","timeInput","handleEnter","e","keyCode","preventDefault","inputs","Array","from","document","querySelectorAll","index","indexOf","target","undefined","focus","element","getSettings","create_allowed","create_label","create_url","createItem","debounceDispatch","_","debounce","dispatchFieldValueToStore","onFocus","focus_actions","isEditor","actionsManager","default","callAllWidgetActions","getIdForAction","onBlur","editor","userInput","formId","getFormId","fieldName","getFieldId","replaceContentWithData","isObject","appStore","dispatch","changeFormFieldValue","change_actions","inputValue","create_data","select2_multiple","currentModel","getCurrentModel","parseParamsFromString","url","parseURLTemplate","setState","state","isDisabled","resource","Resource","route","post","res","success","newOption","label","options","unshift","selectStateManager","menuIsOpen","console","error","component","elementDecorator","onChange","bind","getContent","valueMustArray","isArray","parseOptionsFromSettings","paramsForUpdate","altrpSelectRef","React","createRef","prevProps","prevState","getProperty","contentLoaded","currentDataStorage","content_options","model_for_options","isEqual","dynamic","formsStore","updateOptions","updateValue","content_calculation","altrpforms","prevContext","altrpdata","altrpmodel","altrpuser","currentUser","altrppagestate","altrpPageState","altrpresponses","altrpmeta","altrpMeta","context","currentDataStorageLoaded","changedField","altrpstorage","getDataFromLocalStorage","replace","eval","message","getId","path","formData","JSON","stringify","getRoute","getQueried","filters","getAll","valueToDispatch","change_change_end","change_change_end_delay","clearTimeout","setTimeout","optionsDynamicSetting","getDynamicSetting","convertData","sortBy","o","toString","label_icon","options_sorting","content_readonly","image_select_options","classLabel","styleLabel","getResponsiveSetting","marginBottom","label_style_spacing","size","unit","marginTop","marginRight","position","zIndex","content_label","className","style","content_required","assetType","renderAssetIcon","content_autocomplete","input","renderRepeatedInput","inline","Math","random","substr","formID","selectedValue","map","option","idx","checked","getName","altrpCompare","key","Component"],"mappings":"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","file":"InputRadio.9b482da57de6501a797d.bundle.js","sourcesContent":["/**\r\n * Имеет интерфейс для доступы к свойствам data (любой вложенности)\r\n * @class AltrpModel\r\n */\r\nimport cloneDeep from 'lodash.clonedeep';\r\nimport get from 'lodash.get';\r\nimport set from 'lodash.set';\r\nimport has from 'lodash.has';\r\nimport unset from 'lodash.unset';\r\nimport isEmpty from 'lodash.isempty';\r\n// import {cloneDeep, get, set, has, unset, isString, isEmpty} from \"lodash\";\r\n\r\nclass AltrpModel {\r\n  constructor(data = {}) {\r\n    this.data = cloneDeep(data);\r\n  }\r\n\r\n  /**\r\n   * Возваращает объект данных\r\n   * @params {boolean} clone - клонировать или ссылку на данные\r\n   * @return {{}}\r\n   */\r\n  getData(clone = true) {\r\n    if(clone){\r\n      return cloneDeep(this.data);\r\n    }\r\n    return this.data;\r\n  }\r\n\r\n  /**\r\n   * Пустой ли объект\r\n   */\r\n  isEmpty(){\r\n    return isEmpty(this.data);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  getProperty(name, defaultValue = '') {\r\n    return get(this.data, name, defaultValue);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  hasProperty(name, defaultValue = '') {\r\n    return has(this.data, name);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {{}}\r\n   */\r\n  setProperty(name, value = '') {\r\n    if(value instanceof AltrpModel){\r\n      value = value.getData(false);\r\n    }\r\n    return set(this.data, name, value);\r\n  }\r\n  /**\r\n   * Удаляет свойства name\r\n   * @params {string} name\r\n   * @return {*}\r\n   */\r\n  unsetProperty(name) {\r\n    return unset(this.data, name);\r\n  }\r\n}\r\nwindow.AltrpModel = AltrpModel;\r\nexport default AltrpModel\r\n","import {\r\n  altrpCompare,\r\n  convertData,\r\n  isEditor,\r\n  parseOptionsFromSettings,\r\n  parseParamsFromString,\r\n  parseURLTemplate,\r\n  replaceContentWithData,\r\n  renderAssetIcon,\r\n  getDataFromLocalStorage\r\n} from \"../../../../../front-app/src/js/helpers\";\r\nimport Resource from \"../../classes/Resource\";\r\nimport { changeFormFieldValue } from \"../../../../../front-app/src/js/store/forms-data-storage/actions\";\r\nimport AltrpModel from \"../../classes/AltrpModel\";\r\nconst Radio = window.altrpLibs.Blueprint.Radio;\r\nconst RadioGroup = window.altrpLibs.Blueprint.RadioGroup;\r\n\r\nconst { moment } = window.altrpHelpers;\r\n(window.globalDefaults = window.globalDefaults || []).push(`\r\n\r\n.altrp-field-radio-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n}\r\n\r\n.altrp-field-container .bp3-radio {\r\n  margin-bottom: 0;\r\n}\r\n\r\n.altrp-field {\r\n  border-style: solid;\r\n  width: 100%;\r\n}\r\n.altrp-field-file{\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.altrp-label-icon svg,\r\n.altrp-label-icon img {\r\n  width: 20px;\r\n}\r\n.altrp-label-icon svg{\r\n  height: 20px;\r\n}\r\n.altrp-field-file__field{\r\n  display: none;\r\n}\r\n.altrp-field-file__placeholder{\r\n  display: none;\r\n}\r\n.altrp-field-file_empty .altrp-field-file__placeholder{\r\n  display: block;\r\n  padding: 10px 20px;\r\n  border: none;\r\n  cursor: pointer;\r\n  background-color: rgb(52,59,76);\r\n  color: #fff;\r\n}\r\n.input-clear-btn {\r\n  background: transparent;\r\n  padding: 0;\r\n  position: absolute;\r\n  bottom: calc(50% - 7px);\r\n  right: 15px;\r\n  display: none;\r\n}\r\n.input-clear-btn:hover {\r\n  font-weight: bold;\r\n}\r\n.altrp-field:hover + .input-clear-btn, .input-clear-btn:hover {\r\n  display: block;\r\n}\r\n.altrp-input-wrapper, .altrp-field-select2 {\r\n  position: relative;\r\n  flex-grow: 1;\r\n}\r\n.altrp-field-label--required::after {\r\n  content: \"*\";\r\n  color: red;\r\n  font-size: inherit;\r\n  padding-left: 10px;\r\n}\r\n.altrp-field-label {\r\n  font-size: 16px;\r\n  font-family: \"Open Sans\";\r\n  line-height: 1.5;\r\n  letter-spacing: 0;\r\n}\r\n.altrp-field-select2__single-value, .altrp-field {\r\n  font-size: 16px;\r\n  font-family: \"Open Sans\";\r\n  line-height: 1.5;\r\n  letter-spacing: 0;\r\n}\r\n.altrp-field-select2__control, .altrp-field {\r\n  text-align: left;\r\n  padding-top: 2px;\r\n  padding-right: 2px;\r\n  padding-bottom: 2px;\r\n  padding-left: 2px;\r\n  border-width: 1px;\r\n  border-color: #000;\r\n}\r\n.altrp-field-select2__control:hover{\r\n  border-width: 1px;\r\n  border-color: #000;\r\n}\r\n.altrp-field-container {\r\n  margin: 0;\r\n}\r\n.altrp-field::placeholder, .altrp-field-select2__placeholder {\r\n  font-size: 13px;\r\n  font-family: \"Open Sans\";\r\n  line-height: 1.5;\r\n  letter-spacing: 0;\r\n}\r\n.altrp-image-select {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n}\r\n.altrp-image-select img {\r\n  flex-grow: 1;\r\n  object-fit: contain;\r\n}\r\n.altrp-field {\r\n  overflow: hidden;\r\n  cursor: pointer;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n}\r\n.altrp-field.active {\r\n  border-color: lightcoral;\r\n}\r\n.altrp-field-label {\r\n  text-align: center;\r\n  display: block;\r\n}\r\n.altrp-pagination__select-size .altrp-field-select2__single-value {\r\n  font-size: 14px;\r\n}\r\n.altrp-pagination__select-size .altrp-field-select2__indicator-separator {\r\n  display: none;\r\n}\r\n.altrp-pagination__select-size .altrp-field-select2__indicator {\r\n  align-items: center;\r\n}\r\n.altrp-pagination__select-size .altrp-field-select2__control {\r\n  width: 100px;\r\n  min-height: 32px;\r\n  padding: 0;\r\n  border-radius: 0;\r\n  outline: none;\r\n  border-color: rgb(142,148,170);\r\n  -webkit-box-shadow: none;\r\n  -moz-box-shadow: none;\r\n  box-shadow: none;\r\n}\r\n.altrp-pagination__select-size .altrp-field-select2__control input {\r\n  border: none;\r\n}\r\n.altrp-field-select2 {\r\n  position: relative;\r\n  box-sizing: border-box;\r\n  pointer-events: none;\r\n}\r\n.altrp-field-select2__control {\r\n  webkit-align-items: center;\r\n  -webkit-box-align: center;\r\n  -ms-flex-align: center;\r\n  align-items: center;\r\n  background-color: hsl(0,0%,100%);\r\n  border-color: hsl(0,0%,80%);\r\n  border-style: solid;\r\n  border-width: 1px;\r\n  cursor: default;\r\n  display: -webkit-box;\r\n  display: -webkit-flex;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -webkit-flex-wrap: wrap;\r\n  -ms-flex-wrap: wrap;\r\n  flex-wrap: wrap;\r\n  -webkit-box-pack: justify;\r\n  -webkit-justify-content: space-between;\r\n  -ms-flex-pack: justify;\r\n  justify-content: space-between;\r\n  min-height: 38px;\r\n  outline: 0 !important;\r\n  position: relative;\r\n  -webkit-transition: all 100ms;\r\n  transition: all 100ms;\r\n  box-sizing: border-box;\r\n}\r\n.altrp-field-select2__value-container {\r\n  -webkit-align-items: center;\r\n  -webkit-box-align: center;\r\n  -ms-flex-align: center;\r\n  align-items: center;\r\n  display: -webkit-box;\r\n  display: -webkit-flex;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -webkit-flex: 1;\r\n  -ms-flex: 1;\r\n  flex: 1;\r\n  -webkit-flex-wrap: wrap;\r\n  -ms-flex-wrap: wrap;\r\n  flex-wrap: wrap;\r\n  padding: 2px 8px;\r\n  -webkit-overflow-scrolling: touch;\r\n  position: relative;\r\n  overflow: hidden;\r\n  box-sizing: border-box;\r\n}\r\n.altrp-field-select2__single-value {\r\n  color: hsl(0,0%,20%);\r\n  margin-left: 2px;\r\n  margin-right: 2px;\r\n  max-width: calc(100% - 8px);\r\n  overflow: hidden;\r\n  position: absolute;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n  top: 50%;\r\n  -webkit-transform: translateY(-50%);\r\n  -ms-transform: translateY(-50%);\r\n  transform: translateY(-50%);\r\n  box-sizing: border-box;\r\n}\r\n.altrp-field-select2__indicators {\r\n  -webkit-align-items: center;\r\n  -webkit-box-align: center;\r\n  -ms-flex-align: center;\r\n  align-items: center;\r\n  -webkit-align-self: stretch;\r\n  -ms-flex-item-align: stretch;\r\n  align-self: stretch;\r\n  display: -webkit-box;\r\n  display: -webkit-flex;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -webkit-flex-shrink: 0;\r\n  -ms-flex-negative: 0;\r\n  flex-shrink: 0;\r\n  box-sizing: border-box;\r\n}\r\n.altrp-field-select2__indicator-separator {\r\n  -webkit-align-self: stretch;\r\n  -ms-flex-item-align: stretch;\r\n  align-self: stretch;\r\n  background-color: hsl(0,0%,80%);\r\n  margin-bottom: 8px;\r\n  margin-top: 8px;\r\n  width: 1px;\r\n  box-sizing: border-box;\r\n}\r\n.altrp-field-select2__indicator {\r\n  color: hsl(0,0%,80%);\r\n  display: -webkit-box;\r\n  display: -webkit-flex;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  padding: 8px;\r\n  -webkit-transition: color 150ms;\r\n  transition: color 150ms;\r\n  box-sizing: border-box;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n.tba-placeholder {\r\n  display: flex;\r\n  justify-content: center;\r\n  font-size: 28px;\r\n  font-weight: bold;\r\n}\r\n\r\n.altrp-field-option {\r\n  display: flex;\r\n  padding: 10px;\r\n}\r\n.altrp-field-option__label {\r\n  cursor: pointer;\r\n}\r\ntextarea.altrp-field {\r\n  display: block;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__placeholder {\r\n  white-space: nowrap;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__single-value {\r\n  font-size: 14px;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__indicator-separator {\r\n  display: none;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__indicator {\r\n  align-items: center;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__control {\r\n  width: 100%;\r\n  min-height: 19px;\r\n  padding: 0;\r\n  border-radius: 0;\r\n  outline: none;\r\n  border-color: rgb(142, 148, 170);\r\n  -webkit-box-shadow: none;\r\n  -moz-box-shadow: none;\r\n  box-shadow: none;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__control input {\r\n  border: none;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__value-container {\r\n  padding-top: 0;\r\n  padding-bottom: 0;\r\n  line-height: 13px;\r\n}\r\n.altrp-field-required {\r\n  color: red;\r\n  font-size: 18px;\r\n  padding-left: 10px;\r\n}\r\n.altrp-field-container-label {\r\n  display: flex;\r\n  flex-direction: row;\r\n}\r\n\r\n.altrp-field-label-container-left {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.altrp-field-label-container {\r\n  display: inline-flex;\r\n  align-items: center;\r\n}\r\n.altrp-field-select2__indicator.altrp-field-select2__dropdown-indicator {\r\n  padding: 0 8px;\r\n  max-height: 14px;\r\n  overflow: hidden;\r\n}\r\n.altrp-field-select2 .altrp-field-select2__value-container {\r\n  padding: 0px 8px;\r\n}\r\n.altrp-field-select2 .css-b8ldur-Input {\r\n  padding-bottom: 0px;\r\n  padding-top: 0px;\r\n  margin: 0 2px;\r\n}\r\n.altrp-field-select2 .altrp-field-select2__control {\r\n  min-height: 14px;\r\n}\r\n`)\r\nconst AltrpFieldContainer = styled.div`\r\n  ${({ settings: { content_label_position_type } }) => {\r\n    switch (content_label_position_type) {\r\n      case \"left\": {\r\n        return \"display: flex\";\r\n      }\r\n      case \"right\": {\r\n        return \"display:flex;flex-direction:row-reverse;justify-content:flex-end;\";\r\n      }\r\n    }\r\n    return \"\";\r\n  }}\r\n`;\r\n\r\nclass InputRadioWidget extends Component {\r\n  timeInput = null;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    props.element.component = this;\r\n    if (window.elementDecorator) {\r\n      window.elementDecorator(this);\r\n    }\r\n    this.onChange = this.onChange.bind(this);\r\n    this.debounceDispatch = this.debounceDispatch.bind(this);\r\n\r\n    this.defaultValue =\r\n      this.getContent(\"content_default_value\") ||\r\n      (this.valueMustArray() ? [] : \"\");\r\n    if (this.valueMustArray() && !_.isArray(this.defaultValue)) {\r\n      this.defaultValue = [];\r\n    }\r\n    this.state = {\r\n      settings: { ...props.element.getSettings() },\r\n      value: this.defaultValue,\r\n      options: parseOptionsFromSettings(props.element.getSettings(\"content_options\")),\r\n      paramsForUpdate: null\r\n    };\r\n    this.altrpSelectRef = React.createRef();\r\n    if (this.getContent(\"content_default_value\")) {\r\n      this.dispatchFieldValueToStore(this.getContent(\"content_default_value\"));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * В некоторых случаях значение поля должно быть массивом\r\n   * @return {boolean}\r\n   */\r\n  valueMustArray() {\r\n    return true;\r\n  }\r\n  /**\r\n   * Чистит значение\r\n   */\r\n  clearValue() {\r\n    let value = \"\";\r\n    this.onChange(value);\r\n    this.dispatchFieldValueToStore(value, true);\r\n  }\r\n\r\n  /**\r\n   * Обработка нажатия клавиши\r\n   * @param {{}} e\r\n   */\r\n  handleEnter = e => {\r\n    if (e.keyCode === 13) {\r\n      e.preventDefault();\r\n      const inputs = Array.from(document.querySelectorAll(\"input,select\"));\r\n      const index = inputs.indexOf(e.target);\r\n      if (index === undefined) return;\r\n      inputs[index + 1] && inputs[index + 1].focus();\r\n      const {\r\n        create_allowed,\r\n        create_label,\r\n        create_url\r\n      } = this.props.element.getSettings();\r\n      if (create_allowed && create_label && create_url) {\r\n        this.createItem(e);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Загрузка виджета\r\n   * @param {{}} prevProps\r\n   * @param {{}} prevState\r\n   */\r\n  async _componentDidMount(prevProps, prevState) {\r\n    if (this.props.element.getSettings(\"content_options\")) {\r\n      let options = parseOptionsFromSettings(\r\n        this.props.element.getSettings(\"content_options\")\r\n      );\r\n\r\n      this.setState(state => ({ ...state, options }));\r\n    }\r\n\r\n    let value = this.state.value;\r\n    /**\r\n     * Если динамическое значение загрузилось,\r\n     * то используем this.getContent для получение этого динамического значения\r\n     * старые динамические данные\r\n     * */\r\n    if (\r\n      _.get(value, \"dynamic\") &&\r\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\r\n    ) {\r\n      value = this.getContent(\"content_default_value\");\r\n    }\r\n\r\n    /**\r\n     * Если модель обновилась при смене URL\r\n     */\r\n    if (\r\n      prevProps &&\r\n      !prevProps.currentModel.getProperty(\"altrpModelUpdated\") &&\r\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\r\n    ) {\r\n      value = this.getContent(\"content_default_value\");\r\n      this.setState(\r\n        state => ({ ...state, value, contentLoaded: true }),\r\n        () => {\r\n          this.dispatchFieldValueToStore(value);\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    if (\r\n      this.props.currentModel.getProperty(\"altrpModelUpdated\") &&\r\n      this.props.currentDataStorage.getProperty(\"currentDataStorageLoaded\") &&\r\n      !this.state.contentLoaded\r\n    ) {\r\n      value = this.getContent(\"content_default_value\");\r\n      this.setState(\r\n        state => ({ ...state, value, contentLoaded: true }),\r\n        () => {\r\n          this.dispatchFieldValueToStore(value);\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    if (this.state.value !== value) {\r\n      this.setState(\r\n        state => ({ ...state, value }),\r\n        () => {\r\n          this.dispatchFieldValueToStore(value);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Получить url для запросов\r\n   */\r\n  getRoute() {\r\n    let url = this.props.element.getSettings(\"model_for_options\");\r\n\r\n    if (url.indexOf(\"/\") === -1) {\r\n      return `/ajax/models/${url}_options`;\r\n    }\r\n    if (url.indexOf(\"{{\") !== -1) {\r\n      url = replaceContentWithData(url);\r\n    }\r\n    return url;\r\n  }\r\n  /**\r\n   * Обновление виджета\r\n   */\r\n  async _componentDidUpdate(prevProps, prevState) {\r\n    const { content_options, model_for_options } = this.state.settings;\r\n    if (\r\n      prevProps &&\r\n      !prevProps.currentDataStorage.getProperty(\"currentDataStorageLoaded\") &&\r\n      this.props.currentDataStorage.getProperty(\"currentDataStorageLoaded\")\r\n    ) {\r\n      let value = this.getContent(\r\n        \"content_default_value\",\r\n        this.props.element.getSettings(\"select2_multiple\")\r\n      );\r\n      this.setState(\r\n        state => ({ ...state, value, contentLoaded: true }),\r\n        () => {\r\n          this.dispatchFieldValueToStore(value);\r\n        }\r\n      );\r\n    }\r\n\r\n    /**\r\n     * Если обновилась модель, то пробрасываем в стор новое значение (старый источник диамических данных)\r\n     */\r\n    if (\r\n      !_.isEqual(this.props.currentModel, prevProps.currentModel) &&\r\n      this.state.value &&\r\n      this.state.value.dynamic\r\n    ) {\r\n      this.dispatchFieldValueToStore(this.getContent(\"content_default_value\"));\r\n    }\r\n\r\n    /**\r\n     * Если обновилось хранилище данных формы, currentDataStorage или модель, то получаем новые опции c сервера\r\n     */\r\n    if (\r\n      this.props.formsStore !== prevProps.formsStore ||\r\n      this.props.currentModel !== prevProps.currentModel ||\r\n      this.props.currentDataStorage !== prevProps.currentDataStorage\r\n    ) {\r\n      this.updateOptions();\r\n    }\r\n    if (content_options && !model_for_options) {\r\n      let options = parseOptionsFromSettings(content_options);\r\n      if (!_.isEqual(options, this.state.options)) {\r\n        this.setState(state => ({ ...state, options }));\r\n      }\r\n    }\r\n    this.updateValue(prevProps);\r\n  }\r\n\r\n  /**\r\n   * Обновить значение если нужно\r\n   * @param {{}} prevProps\r\n   */\r\n  updateValue(prevProps) {\r\n    if (isEditor()) {\r\n      return;\r\n    }\r\n    let content_calculation = this.props.element.getSettings(\r\n      \"content_calculation\"\r\n    );\r\n    const altrpforms = this.props.formsStore;\r\n    const fieldName = this.props.element.getFieldId();\r\n    const formId = this.props.element.getFormId();\r\n    if (!content_calculation) {\r\n      /**\r\n       * Обновить значение, если formsStore изменилось из другого компонента\r\n       */\r\n      const path = `${formId}.${fieldName}`;\r\n      if (\r\n        this.props.formsStore !== prevProps.formsStore &&\r\n        _.get(altrpforms, path) !== this.state.value\r\n      ) {\r\n        this.setState(state => ({\r\n          ...state,\r\n          value: _.get(altrpforms, path)\r\n        }));\r\n      }\r\n      return;\r\n    }\r\n\r\n    const prevContext = {};\r\n\r\n    const altrpdata = this.props.currentDataStorage.getData();\r\n    const altrpmodel = this.props.currentModel.getData();\r\n    const altrpuser = this.props.currentUser.getData();\r\n    const altrppagestate = this.props.altrpPageState.getData();\r\n    const altrpresponses = this.props.altrpresponses.getData();\r\n    const altrpmeta = this.props.altrpMeta.getData();\r\n    const context = this.props.element.getCurrentModel().getData();\r\n    if (content_calculation.indexOf(\"altrpdata\") !== -1) {\r\n      context.altrpdata = altrpdata;\r\n      if (!altrpdata.currentDataStorageLoaded) {\r\n        prevContext.altrpdata = altrpdata;\r\n      } else {\r\n        prevContext.altrpdata = prevProps.currentDataStorage.getData();\r\n      }\r\n    }\r\n    if (content_calculation.indexOf(\"altrpforms\") !== -1) {\r\n      context.altrpforms = altrpforms;\r\n      /**\r\n       * Не производим вычисления, если изменилось текущее поле\r\n       */\r\n      if (`${formId}.${fieldName}` === altrpforms.changedField) {\r\n        prevContext.altrpforms = altrpforms;\r\n      } else {\r\n        prevContext.altrpforms = prevProps.formsStore;\r\n      }\r\n    }\r\n    if (content_calculation.indexOf(\"altrpmodel\") !== -1) {\r\n      context.altrpmodel = altrpmodel;\r\n      prevContext.altrpmodel = prevProps.currentModel.getData();\r\n    }\r\n    if (content_calculation.indexOf(\"altrpuser\") !== -1) {\r\n      context.altrpuser = altrpuser;\r\n      prevContext.altrpuser = prevProps.currentUser.getData();\r\n    }\r\n    if (content_calculation.indexOf(\"altrpuser\") !== -1) {\r\n      context.altrpuser = altrpuser;\r\n      prevContext.altrpuser = prevProps.currentUser.getData();\r\n    }\r\n    if (content_calculation.indexOf(\"altrppagestate\") !== -1) {\r\n      context.altrppagestate = altrppagestate;\r\n      prevContext.altrppagestate = prevProps.altrpPageState.getData();\r\n    }\r\n    if (content_calculation.indexOf(\"altrpmeta\") !== -1) {\r\n      context.altrpmeta = altrpmeta;\r\n      prevContext.altrpmeta = prevProps.altrpMeta.getData();\r\n    }\r\n    if (content_calculation.indexOf(\"altrpresponses\") !== -1) {\r\n      context.altrpresponses = altrpresponses;\r\n      prevContext.altrpresponses = prevProps.altrpresponses.getData();\r\n    }\r\n\r\n    if (content_calculation.indexOf(\"altrpstorage\") !== -1) {\r\n      context.altrpstorage = getDataFromLocalStorage(\"altrpstorage\", {});\r\n    }\r\n\r\n    if (\r\n      _.isEqual(prevProps.currentDataStorage, this.props.currentDataStorage) &&\r\n      _.isEqual(prevProps.currentUser, this.props.currentUser) &&\r\n      _.isEqual(prevProps.formsStore, this.props.formsStore) &&\r\n      _.isEqual(prevProps.altrpPageState, this.props.altrpPageState) &&\r\n      _.isEqual(prevProps.altrpMeta, this.props.altrpMeta) &&\r\n      _.isEqual(prevProps.altrpresponses, this.props.altrpresponses) &&\r\n      _.isEqual(prevProps.currentModel, this.props.currentModel)\r\n    ) {\r\n      return;\r\n    }\r\n    if (\r\n      !_.isEqual(prevProps.formsStore, this.props.formsStore) &&\r\n      `${formId}.${fieldName}` === altrpforms.changedField\r\n    ) {\r\n      return;\r\n    }\r\n    let value = \"\";\r\n    try {\r\n      content_calculation = content_calculation\r\n        .replace(/}}/g, \"')\")\r\n        .replace(/{{/g, \"_.get(context, '\");\r\n      value = eval(content_calculation);\r\n      if (value === this.state.value) {\r\n        return;\r\n      }\r\n      this.setState(\r\n        state => ({ ...state, value }),\r\n        () => {\r\n          this.dispatchFieldValueToStore(value);\r\n        }\r\n      );\r\n    } catch (e) {\r\n      console.error(\r\n        \"Evaluate error in Input \" + e.message,\r\n        this.props.element.getId()\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Обновляет опции для селекта при обновлении данных, полей формы\r\n   */\r\n  async updateOptions() {\r\n    {\r\n      let formId = this.props.element.getFormId();\r\n      let paramsForUpdate = this.props.element.getSettings(\"params_for_update\");\r\n      let formData = _.get(this.props.formsStore, [formId], {});\r\n      paramsForUpdate = parseParamsFromString(\r\n        paramsForUpdate,\r\n        new AltrpModel(formData)\r\n      );\r\n      /**\r\n       * Сохраняем параметры запроса, и если надо обновляем опции\r\n       */\r\n      let options = [...this.state.options];\r\n      if (!_.isEqual(paramsForUpdate, this.state.paramsForUpdate)) {\r\n        if (!_.isEmpty(paramsForUpdate)) {\r\n          if (this.props.element.getSettings(\"params_as_filters\", false)) {\r\n            paramsForUpdate = JSON.stringify(paramsForUpdate);\r\n            options = await new Resource({\r\n              route: this.getRoute()\r\n            }).getQueried({ filters: paramsForUpdate });\r\n          } else {\r\n            options = await new Resource({ route: this.getRoute() }).getQueried(\r\n              paramsForUpdate\r\n            );\r\n          }\r\n          options = !_.isArray(options) ? options.data : options;\r\n          options = _.isArray(options) ? options : [];\r\n        } else if (this.state.paramsForUpdate) {\r\n          options = await new Resource({ route: this.getRoute() }).getAll();\r\n          options = !_.isArray(options) ? options.data : options;\r\n          options = _.isArray(options) ? options : [];\r\n        }\r\n        // console.log(options);\r\n        // console.log(this.state.value);\r\n        this.setState(state => ({\r\n          ...state,\r\n          paramsForUpdate,\r\n          options\r\n        }));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Изменение значения в виджете\r\n   * @param e\r\n   * @param  editor для получения изменений из CKEditor\r\n   */\r\n  onChange(e, editor = null) {\r\n    let value = \"\";\r\n    let valueToDispatch;\r\n    if (e && e.target) {\r\n      value = e.target.value;\r\n    }\r\n\r\n    if (e && e.value) {\r\n      value = e.value;\r\n    }\r\n    if (_.get(editor, \"getData\")) {\r\n      value = `<div class=\"ck ck-content\" style=\"width:100%\">${editor.getData()}</div>`;\r\n    }\r\n    if (_.isArray(e)) {\r\n      value = _.cloneDeep(e);\r\n    }\r\n    if (\r\n      this.props.element.getSettings(\"content_options_nullable\") &&\r\n      e &&\r\n      e.value === \"<null>\"\r\n    ) {\r\n      value = null;\r\n    }\r\n\r\n    this.setState(\r\n      state => ({\r\n        ...state,\r\n        value\r\n      }),\r\n      () => {\r\n        /**\r\n         * Обновляем хранилище только если не текстовое поле\r\n         */\r\n\r\n        const change_actions = this.props.element.getSettings(\"change_actions\");\r\n        const change_change_end = this.props.element.getSettings(\r\n          \"change_change_end\"\r\n        );\r\n        const change_change_end_delay = this.props.element.getSettings(\r\n          \"change_change_end_delay\"\r\n        );\r\n\r\n        this.dispatchFieldValueToStore(\r\n          valueToDispatch !== undefined ? valueToDispatch : value,\r\n          true\r\n        );\r\n\r\n        if (change_actions && !change_change_end && !isEditor()) {\r\n          this.debounceDispatch(\r\n            valueToDispatch !== undefined ? valueToDispatch : value\r\n          );\r\n        }\r\n        if (change_actions && change_change_end && !isEditor()) {\r\n          this.timeInput && clearTimeout(this.timeInput);\r\n          this.timeInput = setTimeout(() => {\r\n            this.debounceDispatch(\r\n              valueToDispatch !== undefined ? valueToDispatch : value\r\n            );\r\n          }, change_change_end_delay);\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  debounceDispatch = _.debounce(\r\n    value => this.dispatchFieldValueToStore(value, true),\r\n    150\r\n  );\r\n\r\n  /**\r\n   * получить опции\r\n   */\r\n  getOptions() {\r\n    let options = [...this.state.options];\r\n    const optionsDynamicSetting = this.props.element.getDynamicSetting(\r\n      \"content_options\"\r\n    );\r\n    if (optionsDynamicSetting) {\r\n      options = convertData(optionsDynamicSetting, options);\r\n    }\r\n    if (!this.props.element.getSettings(\"sort_default\")) {\r\n      options = _.sortBy(options, o => o && (o.label ? o.label.toString() : o));\r\n    }\r\n    return options;\r\n  }\r\n\r\n  /**\r\n   * Для действие по фокусу\r\n   * @param e\r\n   * @return {Promise<void>}\r\n   */\r\n\r\n  onFocus = async e => {\r\n    const focus_actions = this.props.element.getSettings(\"focus_actions\");\r\n\r\n    if (focus_actions && !isEditor()) {\r\n      const actionsManager = (\r\n        await import(\r\n          /* webpackChunkName: 'ActionsManager' */\r\n          \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\r\n          )\r\n      ).default;\r\n      await actionsManager.callAllWidgetActions(\r\n        this.props.element.getIdForAction(),\r\n        \"focus\",\r\n        focus_actions,\r\n        this.props.element\r\n      );\r\n    }\r\n  };\r\n  /**\r\n   * Потеря фокуса для оптимизации\r\n   * @param  e\r\n   * @param  editor для получения изменений из CKEditor\r\n   */\r\n  onBlur = async (e, editor = null) => {\r\n    if (_.get(editor, \"getData\")) {\r\n      this.dispatchFieldValueToStore(editor.getData(), true);\r\n    }\r\n    if (this.props.element.getSettings(\"actions\", []) && !isEditor()) {\r\n      const actionsManager = (\r\n        await import(\r\n          /* webpackChunkName: 'ActionsManager' */\r\n          \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\r\n          )\r\n      ).default;\r\n      await actionsManager.callAllWidgetActions(\r\n        this.props.element.getIdForAction(),\r\n        \"blur\",\r\n        this.props.element.getSettings(\"actions\", []),\r\n        this.props.element\r\n      );\r\n    }\r\n  };\r\n  /**\r\n   * Передадим значение в хранилище формы\r\n   * @param {*} value\r\n   * @param {boolean} userInput true - имзенилось пользователем\r\n   */\r\n  dispatchFieldValueToStore = async (value, userInput = false) => {\r\n    let formId = this.props.element.getFormId();\r\n    let fieldName = this.props.element.getFieldId();\r\n    if (fieldName.indexOf(\"{{\") !== -1) {\r\n      fieldName = replaceContentWithData(fieldName);\r\n    }\r\n    if (_.isObject(this.props.appStore) && fieldName && formId) {\r\n      this.props.appStore.dispatch(\r\n        changeFormFieldValue(fieldName, value, formId, userInput)\r\n      );\r\n      if (userInput) {\r\n        const change_actions = this.props.element.getSettings(\"change_actions\");\r\n\r\n        if (change_actions && !isEditor()) {\r\n          const actionsManager = (\r\n            await import(\r\n              /* webpackChunkName: 'ActionsManager' */\r\n              \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\r\n              )\r\n          ).default;\r\n          await actionsManager.callAllWidgetActions(\r\n            this.props.element.getIdForAction(),\r\n            \"change\",\r\n            change_actions,\r\n            this.props.element\r\n          );\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Обработка добавления опции по ajax\r\n   * @param {SyntheticKeyboardEvent} e\r\n   */\r\n  createItem = async e => {\r\n    const keyCode = e.keyCode;\r\n    const { value: inputValue } = e.target;\r\n    if (keyCode !== 13 || !inputValue) {\r\n      return;\r\n    }\r\n    const {\r\n      create_url,\r\n      create_label,\r\n      create_data,\r\n      select2_multiple\r\n    } = this.props.element.getSettings();\r\n    if (!create_label && !create_url) {\r\n      return;\r\n    }\r\n    const currentModel = this.props.element.getCurrentModel();\r\n    let data = parseParamsFromString(create_data, currentModel, true);\r\n    data[create_label] = inputValue;\r\n    let url = parseURLTemplate(create_url, currentModel.getData());\r\n    this.setState(state => ({ ...state, isDisabled: true }));\r\n    try {\r\n      const resource = new Resource({\r\n        route: url\r\n      });\r\n      let res = await resource.post(data);\r\n      if (res.success && _.get(res, \"data.id\")) {\r\n        let newOption = {\r\n          label: inputValue,\r\n          value: _.get(res, \"data.id\")\r\n        };\r\n        this.setState(\r\n          state => ({ ...state, isDisabled: false }),\r\n          () => {\r\n            let options = [...this.state.options];\r\n            options.unshift(newOption);\r\n            let value = this.state.value;\r\n            if (select2_multiple) {\r\n              value = value ? [...value] : [];\r\n              value.push(_.get(res, \"data.id\"));\r\n            } else {\r\n              value = _.get(res, \"data.id\");\r\n            }\r\n            this.setState(\r\n              state => ({ ...state, options, value }),\r\n              () => {\r\n                const selectStateManager = _.get(\r\n                  this,\r\n                  \"altrpSelectRef.current.selectRef.current\"\r\n                );\r\n                if (selectStateManager) {\r\n                  selectStateManager.setState({\r\n                    menuIsOpen: false,\r\n                    inputValue: \"\"\r\n                  });\r\n                }\r\n              }\r\n            );\r\n          }\r\n        );\r\n      }\r\n      this.setState(state => ({ ...state, isDisabled: false }));\r\n    } catch (error) {\r\n      console.error(error);\r\n      this.setState(state => ({ ...state, isDisabled: false }));\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Взовращает имя для атрибута name\r\n   * @return {string}\r\n   */\r\n  getName() {\r\n    return `${this.props.element.getFormId()}[${this.props.element.getFieldId()}]`;\r\n  }\r\n\r\n  render() {\r\n    let label = null;\r\n    const settings = this.props.element.getSettings();\r\n    const {\r\n      options_sorting,\r\n      content_readonly,\r\n      image_select_options,\r\n      select2_multiple: isMultiple,\r\n      label_icon\r\n    } = settings;\r\n\r\n    let value = this.state.value;\r\n\r\n    if (\r\n      _.get(value, \"dynamic\") &&\r\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\r\n    ) {\r\n      value = this.getContent(\"content_default_value\");\r\n    }\r\n    /**\r\n     * Пока динамический контент загружается (Еесли это динамический контент),\r\n     * нужно вывести пустую строку\r\n     */\r\n    if (value && value.dynamic) {\r\n      value = \"\";\r\n    }\r\n    let classLabel = \"\";\r\n    let styleLabel = {};\r\n    const content_label_position_type = this.props.element.getResponsiveSetting(\r\n      \"content_label_position_type\"\r\n    );\r\n    switch (content_label_position_type) {\r\n      case \"top\":\r\n        styleLabel = {\r\n          marginBottom: this.state.settings.label_style_spacing\r\n            ? this.state.settings.label_style_spacing.size +\r\n            this.state.settings.label_style_spacing.unit\r\n            : 2 + \"px\"\r\n        };\r\n        classLabel = \"\";\r\n        break;\r\n      case \"bottom\":\r\n        styleLabel = {\r\n          marginTop: this.state.settings.label_style_spacing\r\n            ? this.state.settings.label_style_spacing.size +\r\n            this.state.settings.label_style_spacing.unit\r\n            : 2 + \"px\"\r\n        };\r\n        classLabel = \"\";\r\n        break;\r\n      case \"left\":\r\n        styleLabel = {\r\n          marginRight: this.state.settings.label_style_spacing\r\n            ? this.state.settings.label_style_spacing.size +\r\n            this.state.settings.label_style_spacing.unit\r\n            : 2 + \"px\"\r\n        };\r\n        classLabel = \"altrp-field-label-container-left\";\r\n        // this.label.current.classList.add(\"hello\")\r\n\r\n        break;\r\n      case \"absolute\":\r\n        styleLabel = {\r\n          position: \"absolute\",\r\n          zIndex: 2\r\n        };\r\n        classLabel = \"\";\r\n        break;\r\n    }\r\n\r\n    if (this.state.settings.content_label) {\r\n      label = (\r\n        <div\r\n          className={\"altrp-field-label-container \" + classLabel}\r\n          style={styleLabel}\r\n        >\r\n          <label\r\n            className={`altrp-field-label ${this.state.settings.content_required\r\n              ? \"altrp-field-label--required\"\r\n              : \"\"\r\n            }`}\r\n          >\r\n            {this.state.settings.content_label}\r\n          </label>\r\n          {label_icon && label_icon.assetType && (\r\n            <span className=\"altrp-label-icon\">\r\n              {renderAssetIcon(label_icon)}\r\n            </span>\r\n          )}\r\n        </div>\r\n      );\r\n    } else {\r\n      label = null;\r\n    }\r\n\r\n    let autocomplete = \"off\";\r\n    if (this.state.settings.content_autocomplete) {\r\n      autocomplete = \"on\";\r\n    } else {\r\n      autocomplete = \"off\";\r\n    }\r\n\r\n    const input = this.renderRepeatedInput();\r\n\r\n    return (\r\n      <AltrpFieldContainer\r\n        settings={settings}\r\n        className={\"altrp-field-container altrp-field-radio-container \"}\r\n      >\r\n        {content_label_position_type === \"top\" ? label : \"\"}\r\n        {content_label_position_type === \"left\" ? label : \"\"}\r\n        {content_label_position_type === \"right\" ? label : \"\"}\r\n        {content_label_position_type === \"absolute\" ? label : \"\"}\r\n        {/* .altrp-field-label-container */}\r\n        {input}\r\n        {content_label_position_type === \"bottom\" ? label : \"\"}\r\n      </AltrpFieldContainer>\r\n    );\r\n  }\r\n  /**\r\n   * Выводит input type=checkbox|radio\r\n   */\r\n  renderRepeatedInput() {\r\n    const inline = this.props.element.getResponsiveSetting(\"vertical_radio\", \"\", false);\r\n\r\n    const { options = [] } = this.state;\r\n    let { value = \"\" } = this.state;\r\n    const fieldName =\r\n      this.props.element.getFieldId() ||\r\n      Math.random()\r\n        .toString(36)\r\n        .substr(2, 9);\r\n    const formID =\r\n      this.props.element.getFormId() ||\r\n      Math.random()\r\n        .toString(36)\r\n        .substr(2, 9);\r\n    return (\r\n      <div className=\"altrp-field-subgroup\">\r\n        <RadioGroup\r\n          className=\"altrp-field-radio-group\"\r\n          name={`${formID}-${fieldName}`}\r\n          inline={!inline}\r\n          onChange={this.onChange}\r\n          selectedValue={this.state.value}\r\n        >\r\n          {options.map((option, idx) => {\r\n            let checked = false;\r\n            /**\r\n             * Если значение или опция число, то приведем к числу перед сравнением\r\n             */\r\n            if (this.props.element.getName() === \"input-radio\") {\r\n              checked = altrpCompare(value, option.value, \"==\");\r\n            } else {\r\n              value = _.isArray(value) ? value : value ? [value] : [];\r\n              checked = altrpCompare(option.value, value, \"in\");\r\n            }\r\n            return (\r\n              <Radio\r\n                className={`altrp-field-radio ${checked ? \"active\" : \"\"}`}\r\n                label={option.label}\r\n                value={option.value}\r\n                key={`${fieldName}-${idx}`}\r\n              />\r\n              // <span className=\"altrp-field-option-span\">\r\n              //   {/*<Radio*/}\r\n              //   {/*  // type=\"radio\"*/}\r\n              //   {/*  value={option.value}*/}\r\n              //   {/*  // name={`${formID}-${fieldName}`}*/}\r\n              //   {/*  // className={`altrp-field-option__input ${checked ? \"active\" : \"\"*/}\r\n              //   {/*    // }`}*/}\r\n              //   {/*  // onChange={this.onChange}*/}\r\n              //   {/*  // checked={checked}*/}\r\n              //   {/*  // id={`${formID}-${fieldName}-${idx}`}*/}\r\n              //   {/*/>*/}\r\n              // </span>\r\n              // </Radio>\r\n            );\r\n          })}\r\n        </RadioGroup>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputRadioWidget;\r\n"],"sourceRoot":""}