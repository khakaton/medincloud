{"version":3,"sources":["webpack:///./resources/modules/front-app/src/js/classes/AltrpAction.js","webpack:///./resources/modules/front-app/src/js/classes/modules/ActionsManager.js","webpack:///./resources/modules/front-app/src/js/helpers/sendEmail.js","webpack:///./resources/modules/front-app/src/js/store/current-email-template/actions.js","webpack:///./resources/modules/front-app/src/js/store/popup-trigger/actions.js"],"names":["window","altrpHelpers","altrpLogin","altrpLogout","dataFromTable","dataToCSV","dataToXML","elementsToPdf","getAppContext","getComponentByElementId","getHTMLElementById","parseParamsFromString","getDataByPath","printElements","replaceContentWithData","scrollToElement","setDataByPath","dataToXLS","delay","altrpCompare","getWrapperHTMLElementByElement","AltrpAction","data","widgetId","element","setProperty","init","this","getProperty","getId","formId","indexOf","getCurrentModel","getData","formURL","getElementId","getElement","name","defaultValue","value","_","isString","getType","getFormURL","form","formsManager","registerForm","getFormId","type","result","success","confirmText","confirm","message","doActionForm","doActionDelay","doActionEmail","doActionRedirect","doActionToggleElements","doActionTogglePopup","doActionPrintPage","doActionPrintElements","doActionScrollToElement","doActionScrollToTop","doActionScrollToBottom","doActionTrigger","doActionPageToPDF","doActionElementsToPDF","doActionDataToCSV","doActionTableToCSV","doActionTableToXML","doActionTableToXLS","doActionLogin","doActionLogout","doActionSetData","doActionUpdateCurrentDatasources","doActionFormsManipulate","doActionCustomCode","doActionPlaySound","doActionCondition","doActionVIToggle","alertText","alert","default","customHeaders","isArray","get","bulk","customRoute","assign","bulkRequests","map","item","idx","url","submit","Promise","all","console","error","forEach","deleteFormById","_data","isEmpty","formOptions","dynamicURL","response","URL","frontAppRouter","history","goBack","location","push","href","IDs","split","id","component","toggleElementDisplay","loadPopups","appStore","dispatch","togglePopup","print","elementsToPrint","elementId","trim","getStylesHTMLElement","stylesElement","document","head","scroller","mainScrollbars","querySelector","scrollTop","scrollTo","routeContent","getElementById","offsetHeight","filename","elements","all_sources_path","table","formattedData","each","row","Object","values","rawTemplateData","parsedTemplateData","reduce","keyValuePair","templateName","blob","link","createElement","setAttribute","createObjectURL","body","appendChild","click","removeChild","fields","field","fieldValidate","paths","path","setType","count","length","replace","currentValue","v","nextIndex","isNaN","Number","isObject","i","listPath","list","filter","_item","change","elementRef","current","selectAll","clearValue","code","eval","aliases","alias","allDataSources","dataStorageUpdater","dataSourcesToUpdate","dataSource","updateCurrent","action","isFunction","fireAction","templateGUID","res","sendEmail","getReplacedProperty","duration","loop","playSound","compare","conditionLeft","conditionRight","loadVIPlugin","AltrpModel","isEditor","ActionsManager","actions","eventName","a","unsetProperty","preventedActions","errors","registerWidgetActions","doAction","actionsManager","emailTemplateGUID","subject","from","to","attachments","templateLoader","loadTemplate","template","changeCurrentEmailTemplate","html","emailTemplatesRenderer","emailTemplate","cloneNode","style","display","outerHTML","resource","Resource","route","post","CHANGE_CURRENT_EMAIL_TEMPLATE","TRIGGER_POPUP","payload"],"mappings":"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","file":"2167.6aa51d3109a9ab0e8818.bundle.js","sourcesContent":["import AltrpModel from '../../../../editor/src/js/classes/AltrpModel';\r\nimport { togglePopup } from '../store/popup-trigger/actions';\r\nimport { sendEmail } from '../helpers/sendEmail';\r\nconst {\r\n  altrpLogin,\r\n  altrpLogout,\r\n  dataFromTable,\r\n  dataToCSV,\r\n  dataToXML,\r\n  elementsToPdf,\r\n  getAppContext,\r\n  getComponentByElementId,\r\n  getHTMLElementById,\r\n  parseParamsFromString,\r\n  getDataByPath,\r\n  printElements,\r\n  replaceContentWithData,\r\n  scrollToElement,\r\n  setDataByPath,\r\n  dataToXLS,\r\n  delay,\r\n  altrpCompare,\r\n  getWrapperHTMLElementByElement\r\n} = window.altrpHelpers;\r\n\r\n// let  history = require('history');\r\n// // import {history} from 'history';\r\n// console.log(history.history);\r\n/**\r\n * Класс представляющий действия на странице\r\n * @link https://docs.google.com/document/d/1v8Hm1DLkqqwzBeISd8-UvgTqscVxQPtBUtKqBrH1HaU/edit#\r\n * @class AltrpAction\r\n */\r\nclass AltrpAction extends AltrpModel {\r\n  constructor(data, widgetId, element) {\r\n    super(data);\r\n    this.setProperty('_widgetId', widgetId);\r\n    this.setProperty('_element', element);\r\n    this.init();\r\n  }\r\n\r\n  /**\r\n   * Получить id элемента\r\n   * @return {string}\r\n   */\r\n  getElementId() {\r\n    return this.getProperty('_element').getId();\r\n  }\r\n\r\n  /**\r\n   * Получить id для регистрации формы\r\n   * @return {string}\r\n   */\r\n  getFormId() {\r\n    let formId = this.getProperty('form_id');\r\n    if (!formId) {\r\n      return formId;\r\n    }\r\n    if (formId.indexOf('{{') !== -1) {\r\n      formId = replaceContentWithData(formId, this.getCurrentModel().getData());\r\n    }\r\n    return formId;\r\n  }\r\n\r\n  /**\r\n   * Получить URL формы\r\n   * @return {string}\r\n   */\r\n  getFormURL() {\r\n    let formURL = this.getProperty('form_url');\r\n    if (!formURL) {\r\n      return formURL;\r\n    }\r\n    if (formURL.indexOf('{{') !== -1) {\r\n      formURL = replaceContentWithData(\r\n        formURL,\r\n        this.getCurrentModel().getData()\r\n      );\r\n    }\r\n    return formURL;\r\n  }\r\n\r\n  /**\r\n   * Получить компонент обертки для элемента\r\n   * @return {{}}\r\n   */\r\n  getWrapperComponent() {\r\n    return getComponentByElementId(this.getElementId());\r\n  }\r\n\r\n  /**\r\n   * Получить экземпляр элемента\r\n   * @return {FrontElement | null}\r\n   */\r\n  getElement() {\r\n    return this.getProperty('_element');\r\n  }\r\n  /**\r\n   * Получить экземпляр текущей модели страницы или карточки\r\n   * @return {AltrpModel | null}\r\n   */\r\n  getCurrentModel() {\r\n    const element = this.getElement();\r\n    return element.getCurrentModel();\r\n  }\r\n\r\n  /**\r\n   * Возврашает значение свойства name, если свойство строка, то производит подстановку значений из данных\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  getReplacedProperty(name, defaultValue = '') {\r\n    let value = this.getProperty(name, defaultValue);\r\n    if (_.isString(value)) {\r\n      value = replaceContentWithData(value, this.getCurrentModel().getData());\r\n    }\r\n    return value;\r\n  }\r\n  /**\r\n   * Инициируем действие\r\n   */\r\n  async init() {\r\n    switch (this.getType()) {\r\n      case 'form': {\r\n        if (!this.getFormURL()) {\r\n          this.setProperty('_form', null);\r\n          return;\r\n        }\r\n        // const formsManager = (\r\n        //   await import(\r\n        //     '../../../../editor/src/js/classes/modules/FormsManager.js'\r\n        //   )\r\n        // ).default;\r\n        // const formOptions = {\r\n        //   dynamicURL: true,\r\n        //   customRoute: this.getFormURL()\r\n        // };\r\n\r\n        // const form = formsManager.registerForm(\r\n        //   this.getFormId(),\r\n        //   '',\r\n        //   this.getProperty('form_method'),\r\n        //   formOptions\r\n        // );\r\n        // this.setProperty('_form', form);\r\n        return;\r\n      }\r\n      case 'login': {\r\n        const form = formsManager.registerForm(\r\n          this.getFormId(),\r\n          'login',\r\n          'POST'\r\n        );\r\n        this.setProperty('_form', form);\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * Получить тип действия\r\n   * @return {string}\r\n   */\r\n  getType() {\r\n    return this.getProperty('type');\r\n  }\r\n  /**\r\n   * Получить тип действия\r\n   * @return {*}\r\n   */\r\n  setType(type) {\r\n    return this.setProperty('type', type);\r\n  }\r\n\r\n  /**\r\n   * Оссинхронно выполняет действие\r\n   * @return {Promise<void>}\r\n   */\r\n  async doAction() {\r\n    let result = {\r\n      success: false\r\n    };\r\n    let confirmText = this.getProperty('confirm');\r\n    if (confirmText && !confirm(confirmText)) {\r\n      return {\r\n        success: false,\r\n        message: 'User not Confirm'\r\n      };\r\n    }\r\n    switch (this.getType()) {\r\n      case 'form':\r\n        {\r\n          result = await this.doActionForm();\r\n        }\r\n        break;\r\n      case 'delay':\r\n        {\r\n          result = await this.doActionDelay();\r\n        }\r\n        break;\r\n      case 'email':\r\n        {\r\n          result = await this.doActionEmail();\r\n        }\r\n        break;\r\n      case 'redirect':\r\n        {\r\n          result = await this.doActionRedirect();\r\n        }\r\n        break;\r\n      case 'toggle_element':\r\n        {\r\n          result = await this.doActionToggleElements();\r\n        }\r\n        break;\r\n      case 'toggle_popup':\r\n        {\r\n          result = await this.doActionTogglePopup();\r\n        }\r\n        break;\r\n      case 'print_page':\r\n        {\r\n          result = await this.doActionPrintPage();\r\n        }\r\n        break;\r\n      case 'print_elements':\r\n        {\r\n          result = await this.doActionPrintElements();\r\n        }\r\n        break;\r\n      case 'scroll_to_element':\r\n        {\r\n          result = await this.doActionScrollToElement();\r\n        }\r\n        break;\r\n      case 'scroll_to_top':\r\n        {\r\n          result = await this.doActionScrollToTop();\r\n        }\r\n        break;\r\n      case 'scroll_to_bottom':\r\n        {\r\n          result = await this.doActionScrollToBottom();\r\n        }\r\n        break;\r\n      case 'trigger':\r\n        {\r\n          result = await this.doActionTrigger();\r\n        }\r\n        break;\r\n      case 'page_to_pdf':\r\n        {\r\n          result = await this.doActionPageToPDF();\r\n        }\r\n        break;\r\n      case 'elements_to_pdf':\r\n        {\r\n          result = await this.doActionElementsToPDF();\r\n        }\r\n        break;\r\n      case 'data_to_csv':\r\n        {\r\n          result = await this.doActionDataToCSV();\r\n        }\r\n        break;\r\n      case 'table_to_csv':\r\n        {\r\n          result = await this.doActionTableToCSV();\r\n        }\r\n        break;\r\n      case 'table_to_xml':\r\n      {\r\n        result = await this.doActionTableToXML();\r\n      }\r\n        break;\r\n      case 'table_to_xls':\r\n        result = await this.doActionTableToXLS();\r\n        break;\r\n      case 'login':\r\n        {\r\n          result = await this.doActionLogin();\r\n        }\r\n        break;\r\n      case 'logout':\r\n        {\r\n          result = await this.doActionLogout();\r\n        }\r\n        break;\r\n      case 'set_data':\r\n        {\r\n          result = await this.doActionSetData();\r\n        }\r\n        break;\r\n      case 'update_current_datasources':\r\n        {\r\n          result = await this.doActionUpdateCurrentDatasources();\r\n        }\r\n        break;\r\n      case 'forms_manipulate':\r\n        {\r\n          result = await this.doActionFormsManipulate();\r\n        }\r\n        break;\r\n      case 'custom_code':\r\n        {\r\n          result = await this.doActionCustomCode();\r\n        }\r\n        break;\r\n      case 'play_sound':\r\n        {\r\n          result = await this.doActionPlaySound();\r\n        }\r\n        break;\r\n      case 'condition':\r\n        {\r\n          result = await this.doActionCondition();\r\n        }\r\n        break;\r\n      case 'vi_toggle':\r\n        {\r\n          result = await this.doActionVIToggle();\r\n        }\r\n        break;\r\n    }\r\n    let alertText = '';\r\n    if (result.success) {\r\n      alertText = this.getProperty('alert');\r\n    } else {\r\n      alertText = this.getProperty('reject');\r\n    }\r\n    if (alertText) {\r\n      alertText = replaceContentWithData(alertText);\r\n      alert(alertText);\r\n    }\r\n    return result;\r\n  }\r\n  /**\r\n   * Ассинхронно выполняет действие-формы\r\n   * @return {Promise<{}>}\r\n   */\r\n  async doActionForm() {\r\n    // if (! this.getProperty('_form')) {\r\n    //   return {\r\n    //     success: false,\r\n    //     message: 'Нет Формы'\r\n    //   };\r\n    // }\r\n    const formsManager = (\r\n      await import(/* webpackChunkName: 'formsManager' */'../../../../editor/src/js/classes/modules/FormsManager.js')\r\n    ).default;\r\n\r\n    let data = null;\r\n    let customHeaders = null;\r\n    if (this.getProperty('custom_headers')) {\r\n      customHeaders = parseParamsFromString(\r\n        this.getProperty('custom_headers'),\r\n        this.getCurrentModel()\r\n      );\r\n    }\r\n    if (this.getProperty('data')) {\r\n      data = parseParamsFromString(\r\n        this.getProperty('data'),\r\n        getAppContext(this.getCurrentModel()),\r\n        true\r\n      );\r\n      // if (!_.isEmpty(data)) {\r\n      //   return form.submit('', '', data);\r\n      // }\r\n      // return { success: true };\r\n    }\r\n    if (this.getProperty('forms_bulk')) {\r\n      if (\r\n        _.isArray(getDataByPath(this.getProperty('bulk_path'))) &&\r\n        _.get(getDataByPath(this.getProperty('bulk_path')), 'length')\r\n      ) {\r\n        let bulk = getDataByPath(this.getProperty('bulk_path'));\r\n        /**\r\n         * Для получение данных с полей формы, нужно создать форму и вызвать метод getData\r\n         * @type {AltrpForm}\r\n         */\r\n        const form = formsManager.registerForm(\r\n          this.getFormId(),\r\n          '',\r\n          this.getProperty('form_method'),\r\n          {\r\n            customRoute: ''\r\n          }\r\n        );\r\n        data = _.assign(form.getData(), data);\r\n        let bulkRequests = bulk.map(async (item, idx) => {\r\n          if (this.getProperty('data')) {\r\n            data = parseParamsFromString(\r\n              this.getProperty('data'),\r\n              getAppContext(item),\r\n              true\r\n            );\r\n          }\r\n          let url = this.getProperty('form_url');\r\n          url = replaceContentWithData(url, item);\r\n          const form = formsManager.registerForm(\r\n            this.getFormId() + idx,\r\n            '',\r\n            this.getProperty('form_method'),\r\n            {\r\n              customRoute: url\r\n            }\r\n          );\r\n          return await form.submit('', '', data, customHeaders);\r\n        });\r\n        try {\r\n          let res = await Promise.all(bulkRequests);\r\n        } catch (error) {\r\n          console.error(error);\r\n          bulk.forEach((item, idx) => {\r\n            formsManager.deleteFormById(this.getFormId() + idx);\r\n          });\r\n          return { success: false };\r\n        }\r\n        bulk.forEach((item, idx) => {\r\n          formsManager.deleteFormById(this.getFormId() + idx);\r\n        });\r\n      }\r\n\r\n      return { success: true };\r\n    }\r\n    if (this.getProperty('path')) {\r\n      let _data = getDataByPath(this.getProperty('path'), {});\r\n      if (!_.isEmpty(_data)) {\r\n        data = _.assign(_data, data);\r\n      }\r\n    }\r\n    /**\r\n     *\r\n     * @type {AltrpForm}\r\n     */\r\n    // let form = this.getProperty('_form');\r\n    if (!this.getFormURL()) {\r\n      this.setProperty('_form', null);\r\n      return {\r\n        success: false\r\n      };\r\n    }\r\n    const formOptions = {\r\n      dynamicURL: true,\r\n      customRoute: this.getFormURL()\r\n    };\r\n    const form = formsManager.registerForm(\r\n      this.getFormId(),\r\n      '',\r\n      this.getProperty('form_method'),\r\n      formOptions\r\n    );\r\n    let result = {\r\n      success: true\r\n    };\r\n    try {\r\n      const response = await form.submit('', '', data, customHeaders);\r\n      result = _.assign(result, response);\r\n    } catch (error) {\r\n      console.error(error);\r\n      result.error = error;\r\n      result.success = false;\r\n    }\r\n\r\n    return result;\r\n  }\r\n  /**\r\n   * Делает редирект на страницу form_url\r\n   * @return {Promise<{}>}\r\n   */\r\n  async doActionRedirect() {\r\n    let URL = this.getFormURL();\r\n    if (window.frontAppRouter) {\r\n      if (this.getProperty('back')) {\r\n        frontAppRouter.history.goBack();\r\n      } else {\r\n        let innerRedirect = !this.getProperty('outer');\r\n        if (innerRedirect) {\r\n          frontAppRouter.history.push(URL);\r\n        } else {\r\n          window.location.assign(URL);\r\n        }\r\n      }\r\n    } else {\r\n      window.location.href = URL;\r\n    }\r\n    return {\r\n      success: true\r\n    };\r\n  }\r\n  /**\r\n   * Показывает/скрывает элементы по пользовательским ИД\r\n   * @return {Promise<{}>}\r\n   */\r\n  async doActionToggleElements() {\r\n    let IDs = this.getProperty('elements_ids');\r\n\r\n    if (!IDs) {\r\n      return { success: true };\r\n    }\r\n    IDs = IDs.split(',');\r\n\r\n    IDs.forEach(id => {\r\n      let component = getComponentByElementId(id);\r\n      if (!component && !component.toggleElementDisplay) {\r\n        return;\r\n      }\r\n      component.toggleElementDisplay();\r\n    });\r\n    return {\r\n      success: true\r\n    };\r\n  }\r\n  /**\r\n   * Показывает/скрывает попап\r\n   * @return {Promise<{}>}\r\n   */\r\n  async doActionTogglePopup() {\r\n    let id = this.getProperty('popup_id');\r\n    if (!id) {\r\n      return {\r\n        success: true\r\n      };\r\n    }\r\n    if(window['h-altrp']){\r\n      const loadPopups = (await import(/* webpackChunkName: 'load-popups' */\"../functions/load-popups\")).default;\r\n      await loadPopups();\r\n    }\r\n    appStore.dispatch(togglePopup(id));\r\n\r\n    return {\r\n      success: true\r\n    };\r\n  }\r\n  /**\r\n   * Печать страницы\r\n   * @return {Promise<{}>}\r\n   */\r\n  async doActionPrintPage() {\r\n    window.print();\r\n    return {\r\n      success: true\r\n    };\r\n  }\r\n  /**\r\n   * Печать элементов\r\n   * @return {Promise<{}>}\r\n   */\r\n  async doActionPrintElements() {\r\n    let IDs = this.getProperty('elements_ids');\r\n    if (!IDs) {\r\n      return { success: true };\r\n    }\r\n    IDs = IDs.split(',');\r\n    let elementsToPrint = [];\r\n    IDs.forEach(elementId => {\r\n      if (!elementId || !elementId.trim()) {\r\n        return;\r\n      }\r\n      getHTMLElementById(elementId.trim()) &&\r\n        elementsToPrint.push(getHTMLElementById(elementId));\r\n      if (getComponentByElementId(elementId.trim())?.getStylesHTMLElement) {\r\n        let stylesElement = getComponentByElementId(\r\n          elementId.trim()\r\n        ).getStylesHTMLElement();\r\n        if (stylesElement) {\r\n          elementsToPrint.push(stylesElement);\r\n        }\r\n      }\r\n    });\r\n    if (_.get(window, 'stylesModule.stylesContainer.current')) {\r\n      elementsToPrint.push(\r\n        _.get(window, 'stylesModule.stylesContainer.current')\r\n      );\r\n    }\r\n    elementsToPrint.push(document.head);\r\n    printElements(elementsToPrint);\r\n    return {\r\n      success: true\r\n    };\r\n  }\r\n  /**\r\n   * Скролл к элементу\r\n   * @return {Promise<{}>}\r\n   */\r\n  async doActionScrollToElement() {\r\n    let elementId = this.getProperty('element_id');\r\n    if (!elementId) {\r\n      return { success: true };\r\n    }\r\n    elementId = elementId.trim();\r\n    const element = getHTMLElementById(elementId);\r\n    let scroller = window.mainScrollbars;\r\n    if(! scroller){\r\n      scroller = document.querySelector('.front-app-content');\r\n    }\r\n    if(! scroller){\r\n      scroller = document.querySelector('.front-app');\r\n    }\r\n    if (element) {\r\n      scrollToElement(scroller, element);\r\n    }\r\n    return {\r\n      success: true\r\n    };\r\n  }\r\n  /**\r\n   * Скролл на верх страницы\r\n   * @return {Promise<{}>}\r\n   */\r\n  async doActionScrollToTop() {\r\n    if(window.mainScrollbars){\r\n      window.mainScrollbars.scrollTop(0);\r\n      return {\r\n        success: true\r\n      };\r\n    }\r\n    let scroller = document.querySelector('.front-app-content');\r\n\r\n    if(! scroller){\r\n      scroller = document.querySelector('.front-app');\r\n    }\r\n    scroller.scrollTo(0,0)\r\n\r\n    return {\r\n      success: true\r\n    };\r\n  }\r\n  /**\r\n   * Скролл на верх страницы\r\n   * @return {Promise<{}>}\r\n   */\r\n  async doActionScrollToBottom() {\r\n    const routeContent = document.getElementById('route-content');\r\n    if (!routeContent) {\r\n      return {\r\n        success: true\r\n      };\r\n    }\r\n    if(window.mainScrollbars){\r\n      window.mainScrollbars.scrollTop(routeContent.offsetHeight);\r\n      return {\r\n        success: true\r\n      };\r\n    }\r\n\r\n    let scroller = document.querySelector('.front-app-content');\r\n\r\n    if(! scroller){\r\n      scroller = document.querySelector('.front-app');\r\n    }\r\n    scroller.scrollTo(0,document.querySelector('.route-content').offsetHeight)\r\n    return {\r\n      success: true\r\n    };\r\n  }\r\n  /**\r\n   * Страницу в PDF\r\n   * @return {Promise<{}>}\r\n   */\r\n  async doActionPageToPDF() {\r\n    let filename = replaceContentWithData(this.getProperty('name', 'file'));\r\n    const elements = [];\r\n\r\n    elements.push(document.getElementById('route-content'));\r\n    return await elementsToPdf(elements, filename);\r\n  }\r\n\r\n  /**\r\n   * Элементы в PDF\r\n   * @return {Promise<{}>}\r\n   */\r\n  async doActionElementsToPDF() {\r\n    let filename = replaceContentWithData(this.getProperty('name', 'file'));\r\n    const elements = [];\r\n    let IDs = this.getProperty('elements_ids');\r\n    if (!IDs) {\r\n      return { success: true };\r\n    }\r\n    IDs = IDs.split(',');\r\n    IDs.forEach(elementId => {\r\n      if (!elementId || !elementId.trim()) {\r\n        return;\r\n      }\r\n      getHTMLElementById(elementId.trim()) &&\r\n        elements.push(getHTMLElementById(elementId));\r\n    });\r\n    return await elementsToPdf(elements, filename);\r\n  }\r\n  /**\r\n   * Данные в CSV-файл\r\n   * @return {Promise<{}>}\r\n   */\r\n  async doActionDataToCSV() {\r\n    let data = getDataByPath(this.getProperty('path'));\r\n    let filename = replaceContentWithData(this.getProperty('name', 'file'));\r\n    try {\r\n      return await dataToCSV(data, filename);\r\n    } catch (error) {\r\n      console.error(error);\r\n      return { success: false };\r\n    }\r\n  }\r\n  /**\r\n   * HTML-Таблицу в CSV-файл\r\n   * @return {Promise<{}>}\r\n   */\r\n  async doActionTableToCSV() {\r\n    let elementId = this.getProperty('element_id');\r\n    if (!elementId) {\r\n      return { success: true };\r\n    }\r\n    elementId = elementId.trim();\r\n    const element = getHTMLElementById(elementId);\r\n    if (!element) {\r\n      return { success: true };\r\n    }\r\n    let data;\r\n    try {\r\n      data = dataFromTable(element);\r\n    } catch (error) {\r\n      console.error(error);\r\n      return { success: false };\r\n    }\r\n    if (_.isEmpty(data)) {\r\n      return { success: true };\r\n    }\r\n    let filename = replaceContentWithData(this.getProperty('name', 'file'));\r\n    try {\r\n      return await dataToCSV(data, filename);\r\n    } catch (error) {\r\n      console.error(error);\r\n      return { success: false };\r\n    }\r\n  }\r\n  /**\r\n   * HTML-Таблицу в XML-файл\r\n   * @return {Promise<{}>}\r\n   */\r\n  async doActionTableToXML() {\r\n    let elementId = this.getProperty('element_id');\r\n    if (!elementId) {\r\n      return { success: true };\r\n    }\r\n    elementId = elementId.trim();\r\n    const element = getHTMLElementById(elementId);\r\n    if (!element) {\r\n      return { success: true };\r\n    }\r\n    let data;\r\n    try {\r\n      data = dataFromTable(element);\r\n    } catch (error) {\r\n      console.error(error);\r\n      return { success: false };\r\n    }\r\n    if (_.isEmpty(data)) {\r\n      return { success: true };\r\n    }\r\n    let filename = replaceContentWithData(this.getProperty('name', 'file'));\r\n    try {\r\n      return await dataToXML(data, filename);\r\n    } catch (error) {\r\n      console.error(error);\r\n      return { success: false };\r\n    }\r\n  }\r\n  /**\r\n   * HTML-таблицу в XLS-файл\r\n   * @return {Promise}\r\n   */\r\n  async doActionTableToXLS() {\r\n\r\n    let data = [];\r\n\r\n    if (this.getProperty('all_sources')){\r\n      const all_sources_path = this.getProperty('all_sources_path');\r\n      if (all_sources_path) data = getDataByPath(all_sources_path, {});\r\n      data = { data };\r\n\r\n    } else {\r\n      const elementId = this.getProperty('element_id').trim();\r\n\r\n      if (!elementId) {\r\n        console.error('Element ID is not set');\r\n        return { success: true };\r\n      }\r\n\r\n      const table = getHTMLElementById(elementId);\r\n      if (!table) {\r\n        console.error('Table with provided ID is not found');\r\n        return { success: true };\r\n      }\r\n\r\n      data = dataFromTable(table);\r\n\r\n      const formattedData = [];\r\n\r\n      _.each(data, row => formattedData.push(Object.values(row)));\r\n      let rawTemplateData = this.getProperty('template_data');\r\n      if (rawTemplateData){\r\n        const parsedTemplateData = rawTemplateData\r\n          .split('\\n')\r\n          .reduce((data, row) => {\r\n            const keyValuePair = row.split('=');\r\n            data[keyValuePair[0]] = keyValuePair[1];\r\n            return data;\r\n          }, {});\r\n          data = { ...parsedTemplateData, data: formattedData };\r\n      } else {\r\n        data = { data };\r\n      }\r\n    }\r\n\r\n    const filename = replaceContentWithData(this.getProperty('name', 'file'));\r\n    const templateName = this.getProperty('template_name');\r\n\r\n    try {\r\n      const blob = await dataToXLS(data, filename, templateName);\r\n      let link = document.createElement('a');\r\n      link.setAttribute('href', window.URL.createObjectURL(blob));\r\n      link.setAttribute('download', filename + '.xlsx');\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error(error);\r\n      return { success: false };\r\n    }\r\n  }\r\n  /**\r\n   * действие-логин\r\n   * @return {Promise<{}>}\r\n   */\r\n  async doActionLogin() {\r\n    /**\r\n     *\r\n     * @member {AltrpForm} form\r\n     */\r\n    let form = this.getProperty('_form');\r\n    let success = true;\r\n    form.fields.forEach(field => {\r\n      if (!field.fieldValidate()) {\r\n        success = false;\r\n      }\r\n    });\r\n    if (!success) {\r\n      return { success: false };\r\n    }\r\n\r\n    return await altrpLogin(form.getData(), this.getFormId());\r\n  }\r\n  /**\r\n   * действие-выход из приложения\r\n   * @return {Promise<{}>}\r\n   */\r\n  async doActionLogout() {\r\n    return await altrpLogout();\r\n  }\r\n  /**\r\n   * действие-установка значения по для пути `path`\r\n   * @return {Promise<{}>}\r\n   */\r\n  async doActionSetData() {\r\n    let paths = this.getProperty('path');\r\n    const result = {\r\n      success: true\r\n    };\r\n    if (!paths) {\r\n      return result;\r\n    }\r\n    if (paths.indexOf(',') !== -1) {\r\n      paths = paths.split(',').map(path => path.trim());\r\n    } else {\r\n      paths = [paths];\r\n    }\r\n    for (let path of paths) {\r\n      path = replaceContentWithData(path, this.getCurrentModel().getData());\r\n      let value = this.getProperty('value') || '';\r\n      value = value.trim();\r\n      const setType = this.getProperty('set_type');\r\n      let count = this.getProperty('count');\r\n      switch (setType) {\r\n        case 'toggle':\r\n          {\r\n            value = !getDataByPath(path);\r\n            result.success = setDataByPath(path, value);\r\n          }\r\n          break;\r\n        case 'set':\r\n          {\r\n            if (\r\n              value.split(/\\r?\\n/).length === 1 &&\r\n              value.indexOf('{{') === 0 &&\r\n              value.indexOf('}}') === value.length - 2 &&\r\n              getDataByPath(value.replace('{{', '').replace('}}', ''),\r\n                  null,\r\n                  this.getCurrentModel())\r\n            ) {\r\n              value = getDataByPath(\r\n                value.replace('{{', '').replace('}}', ''),\r\n                null,\r\n                this.getCurrentModel()\r\n              );\r\n            } else if( value.indexOf('|') !== -1){\r\n              // value = replaceContentWithData(\r\n              //   value,\r\n              //   this.getCurrentModel().getData()\r\n              // );\r\n\r\n              value = parseParamsFromString(\r\n                value,\r\n                this.getCurrentModel(),\r\n                true\r\n              );\r\n            }\r\n            result.success = setDataByPath(path, value);\r\n          }\r\n          break;\r\n        case 'toggle_set':\r\n          {\r\n            let currentValue = getDataByPath(path);\r\n            value = value.split('\\n').map(v => v.trim());\r\n            if (value.length === 1) {\r\n              value.push('');\r\n            }\r\n            let nextIndex = value.indexOf(currentValue) + 1;\r\n            if (nextIndex >= value.length) {\r\n              nextIndex = 0;\r\n            }\r\n            value = value[nextIndex] || '';\r\n            result.success = setDataByPath(path, value);\r\n          }\r\n          break;\r\n        case 'increment':\r\n          {\r\n            let currentValue = getDataByPath(path);\r\n            currentValue = currentValue\r\n              ? _.isNaN(Number(currentValue))\r\n                ? 1\r\n                : Number(currentValue)\r\n              : Number(!!currentValue);\r\n            count = Number(count) || 1;\r\n            currentValue += count;\r\n            result.success = setDataByPath(path, currentValue);\r\n          }\r\n          break;\r\n        case 'decrement':\r\n          {\r\n            let currentValue = getDataByPath(path);\r\n            currentValue = currentValue\r\n              ? _.isNaN(Number(currentValue))\r\n                ? 1\r\n                : Number(currentValue)\r\n              : Number(!!currentValue);\r\n            count = Number(count) || 1;\r\n            currentValue -= count;\r\n            result.success = setDataByPath(path, currentValue);\r\n          }\r\n          break;\r\n        case 'push_items':\r\n          {\r\n            let currentValue = getDataByPath(path);\r\n            let item = {};\r\n            if (!_.isArray(currentValue)) {\r\n              currentValue = [];\r\n            }\r\n            currentValue = [...currentValue];\r\n            if (_.isObject(getDataByPath(value))) {\r\n              item = getDataByPath(value);\r\n            }\r\n            count = Number(count) || 1;\r\n            if (count < 0) {\r\n              count = 1;\r\n            }\r\n            while (count) {\r\n              _.isArray(item)\r\n                ? currentValue.push([...item])\r\n                : currentValue.push({ ...item });\r\n              --count;\r\n            }\r\n            result.success = setDataByPath(path, currentValue);\r\n          }\r\n          break;\r\n        case 'remove_items':\r\n          {\r\n            let items = path.split(/\\r?\\n/);\r\n            items.forEach(i => {\r\n              if (!i) {\r\n                return;\r\n              }\r\n              i = i.trim();\r\n              if (!i) {\r\n                return;\r\n              }\r\n              if (i.indexOf('{{') !== -1) {\r\n                i = replaceContentWithData(i, this.getCurrentModel().getData());\r\n              }\r\n              let item = getDataByPath(i);\r\n              if (!item) {\r\n                return;\r\n              }\r\n              let listPath = i.replace(/.\\d+$/, '').trim();\r\n              if (!listPath) {\r\n                return;\r\n              }\r\n              let list = getDataByPath(listPath);\r\n              if (!_.isArray(list)) {\r\n                return;\r\n              }\r\n              list = [...list];\r\n              list = list.filter(_item => _item !== item);\r\n              setDataByPath(listPath, list);\r\n            });\r\n            result.success = true;\r\n          }\r\n          break;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n  /**\r\n   * действие - манипуляция с элементами форм\r\n   * @return {Promise<{}>}\r\n   */\r\n  doActionFormsManipulate() {\r\n    let IDs = this.getProperty('elements_ids');\r\n    if (!IDs) {\r\n      return { success: true };\r\n    }\r\n    IDs = IDs.split(',');\r\n    const change = this.getProperty('forms_change');\r\n    IDs.forEach(id => {\r\n      let component = getComponentByElementId(id);\r\n      switch (change) {\r\n        case 'select_all':\r\n          {\r\n            if (_.get(component, 'elementRef.current.selectAll')) {\r\n              component.elementRef.current.selectAll();\r\n            }\r\n          }\r\n          break;\r\n        case 'clear':\r\n          {\r\n            if (_.get(component, 'elementRef.current.clearValue')) {\r\n              component.elementRef.current.clearValue();\r\n            }\r\n          }\r\n          break;\r\n      }\r\n    });\r\n    return { success: true };\r\n  }\r\n  /**\r\n   * действие - выполнение пользовательского кода\r\n   * @return {Promise<{}>}\r\n   */\r\n  doActionCustomCode() {\r\n    let code = this.getProperty('code');\r\n    try {\r\n      eval(code);\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Evaluate error in doActionCustomCode' + error.message);\r\n      return { success: false };\r\n    }\r\n  }\r\n  /**\r\n   * действие - обновление текущего хранилища\r\n   * @return {Promise<{}>}\r\n   */\r\n  async doActionUpdateCurrentDatasources() {\r\n    let aliases = this.getProperty('aliases') || '';\r\n    aliases = aliases\r\n      .split(',')\r\n      .map(alias => alias.trim())\r\n      .filter(alias => alias);\r\n    const allDataSources = window.dataStorageUpdater.getProperty(\r\n      'currentDataSources'\r\n    );\r\n    const dataSourcesToUpdate = allDataSources.filter(dataSource => {\r\n      return aliases.indexOf(dataSource.getProperty('alias')) !== -1;\r\n    });\r\n    /**\r\n     * @type {DataStorageUpdater}\r\n     */\r\n    await window.dataStorageUpdater.updateCurrent(dataSourcesToUpdate, false);\r\n    return { success: true };\r\n  }\r\n  /**\r\n   * Триггер события на другом компоненте\r\n   * @return {Promise<{}>}\r\n   */\r\n  async doActionTrigger() {\r\n    let elementId = this.getProperty('element_id');\r\n    let element = getComponentByElementId(elementId);\r\n    let action = this.getProperty('action');\r\n    if (_.isFunction(element[action])) {\r\n      element[action]();\r\n      return {\r\n        success: true\r\n      };\r\n    }\r\n    try {\r\n      element.elementRef.current.fireAction(action);\r\n      return {\r\n        success: true\r\n      };\r\n    } catch (error) {\r\n      console.error(error);\r\n      return {\r\n        success: false\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Отправка почты\r\n   */\r\n  async doActionEmail() {\r\n    let templateGUID = this.getProperty('email_template');\r\n    if (!templateGUID) {\r\n      return { success: true };\r\n    }\r\n    let res = { success: false };\r\n    try {\r\n      res = await sendEmail(\r\n        templateGUID,\r\n        this.getReplacedProperty('subject'),\r\n        this.getReplacedProperty('from'),\r\n        this.getReplacedProperty('to'),\r\n        this.getReplacedProperty('attachments')\r\n      );\r\n    } catch (e) {\r\n      console.error(e);\r\n      return {\r\n        success: false\r\n      };\r\n    }\r\n    return res;\r\n  }\r\n\r\n  /**\r\n   * Добавляем временную задержку в милисекундах\r\n   */\r\n  async doActionDelay() {\r\n    await delay(this.getProperty('milliseconds') || 0);\r\n    return { success: true };\r\n  }\r\n\r\n  /**\r\n   * Воспроизводим звук\r\n   * @return {Promise<{success: boolean}>}\r\n   */\r\n  async doActionPlaySound() {\r\n    const duration = this.getProperty('milliseconds') || 0;\r\n    const url = this.getProperty('media_url');\r\n    const loop = this.getProperty('loop');\r\n    if (url) {\r\n      const { playSound } = await import(/* webpackChunkName: 'helpers-sounds' */'../helpers/sounds');\r\n      playSound(url, loop, duration);\r\n      await delay(20);\r\n    }\r\n    return { success: true };\r\n  }\r\n  /**\r\n   * Проверка условий\r\n   * @return {Promise<{success: boolean}>}\r\n   */\r\n  async doActionCondition() {\r\n    const compare = this.getProperty('compare');\r\n    let conditionLeft = this.getProperty('condition_left');\r\n    let conditionRight = this.getProperty('condition_right');\r\n    conditionLeft = getDataByPath(conditionLeft);\r\n    conditionRight = replaceContentWithData(conditionRight);\r\n    const res = altrpCompare(conditionLeft, conditionRight, compare);\r\n    return { success: res };\r\n  }\r\n\r\n  /**\r\n   * Версия сайта для слабовидящих\r\n   * @return {Promise<void>}\r\n   */\r\n  async doActionVIToggle() {\r\n    try {\r\n      const {loadVIPlugin} = (await import(/* webpackChunkName 'loadVIPlugin' */'../helpers/plugins'))\r\n      await loadVIPlugin();\r\n    } catch (error) {\r\n      return {\r\n        success: false\r\n      };\r\n    }\r\n    // console.log($);\r\n    let HTMLWrapper = getWrapperHTMLElementByElement(this.getElement());\r\n    // if(HTMLWrapper){\r\n    //   HTMLWrapper.classList.add('bvi-hide');\r\n    // }\r\n\r\n    // $.bvi({\r\n    //   bvi_target: '.altrp-btn',\r\n    //\r\n    // });\r\n\r\n    return {\r\n      success: true\r\n    };\r\n  }\r\n}\r\n\r\nexport default AltrpAction;\r\n","/**\r\n * @class ActionsManager\r\n * Класс хранит действия для виджетов и вызывает их последовательно в порядке полученного списка\r\n * @member {} data - где хранятся действия виджета сгруппированные по типу события {\r\n *  widgetId:{\r\n *    eventName: []\r\n *  }\r\n * }\r\n */\r\nimport AltrpAction from \"../AltrpAction\";\r\nimport AltrpModel from \"../../../../../editor/src/js/classes/AltrpModel\";\r\nconst {isEditor, } = window.altrpHelpers;\r\n\r\nclass ActionsManager extends AltrpModel{\r\n  /**\r\n   * Регистрирует действия для определенного виджета\r\n   * @param {string} widgetId\r\n   * @param {array} actions\r\n   * @param {string} eventName\r\n   * @param {FrontElement | null} element\r\n   * @param {*} context\r\n   */\r\n  registerWidgetActions(widgetId, actions = [], eventName = 'click', element = null, context = null ){\r\n    if((! actions) || ! actions.length){\r\n      return null;\r\n    }\r\n    actions = actions.filter(a=>a.type).map(a=>{\r\n      return new AltrpAction(a, widgetId, element);\r\n    });\r\n    return this.setProperty(`actions.${widgetId}.${eventName}`, actions);\r\n  }\r\n\r\n  /**\r\n   * удаляет все действия виджета\r\n   * @param {string} widgetId\r\n   */\r\n  unregisterWidgetActions(widgetId){\r\n    return this.unsetProperty(`actions.${widgetId}`)\r\n  }\r\n\r\n  /**\r\n   * Вызывает все зарегистрированные действия определенного типа для виджета\r\n   * @param {string} widgetId\r\n   * @param {string} eventName\r\n   * @param {[]} preventedActions\r\n   * @param {FrontElement} element\r\n   * @return {Promise<void>}\r\n   */\r\n  async callAllWidgetActions(widgetId, eventName = 'click', preventedActions, element){\r\n    if(isEditor()){\r\n      return\r\n    }\r\n    preventedActions = preventedActions || [];\r\n    let actions = this.getProperty(`actions.${widgetId}.${eventName}`, []);\r\n    const errors = [];\r\n    if(! actions.length && preventedActions.length && element){\r\n      this.registerWidgetActions(widgetId, preventedActions, eventName, element);\r\n      actions = this.getProperty(`actions.${widgetId}.${eventName}`, []);\r\n    }\r\n    for (let action of actions){\r\n      try {\r\n        let result = await action.doAction();\r\n        if(! result.success){\r\n          if(result.error){\r\n            console.error(result.error);\r\n            errors.push(result.error);\r\n          }\r\n          break;\r\n        }\r\n      } catch(error){\r\n        errors.push(error);\r\n        console.error(error);\r\n      }\r\n    }\r\n    if (errors.length){\r\n      return {\r\n        success: false,\r\n        errors\r\n      }\r\n    }\r\n    return {success: true};\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n * @type {ActionsManager}\r\n */\r\nwindow.actionsManager = new ActionsManager;\r\nexport default window.actionsManager\r\n","import {changeCurrentEmailTemplate} from \"../store/current-email-template/actions\";\r\nimport {delay} from '../helpers';\r\nimport Resource from \"../../../../editor/src/js/classes/Resource\";\r\n/**\r\n * Отправляет шаблон письма на бэкенд\r\n * @param {string | null}emailTemplateGUID\r\n * @param {string} subject\r\n * @param {string} from\r\n * @param {string} to\r\n * @param {string} attachments\r\n * @return {Promise<void>}\r\n */\r\nexport async function sendEmail(emailTemplateGUID = null, subject = 'Message', from = '', to = '', attachments = ''){\r\n  if(! emailTemplateGUID){\r\n    return {success: true};\r\n  }\r\n  let templateLoader = (await import(/* webpackChunkName: 'TemplateLoader' */'../../../../editor/src/js/classes/modules/TemplateLoader')).default;\r\n  let template = await templateLoader.loadTemplate(emailTemplateGUID);\r\n  appStore.dispatch(changeCurrentEmailTemplate(template));\r\n  let html = '';\r\n  do{\r\n    await delay(1500);\r\n    if(_.get(window, 'emailTemplatesRenderer.emailTemplate.current')){\r\n      /**\r\n       * @var  {HTMLElement} html\r\n       */\r\n      html = window.emailTemplatesRenderer.emailTemplate.current.cloneNode(true);\r\n      html.style.display = 'table';\r\n      html = html.outerHTML;\r\n    }\r\n  }while(! html);\r\n  // appStore.dispatch(changeCurrentEmailTemplate(null));\r\n  const resource = new Resource({route: '/ajax/feedback-html'});\r\n  let res = await resource.post(\r\n    {\r\n      subject,\r\n      to,\r\n      from,\r\n      html,\r\n      attachments,\r\n    }\r\n  );\r\n  return {success: true}\r\n}\r\n","export const CHANGE_CURRENT_EMAIL_TEMPLATE = \"CHANGE_CURRENT_EMAIL_TEMPLATE\";\r\n\r\n\r\nexport function changeCurrentEmailTemplate(template) {\r\n  return {\r\n    type: CHANGE_CURRENT_EMAIL_TEMPLATE,\r\n    template\r\n  };\r\n}\r\n","export const TRIGGER_POPUP = \"TRIGGER_POPUP\";\r\n\r\nexport const togglePopup = payload => ({\r\n  type: TRIGGER_POPUP,\r\n  payload\r\n});"],"sourceRoot":""}