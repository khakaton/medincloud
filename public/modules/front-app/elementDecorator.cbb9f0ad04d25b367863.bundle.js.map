{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/classes/AltrpModel.js","webpack:///./resources/modules/editor/src/js/classes/AltrpModelUpdater.js","webpack:///./resources/modules/editor/src/js/classes/modules/ModelsManager.js","webpack:///./resources/modules/front-app/src/js/decorators/front-element-component.js"],"names":["AltrpModel","data","this","cloneDeep","clone","isEmpty","name","defaultValue","get","has","value","getData","set","unset","window","modelName","modelId","console","error","subscribers","resource","Resource","route","updating","callback","push","callSubscribers","updateData","forEach","subscriber","_","isFunction","updateModelData","filter","_s","extend","modelsStorage","altrpModel","AltrpModelUpdater","model","subscribeToUpdates","unsubscribe","updateWithData","altrpHelpers","conditionsChecker","getConverter","getDataByPath","isEditor","prepareContext","replaceContentWithData","componentWillUnmount","actionsManager","unregisterWidgetActions","props","element","getIdForAction","dynamicContentSettings","modelsSetting","modelInfo","getModelsInfoByModelName","relation","modelManager","getModelId","appStore","dispatch","addSettings","getId","getName","_componentWillUnmount","modelData","setState","state","subscribeToModels","id","getContent","settingName","returnRaw","content","getSettings","dynamic","currentModel","getProperty","hasCardModel","getCardModel","fieldName","isString","indexOf","context","getCurrentModel","replacedContent","replace","eval","isNumber","isNaN","e","message","trim","contentDynamicSetting","getDynamicSetting","converter","convertData","componentDidMount","_componentDidMount","componentDidUpdate","prevProps","prevState","children","_componentDidUpdate","isEqual","match","rootElement","currentDataStorage","prevDataStorage","prevModel","params","isActive","conditional_active_choose","currentUser","getState","authCondition","isGuest","roles","permissions","hasRoles","hasPermissions","conditions","map","c","modelField","conditional_model_field","operator","conditional_other_operator","conditional_other_condition_value","active_conditional_other_display","active","isDisabled","conditional_disabled_choose","frontDecorate","component","bind"],"mappings":"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","file":"elementDecorator.cbb9f0ad04d25b367863.bundle.js","sourcesContent":["/**\r\n * Имеет интерфейс для доступы к свойствам data (любой вложенности)\r\n * @class AltrpModel\r\n */\r\nimport cloneDeep from 'lodash.clonedeep';\r\nimport get from 'lodash.get';\r\nimport set from 'lodash.set';\r\nimport has from 'lodash.has';\r\nimport unset from 'lodash.unset';\r\nimport isEmpty from 'lodash.isempty';\r\n// import {cloneDeep, get, set, has, unset, isString, isEmpty} from \"lodash\";\r\n\r\nclass AltrpModel {\r\n  constructor(data = {}) {\r\n    this.data = cloneDeep(data);\r\n  }\r\n\r\n  /**\r\n   * Возваращает объект данных\r\n   * @params {boolean} clone - клонировать или ссылку на данные\r\n   * @return {{}}\r\n   */\r\n  getData(clone = true) {\r\n    if(clone){\r\n      return cloneDeep(this.data);\r\n    }\r\n    return this.data;\r\n  }\r\n\r\n  /**\r\n   * Пустой ли объект\r\n   */\r\n  isEmpty(){\r\n    return isEmpty(this.data);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  getProperty(name, defaultValue = '') {\r\n    return get(this.data, name, defaultValue);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  hasProperty(name, defaultValue = '') {\r\n    return has(this.data, name);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {{}}\r\n   */\r\n  setProperty(name, value = '') {\r\n    if(value instanceof AltrpModel){\r\n      value = value.getData(false);\r\n    }\r\n    return set(this.data, name, value);\r\n  }\r\n  /**\r\n   * Удаляет свойства name\r\n   * @params {string} name\r\n   * @return {*}\r\n   */\r\n  unsetProperty(name) {\r\n    return unset(this.data, name);\r\n  }\r\n}\r\nwindow.AltrpModel = AltrpModel;\r\nexport default AltrpModel\r\n","/**\r\n * @class AltrpModelUpdater\r\n */\r\nimport Resource from \"./Resource\";\r\n\r\nclass AltrpModelUpdater {\r\n  /**\r\n   *\r\n   * @param {string} modelName\r\n   * @param {int} modelId\r\n   */\r\n  constructor(modelName, modelId){\r\n    this.modelName = modelName;\r\n    if(! modelId){\r\n      console.error('ид модели не указан!');\r\n    }\r\n    this.modelId = modelId;\r\n    this.data = null;\r\n    this.subscribers = [];\r\n    this.resource = new Resource({route: `/ajax/models/${this.modelName}`});\r\n    this.updating = false;\r\n  }\r\n\r\n  /**\r\n   * Подписывает функцию на обновления\r\n   * @param {function} callback\r\n   */\r\n  subscribeToUpdates(callback){\r\n    this.subscribers.push(callback);\r\n    if(this.updating){\r\n      return;\r\n    }\r\n    if(this.data) {\r\n      this.callSubscribers();\r\n    }\r\n    this.updateData();\r\n    // } else {\r\n    // }\r\n  }\r\n\r\n  /**\r\n   * Обновляет модель с сервера\r\n   */\r\n  async updateData(){\r\n    this.updating = true;\r\n    this.data = await this.resource.get(this.modelId);\r\n    this.updating = false;\r\n    this.callSubscribers();\r\n  }\r\n\r\n  /**\r\n   * Передать данные всем подписчикам\r\n   */\r\n  callSubscribers(){\r\n    this.subscribers.forEach(subscriber=>{\r\n      if(_.isFunction(subscriber.updateModelData)){\r\n        subscriber.updateModelData(this.getData());\r\n      }\r\n      if(_.isFunction(subscriber)){\r\n        subscriber(this.getData());\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * Отписаться (отписываемся перед удалением компонента)\r\n   * @param callback\r\n   */\r\n  unsubscribe(subscriber){\r\n    this.subscribers = this.subscribers.filter(_s=>(_s !== subscriber))\r\n  }\r\n  //\r\n  // unsubscribe(callback){\r\n  //   this.subscribers = _.remove(this.subscribers, (idx, item)=>{\r\n  //     console.log(item);\r\n  //     return callback === item;\r\n  //   })\r\n  // }\r\n\r\n  /**\r\n   * Получить данные модели\r\n   * @return {object | null}\r\n   */\r\n  getData(){\r\n    return this.data;\r\n  }\r\n  /**\r\n   * Обновить модель данными\r\n   * @param {{}} data\r\n   * @return void\r\n   */\r\n  updateWithData(data){\r\n    this.data = _.extend( this.data,{...data});\r\n    this.callSubscribers();\r\n  }\r\n}\r\n\r\n\r\nexport default AltrpModelUpdater","import AltrpModelUpdater from \"../AltrpModelUpdater\";\r\n\r\nclass ModelsManager {\r\n  constructor(){\r\n    this.modelsStorage = {};\r\n\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  updateModel(modelName, modelId){\r\n    if(! this.modelsStorage[`${modelName}::${modelId}`]) {\r\n      this.modelsStorage[`${modelName}::${modelId}`].updateData();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {AltrpModelUpdater} altrpModel\r\n   */\r\n  addModel(altrpModel){\r\n\r\n  }\r\n\r\n  /**\r\n   * @param {string} modelName\r\n   * @param {int} modelId\r\n   * @return {AltrpModelUpdater}\r\n   */\r\n  getModel(modelName, modelId){\r\n\r\n  }\r\n\r\n  /**\r\n   * Подписывается на изменения модели\r\n   * @param {string} modelName\r\n   * @param {int} modelId\r\n   * @param {function} callback\r\n   * @return {AltrpModelUpdater | null}\r\n   */\r\n  subscribeToModelUpdates(modelName, modelId, callback){\r\n    if(! modelId){\r\n      return null;\r\n    }\r\n    /**\r\n     * model\r\n     * @type {AltrpModelUpdater}\r\n     */\r\n    let model;\r\n    if(! this.modelsStorage[`${modelName}::${modelId}`]){\r\n      this.modelsStorage[`${modelName}::${modelId}`] = new AltrpModelUpdater(modelName, modelId);\r\n    }\r\n    model = this.modelsStorage[`${modelName}::${modelId}`];\r\n    model.subscribeToUpdates(callback);\r\n    return model;\r\n  }\r\n  /**\r\n   * удаляем подписчика\r\n   * @param {string} modelName\r\n   * @param {int} modelId\r\n   * @param {function} callback\r\n   * @return {AltrpModelUpdater | null}\r\n   */\r\n  unsubscribe(modelName, modelId, callback){\r\n    if(! modelId){\r\n      return null;\r\n    }\r\n    /**\r\n     * model\r\n     * @type {AltrpModelUpdater}\r\n     */\r\n    let model;\r\n    if(! this.modelsStorage[`${modelName}::${modelId}`]){\r\n      return\r\n    }\r\n    model = this.modelsStorage[`${modelName}::${modelId}`];\r\n    model.unsubscribe(callback);\r\n    return model;\r\n  }\r\n\r\n  /**\r\n   * Обновить названию и ИД модель данными\r\n   * @param {string} modelName\r\n   * @param {int} modelId\r\n   * @param {{}} data\r\n   * @return void\r\n   */\r\n  updateModelWithData(modelName, modelId, data){\r\n    if(! this.modelsStorage[`${modelName}::${modelId}`]) {\r\n      return;\r\n    }\r\n    this.modelsStorage[`${modelName}::${modelId}`].updateWithData(data);\r\n  }\r\n}\r\nconst modelManager =  new ModelsManager();\r\nexport default modelManager;","import modelManager from \"../../../../editor/src/js/classes/modules/ModelsManager\";\r\nconst {\r\n  conditionsChecker,\r\n  getConverter,\r\n  getDataByPath,\r\n  isEditor,\r\n  prepareContext,\r\n  replaceContentWithData\r\n} = window.altrpHelpers;\r\nimport AltrpModel from \"../../../../editor/src/js/classes/AltrpModel\";\r\nimport {addSettings} from \"../store/elements-settings/actions\";\r\n\r\n/**\r\n * Срабатываает перед удалением компонента элемента\r\n */\r\nfunction componentWillUnmount(){\r\n  // if(this.model){\r\n  //   this.model.uns\r\n  // }\r\n  window.actionsManager && actionsManager.unregisterWidgetActions(this.props.element.getIdForAction());\r\n  if(! this.props.element.dynamicContentSettings){\r\n    return\r\n  }\r\n  this.props.element.dynamicContentSettings.forEach(modelsSetting=>{\r\n    let modelInfo = this.props.element.getModelsInfoByModelName(modelsSetting.modelName);\r\n    if(modelInfo && ! modelInfo.relation) {\r\n      modelManager.unsubscribe(modelInfo.modelName, modelInfo.modelId ||this.getModelId(), this);\r\n    } else if( modelInfo && modelInfo.relation ){\r\n      // console.log(modelInfo);\r\n      // console.log(modelsSetting);\r\n      // console.log(this.state.modelData);\r\n    }\r\n  });\r\n  appStore.dispatch(addSettings(this.props.element.getId(), this.props.element.getName(), {}))\r\n  if(_.isFunction(this._componentWillUnmount)){\r\n    this._componentWillUnmount();\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * обновить данные модели\r\n */\r\nfunction updateModelData (modelData) {\r\n  this.setState(state => {\r\n    /**\r\n     * state.modelsData\r\n     * @type {{}}\r\n     */\r\n    return {...state,\r\n      // modelsData,\r\n     modelData}\r\n  });\r\n\r\n}\r\n/**\r\n * Подписываемся на изменеия моделей\r\n * если есть id то укзываем его при подписке на модели при отсутствии в modelInfo id модели\r\n * @param {int} id\r\n */\r\nfunction subscribeToModels(id){\r\n  /**\r\n   * ЕСли в элементе нет настроек для динамического контента, то на изменения моделей не подписываемся\r\n   */\r\n  if(! this.props.element.dynamicContentSettings){\r\n    return\r\n  }\r\n\r\n  this.props.element.dynamicContentSettings.forEach(modelsSetting=>{\r\n    let modelInfo = this.props.element.getModelsInfoByModelName(modelsSetting.modelName);\r\n    if(modelInfo && ! modelInfo.relation) {\r\n      this.model = modelManager.subscribeToModelUpdates(modelInfo.modelName, modelInfo.modelId || id, this);\r\n    } else if( modelInfo && modelInfo.relation ){\r\n      // console.log(modelInfo);\r\n      // console.log(modelsSetting);\r\n      // console.log(this.state.modelData);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Получает данные для контента элемента\r\n * Проверяет явлется ли свойство настроек динамическим контентом, если да берет это свойство из this.state.modelsData\r\n * (делегирут на FrontElement.getContent())\r\n * когда хочешь получить данные из state.settings\r\n * используй вот этот метод, он проверяет являются ли данные динамическими или статичными,\r\n * только учти, что пока данные не обновились с сервера, он вернет пустую строку,\r\n * так что лучше его использовать, если в данной настройке хранится строка\r\n * @param {string} settingName\r\n * @param {boolean} returnRaw - возврщать ли объект в том виде, в котором он хранится (если false, возвращаем строку)\r\n * @return {*}\r\n */\r\nfunction getContent(settingName, returnRaw = false) {\r\n  /**\r\n   * @member {FrontElement} element\r\n   */\r\n  const element = this.props.element;\r\n // return this.props.element.getContent(settingName);\r\n\r\n  let content = this.props.element.getSettings(settingName);\r\n  if(content && content.dynamic && this.props.currentModel.getProperty('altrpModelUpdated')){\r\n    // console.log(element.getRoot());\r\n    let model = element.hasCardModel() ? element.getCardModel() : this.props.currentModel;\r\n    // console.log(model);\r\n    content = model ? model.getProperty(content.fieldName) : ' ';\r\n  }\r\n  if((! isEditor())){//todo: сделать подгрузку данных и в редакторе\r\n    let model = element.hasCardModel() ? element.getCardModel() : this.props.currentModel;\r\n\r\n     if(settingName === 'content_default_value' && _.isString(content) && content.indexOf('{{{') !== -1){\r\n      let context = this.props.element.getCurrentModel().getData();\r\n      context = prepareContext(context);\r\n      let replacedContent = content\r\n          .replace(/}}}/g, \"')\")\r\n          .replace(/{{{/g, \"_.get(context, '\");\r\n      try{\r\n        content = eval(replacedContent);\r\n        if(_.isNumber(content) && ! _.isNaN(content)){\r\n          content += '';\r\n        }\r\n        _.isString(content) && (content = content.replace(/NaN/g, ''));\r\n        return content || '';\r\n      } catch(e){\r\n        console.error('Evaluate error in getContent for input default value' + e.message);\r\n        return '';\r\n      } finally {\r\n      }\r\n    } else if(returnRaw){\r\n       content = content.trim().replace('{{', '').replace('}}', '');\r\n       content = getDataByPath(content, '', model);\r\n     } else {\r\n       content = replaceContentWithData(content, model);\r\n     }\r\n\r\n    const contentDynamicSetting = this.props.element.getDynamicSetting(settingName);\r\n\r\n    if(contentDynamicSetting){\r\n      const converter = getConverter(contentDynamicSetting);\r\n      content = converter.convertData(content);\r\n    }\r\n  }\r\n  if(content && content.dynamic){\r\n    content = '';\r\n  }\r\n  return content === 'null' ? '' : content;\r\n}\r\n/**\r\n * Компоненте загрузился в DOM\r\n */\r\nfunction componentDidMount() {\r\n  /**\r\n   * Если есть определен метод _componentDidMount вызываем его\r\n   */\r\n  if(typeof this._componentDidMount === 'function'){\r\n    this._componentDidMount();\r\n  }\r\n  // this.subscribeToModels(this.getModelId());\r\n}\r\n/**\r\n * Компоненте обновился\r\n * @params {\r\n *  {\r\n *    match: {}\r\n *  }\r\n * } prevProps\r\n * @params {{}} prevState\r\n */\r\nfunction componentDidUpdate(prevProps, prevState) {\r\n  if(this.props.element !== prevProps.element){\r\n    // console.log('updated');\r\n    this.setState(state => ({...state, children: this.props.element.children}));\r\n  }\r\n  if(_.isFunction(this._componentDidUpdate)){\r\n    this._componentDidUpdate(prevProps, prevState);\r\n  }\r\n  /**\r\n   * Если сменился url но сама страница та же надо обновить компоненты элементов\r\n   * или обновился корневой элемент (для встраиваемых шаблонов)\r\n   */\r\n  if(! _.isEqual(this.props.match, prevProps.match)\r\n      || prevProps.rootElement !== this.props.rootElement){\r\n    if(_.isFunction(this._componentDidMount)){\r\n      this._componentDidMount(prevProps, prevState);\r\n    }\r\n  }\r\n  /**\r\n   * После загрузки хранилища данных текущей страницы надо обновить некоторые виджеты\r\n   */\r\n  let currentDataStorage = _.get(this.props,'currentDataStorage', new AltrpModel({}));\r\n  let prevDataStorage = _.get(prevProps,'currentDataStorage', new AltrpModel({}));\r\n  if(currentDataStorage.getProperty('currentDataStorageLoaded')\r\n      && (currentDataStorage.getProperty('currentDataStorageLoaded') !== prevDataStorage.getProperty('currentDataStorageLoaded'))){\r\n    if(_.isFunction(this._componentDidMount)){\r\n      this._componentDidMount(prevProps, prevState);\r\n    }\r\n  }\r\n  /**\r\n   * После загрузки модели надо обновить некоторые виджеты\r\n   */\r\n  let currentModel = _.get(this.props,'currentModel', new AltrpModel({}));\r\n  let prevModel = _.get(prevProps,'currentModel', new AltrpModel({}));\r\n  if(currentModel.getProperty('altrpModelUpdated')\r\n      && (currentModel.getProperty('altrpModelUpdated') !== prevModel.getProperty('altrpModelUpdated'))){\r\n    if(_.isFunction(this._componentDidMount)){\r\n      this._componentDidMount(prevProps, prevState);\r\n    }\r\n  }\r\n  // this.subscribeToModels(this.getModelId());\r\n}\r\n\r\n/**\r\n * Возвращает id модели беря его из url если в роутере предусмтренно ид для текущего роута\r\n * @return {int}\r\n */\r\nfunction getModelId() {\r\n  let id = null;\r\n  if(this.props.match && this.props.match.params && this.props.match.params.id){\r\n    id = this.props.match.params.id;\r\n  }\r\n  return id;\r\n}\r\n\r\n/**\r\n * true если выполняются условия\r\n * @return {boolean}\r\n */\r\nfunction isActive(){\r\n  if(isEditor()){\r\n    return false;\r\n  }\r\n  const { element } = this.props;\r\n  const active_enable = element.getSettings('active_enable');\r\n  if(! active_enable){\r\n    return false\r\n  }\r\n  const conditional_active_choose = element.getSettings('conditional_active_choose');\r\n  /**\r\n   * @var {AltrpUser} currentUser\r\n   */\r\n  const currentUser = appStore.getState().currentUser;\r\n  let authCondition = true;\r\n  switch (conditional_active_choose){\r\n    case 'guest':{\r\n      if(! currentUser.isGuest()){\r\n        authCondition = false;\r\n      }\r\n    }\r\n    break;\r\n    case 'auth':{\r\n      const roles = element.getSettings('conditional_active_roles') || [];\r\n      const permissions = element.getSettings('conditional_active_permissions') || [];\r\n      if(! currentUser.hasRoles(roles)){\r\n        authCondition = false;\r\n        break;\r\n      }\r\n      if(! currentUser.hasPermissions(permissions)){\r\n        authCondition = false;\r\n        break;\r\n      }\r\n    }\r\n    break;\r\n  }\r\n  if(! element.getSettings('active_conditional_other')){\r\n    return authCondition;\r\n  }\r\n  let conditions = element.getSettings(\"active_conditions\", []);\r\n  conditions = conditions.map(c => {\r\n    const {\r\n      conditional_model_field: modelField,\r\n      conditional_other_operator: operator,\r\n      conditional_other_condition_value: value\r\n    } = c;\r\n    return {\r\n      modelField,\r\n      operator,\r\n      value\r\n    };\r\n  });\r\n  const active_conditional_other_display = element.getSettings(\"active_conditional_other_display\");\r\n  let active = conditionsChecker(\r\n    conditions,\r\n    active_conditional_other_display === \"AND\",\r\n    this.props.element.getCurrentModel(),\r\n    true\r\n  );\r\n  if(active_conditional_other_display === \"AND\"){\r\n    return active && authCondition;\r\n  }\r\n  return active || authCondition;\r\n}\r\n/**\r\n * true если выполняются условия\r\n * @return {boolean}\r\n */\r\nfunction isDisabled(){\r\n  if(isEditor()){\r\n    return false;\r\n  }\r\n  const { element } = this.props;\r\n  const disabled_enable = element.getSettings('disabled_enable');\r\n  if(! disabled_enable){\r\n    return false\r\n  }\r\n  const conditional_disabled_choose = element.getSettings('conditional_disabled_choose');\r\n  /**\r\n   * @var {AltrpUser} currentUser\r\n   */\r\n  const currentUser = appStore.getState().currentUser;\r\n  let authCondition = true;\r\n  switch (conditional_disabled_choose){\r\n    case 'guest':{\r\n      if(! currentUser.isGuest()){\r\n        authCondition = false;\r\n      }\r\n    }\r\n    break;\r\n    case 'auth':{\r\n      const roles = element.getSettings('conditional_disabled_roles') || [];\r\n      const permissions = element.getSettings('conditional_disabled_permissions') || [];\r\n      if(! currentUser.hasRoles(roles)){\r\n        authCondition = false;\r\n        break;\r\n      }\r\n      if(! currentUser.hasPermissions(permissions)){\r\n        authCondition = false;\r\n        break;\r\n      }\r\n    }\r\n    break;\r\n  }\r\n  if(! element.getSettings('disabled_conditional_other')){\r\n    return authCondition;\r\n  }\r\n  let conditions = element.getSettings(\"disabled_conditions\", []);\r\n  conditions = conditions.map(c => {\r\n    const {\r\n      conditional_model_field: modelField,\r\n      conditional_other_operator: operator,\r\n      conditional_other_condition_value: value\r\n    } = c;\r\n    return {\r\n      modelField,\r\n      operator,\r\n      value\r\n    };\r\n  });\r\n  const active_conditional_other_display = element.getSettings(\"disabled_conditional_other_display\");\r\n  let active = conditionsChecker(\r\n    conditions,\r\n    active_conditional_other_display === \"AND\",\r\n    this.props.element.getCurrentModel(),\r\n    true\r\n  );\r\n  if(active_conditional_other_display === \"AND\"){\r\n    return active && authCondition;\r\n  }\r\n  return active || authCondition;\r\n}\r\n/**\r\n * Декорирует компонент элемента методами необходимыми на фронте и в редакторе\r\n * @param component\r\n */\r\nexport default function frontDecorate(component) {\r\n  component.componentWillUnmount = componentWillUnmount.bind(component);\r\n  component.subscribeToModels = subscribeToModels.bind(component);\r\n  component.componentDidMount = componentDidMount.bind(component);\r\n  component.componentDidUpdate = componentDidUpdate.bind(component);\r\n  component.getContent = getContent.bind(component);\r\n  component.getModelId = getModelId.bind(component);\r\n  component.updateModelData = updateModelData.bind(component);\r\n  component.isActive = isActive.bind(component);\r\n  component.isDisabled = isDisabled.bind(component);\r\n}\r\n"],"sourceRoot":""}