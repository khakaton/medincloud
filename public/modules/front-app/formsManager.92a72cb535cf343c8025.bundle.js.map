{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/classes/AltrpForm.js","webpack:///./resources/modules/editor/src/js/classes/modules/FormsManager.js"],"names":["formId","modelName","method","options","this","fields","submitButtons","route","dynamicURL","customRoute","resource","Resource","buttonElement","push","field","exists","map","_f","getId","component","modelID","submitText","data","customHeaders","success","confirm","forEach","fieldValidate","post","_","assign","getData","res","afterLoginRedirect","document","location","replace","afterLogoutRedirect","reload","clearInputs","updateResponseStorage","console","log","put","then","modelsManager","default","updateModelWithData","error","getQueried","delete","status","Promise","mbParseJSON","__status","alert","isFunction","get","altrp_ajax","userMessage","subject","b","getSettings","getValue","fieldLabel","fieldValue","user_message","getFieldId","appStore","dispatch","addResponseData","FormsManager","forms","formIds","fieldsStorage","form","getForm","isEmpty","AltrpForm","length","setFields","filter","addField","submit","_form","window","formsManager"],"mappings":"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","file":"formsManager.92a72cb535cf343c8025.bundle.js","sourcesContent":["import Resource from \"./Resource\";\r\nimport {\r\n  addResponseData,\r\n  clearAllResponseData\r\n} from \"../../../../front-app/src/js/store/responses-storage/actions\";\r\nimport { mbParseJSON } from \"../../../../front-app/src/js/helpers\";\r\n\r\n/**\r\n * Класс имитирующий поведение формы (собирает данные с виджетов полей и отправляет их на сервер)\r\n */\r\nclass AltrpForm {\r\n  /**\r\n   *\r\n   * @param {string} formId\r\n   * @param {string} modelName\r\n   * @param {string} method\r\n   * @param {{}} options\r\n   */\r\n  constructor(formId, modelName = \"\", method = \"POST\", options = {}) {\r\n    this.formId = formId;\r\n    this.fields = [];\r\n    this.submitButtons = [];\r\n    this.method = method;\r\n    this.options = options;\r\n    this.modelName = modelName;\r\n    let route = `/ajax/models/${modelName}`;\r\n    const { dynamicURL, customRoute } = this.options;\r\n\r\n    switch (modelName) {\r\n      case \"login\":\r\n        {\r\n          route = `/login`;\r\n        }\r\n        break;\r\n      case \"logout\":\r\n        {\r\n          route = `/logout`;\r\n        }\r\n        break;\r\n      case \"email\":\r\n        {\r\n          route = `/ajax/feedback`;\r\n        }\r\n        break;\r\n    }\r\n    if (customRoute) {\r\n      route = customRoute;\r\n    }\r\n    this.resource = new Resource({ route, dynamicURL });\r\n  }\r\n\r\n  /**\r\n   * Устанавливает список полей (в случае, если егистрация после добавления какой либо формы)\r\n   * @param {FrontElement[]}fields\r\n   */\r\n  setFields(fields) {\r\n    this.fields = fields;\r\n  }\r\n\r\n  /**\r\n   * Добавляет кнопку\r\n   */\r\n  addSubmitButton(buttonElement) {\r\n    this.submitButtons.push(buttonElement);\r\n  }\r\n  /**\r\n   * Добавляет поле\r\n   * @param {FrontElement} field\r\n   */\r\n  addField(field) {\r\n    let exists = false;\r\n    this.fields = this.fields.map(_f => {\r\n      if (_f.getId() === field.getId()) {\r\n        exists = true;\r\n        if (!field.component) {\r\n          return _f;\r\n        }\r\n        return field;\r\n      }\r\n      return _f;\r\n    });\r\n\r\n    if (!exists) {\r\n      this.fields.push(field);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Проверка полей перед отправкой\r\n   * @param {int | string | null} modelID\r\n   * @param {string} submitText\r\n   * @param {{} | null} data\r\n   * @param {{} | null} customHeaders\r\n   * @return {boolean}\r\n   */\r\n  async submit(\r\n    modelID = null,\r\n    submitText = \"\",\r\n    data = null,\r\n    customHeaders = null\r\n  ) {\r\n    let success = true;\r\n    if (submitText) {\r\n      let confirmed = await confirm(submitText);\r\n      if (!confirmed) {\r\n        return { success: false };\r\n      }\r\n    }\r\n    this.fields.forEach(field => {\r\n      if (! field.fieldValidate()) {\r\n        success = false;\r\n      }\r\n    });\r\n    if (success) {\r\n      try {\r\n        switch (this.method) {\r\n          case \"POST\": {\r\n            let res = await this.resource.post(_.assign(this.getData(), data,), customHeaders);\r\n            if (this.modelName === \"login\" && this.options.afterLoginRedirect) {\r\n              document.location.replace(this.options.afterLoginRedirect);\r\n              return res;\r\n            }\r\n            if (\r\n              this.modelName === \"logout\" &&\r\n              this.options.afterLogoutRedirect\r\n            ) {\r\n              document.location.replace(this.options.afterLogoutRedirect);\r\n              return res;\r\n            }\r\n            if (res.reload) {\r\n              document.location.reload();\r\n              return;\r\n            }\r\n            this.clearInputs();\r\n            this.updateResponseStorage(res);\r\n            return res;\r\n          }\r\n\r\n          case \"PUT\":\r\n            {\r\n              let res;\r\n              if (modelID || this.options.customRoute) {\r\n                console.log(_.assign(this.getData(), data));\r\n                res = await this.resource.put(\r\n                  modelID,\r\n                  _.assign(this.getData(), data),\r\n                  customHeaders\r\n                );\r\n                console.log(res);\r\n                import(/* webpackChunkName: 'ModelsManager' */\"./modules/ModelsManager\").then(modelsManager => {\r\n                  modelsManager.default.updateModelWithData(\r\n                    this.modelName,\r\n                    modelID,\r\n                    this.getData()\r\n                  );\r\n                });\r\n                // this.clearInputs();\r\n                this.updateResponseStorage(res);\r\n                return res;\r\n              }\r\n              console.error(\r\n                \"Не удалось получить ИД модели для обновления или customRoute!\"\r\n              );\r\n            }\r\n            break;\r\n          case \"GET\": {\r\n            // return await alert(JSON.stringify(this.getData()));\r\n            let res;\r\n            res = await this.resource.getQueried(\r\n              _.assign(this.getData(), data),\r\n                customHeaders\r\n            );\r\n            this.updateResponseStorage(res);\r\n            return res;\r\n          }\r\n          case \"DELETE\":\r\n            {\r\n              if (modelID || this.options.customRoute) {\r\n                // return await await alert('Удаление!');\r\n                return await this.resource.delete(\r\n                  modelID,\r\n                  _.assign(this.getData(), data),\r\n                  customHeaders\r\n                );\r\n              }\r\n              console.error(\r\n                \"Не удалось получить ИД модели для удаления или customRoute!\"\r\n              );\r\n            }\r\n            break;\r\n        }\r\n      } catch (error) {\r\n        let status = error.status;\r\n        if(error.res instanceof Promise){\r\n          error = error.res;\r\n        }\r\n        if (error instanceof Promise) {\r\n          error = await error.then();\r\n          error = mbParseJSON(error, error);\r\n          error.data && (error = error.data);\r\n          status && (error.data ? (error.data.__status = status) : (error.__status = status));\r\n          this.updateResponseStorage(error);\r\n        }\r\n        return { success: false, error };\r\n      }\r\n    } else {\r\n      await alert(\"Пожалуйста, заполните все обязательные поля\");\r\n      return { success: false };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Очистим поля формы\r\n   */\r\n  clearInputs() {\r\n    this.fields.forEach(field => {\r\n      try {\r\n        if (_.isFunction(_.get(field, \"component.setState\"))) {\r\n          // field.component.setState(state => ({ ...state, value: \"\" }));\r\n        }\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Собирает данные с полей для отправки\r\n   * @return {{}}\r\n   */\r\n  getData() {\r\n    let data = { altrp_ajax: true };\r\n\r\n    if (this.modelName === \"email\") {\r\n      let userMessage = \"\";\r\n      let subject = \"Altrp Email\";\r\n\r\n      this.submitButtons.forEach(b => {\r\n        if (b.getSettings(\"email_subject\")) {\r\n          subject = b.getSettings(\"email_subject\");\r\n        }\r\n      });\r\n      this.fields.forEach(field => {\r\n        if (field.getValue() !== null) {\r\n          let fieldLabel =\r\n            field.getSettings(\"content_label\") ||\r\n            field.getSettings(\"content_placeholder\") ||\r\n            \"\";\r\n          let fieldValue = field.getValue();\r\n          userMessage += `${fieldLabel}: ${fieldValue} <br/> `;\r\n        }\r\n      });\r\n      data.subject = subject;\r\n      data.user_message = userMessage;\r\n    } else {\r\n      this.fields.forEach(field => {\r\n        data[field.getFieldId()] = field.getValue();\r\n      });\r\n    }\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Обновить responses-storage данными\r\n   * @param {{}} res\r\n   */\r\n  updateResponseStorage(res = {}) {\r\n    appStore.dispatch(addResponseData(this.formId, res));\r\n  }\r\n}\r\n\r\nexport default AltrpForm;\r\n","import AltrpForm from \"../AltrpForm\";\r\n/**\r\n * Класс менеджер форм для фронтенда/редактора\r\n */\r\nclass FormsManager {\r\n  constructor(){\r\n    /**\r\n     *\r\n     * @type {AltrpForm[]}\r\n     */\r\n    this.forms = [];\r\n    /**\r\n     *\r\n     * @type {string[]}\r\n     */\r\n    this.formIds = [];\r\n    this.fieldsStorage = {};\r\n  }\r\n\r\n  /**\r\n   * Регистрирует новую форму.\r\n   * @param {string} formId\r\n   * @param {string} modelName\r\n   * @param {string} method\r\n   * @param {{}} options\r\n   * @return {AltrpForm}\r\n   */\r\n  registerForm(formId, modelName, method, options = {}){\r\n    let form = this.getForm(formId);\r\n    if(! form){\r\n      form = new AltrpForm(formId, modelName, method, options);\r\n      /**\r\n       * Если в хранилище есть список полей для указанной формы,\r\n       * то передаем их в форму, а на список ссылку удаляем\r\n       */\r\n\r\n      if(this.fieldsStorage[formId] && this.fieldsStorage[formId].length){\r\n        form.setFields(this.fieldsStorage[formId]);\r\n        delete this.fieldsStorage[formId]\r\n      }\r\n      this.forms.push(form);\r\n    } else if (! _.isEmpty(options)){\r\n      form.options = options\r\n    }\r\n    return form;\r\n  }\r\n\r\n  /**\r\n   * Удаляем форму по ID\r\n   */\r\n  deleteFormById(formId){\r\n    this.forms = this.forms.filter(form => form.formId !== formId);\r\n  }\r\n  /**\r\n   * Добавляет поле к форме\r\n   * сохраняет поле в fieldsStorage если форма еще не добавлена\r\n   * @param {string} formId\r\n   * @param {FrontElement} field\r\n   * @return {boolean}\r\n   */\r\n  addField(formId, field){\r\n    let form = this.getForm(formId);\r\n    if(! form){\r\n      this.fieldsStorage[formId] = this.fieldsStorage[formId] || [];\r\n      this.fieldsStorage[formId].push(field);\r\n      return true;\r\n    }\r\n    return form.addField(field)\r\n  }\r\n\r\n  /**\r\n   * После смену страницы нужно почистить хранилище полей\r\n   */\r\n  clearFieldsStorage(){\r\n    this.fieldsStorage = {};\r\n  }\r\n  /**\r\n   * Отправляет форму\r\n   * @param {string} formId\r\n   * @param {int | null} modelID\r\n   * @return {boolean}\r\n   */\r\n  submitForm(formId, modelID){\r\n    if(! this.getForm(formId)){\r\n      console.error('Форма не найдена');\r\n      return false;\r\n    }\r\n    return this.getForm(formId).submit(modelID);\r\n  }\r\n  /**\r\n   * Получить форму по id\r\n   * @param {string} formId\r\n   * @return {AltrpForm | null}\r\n   */\r\n  getForm(formId){\r\n    let _form = null;\r\n    this.forms.forEach(form=>{\r\n      /**\r\n       * @member {AltrpForm}form\r\n       */\r\n      if(form.formId === formId){\r\n        _form = form;\r\n      }\r\n    });\r\n    return _form;\r\n  }\r\n\r\n  /**\r\n   * Очищает все формы\r\n   */\r\n  clearFormsStore(){\r\n    this.forms = [];\r\n  }\r\n}\r\nwindow.formsManager = new FormsManager();\r\n\r\nexport default window.formsManager;\r\n"],"sourceRoot":""}