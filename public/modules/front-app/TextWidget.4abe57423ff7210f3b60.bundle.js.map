{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/classes/AltrpModel.js","webpack:///./resources/modules/editor/src/js/components/widgets/Tooltip.js","webpack:///./resources/modules/editor/src/js/components/widgets/styled-components/TextComponent.js","webpack:///./resources/modules/editor/src/js/components/widgets/TextWidget.js"],"names":["AltrpModel","data","this","cloneDeep","clone","isEmpty","name","defaultValue","get","has","value","getData","set","unset","window","Component","styled","div","props","columnCount","columnGap","padding","margin","typographic","color","borderStyle","borderWidth","borderColor","borderRadius","zIndex","backgroundColor","opacity","settings","styles","undefined","getResponsiveSetting","simplePropertyStyled","columnGapStyled","dimensionsControllerToStyles","colorPropertyStyled","opacityStyled","typographicControllerToStyles","borderWidthStyled","borderRadiusStyled","globalDefaults","push","state","element","getSettings","tooltipActiveValue","component","elementDecorator","baseRender","render","tooltipActive","bind","changeText","setState","setTimeout","text","setSettings","templateNeedUpdate","text_advanced_tooltip_active","text_advanced_tooltip_label","textContent","getContent","slice","CKEditor","className","readOnly","isEditor","textWidget","React","createElement","text_position_css_classes","id","text_position_css_id","onMouseOver","dangerouslySetInnerHTML","__html","onMouseLeave"],"mappings":"2OAYMA,E,WACJ,aAAuB,IAAXC,EAAW,uDAAJ,IAAI,eACrBC,KAAKD,KAAOE,IAAUF,G,sCAQxB,WAAsB,IAAdG,IAAc,yDACpB,OAAGA,EACMD,IAAUD,KAAKD,MAEjBC,KAAKD,O,qBAMd,WACE,OAAOI,IAAQH,KAAKD,Q,yBAQtB,SAAYK,GAAyB,IAAnBC,EAAmB,uDAAJ,GAC/B,OAAOC,IAAIN,KAAKD,KAAMK,EAAMC,K,yBAQ9B,SAAYD,GACV,OAAOG,IAAIP,KAAKD,KAAMK,K,yBAQxB,SAAYA,GAAkB,IAAZI,EAAY,uDAAJ,GAIxB,OAHGA,aAAiBV,IAClBU,EAAQA,EAAMC,SAAQ,IAEjBC,IAAIV,KAAKD,KAAMK,EAAMI,K,2BAO9B,SAAcJ,GACZ,OAAOO,IAAMX,KAAKD,KAAMK,O,KAG5BQ,OAAOd,WAAaA,EACpB,O,oJC1EsBe,U,uCCqTtB,EA1SsBC,OAAOC,IAAV,wNAGb,SAAAC,GACA,IAGIC,EAAaC,EAAWC,EAASC,EAAQC,EAAaC,EAAOC,EAAaC,EAAaC,EAAaC,EAAcC,EAAQC,EAAiBC,EAHvIC,EAAad,EAAbc,SACJC,EAAS,GA2Ib,YArIiBC,IAAbF,IACFb,GAAcgB,0BAAqBH,EAAU,4BAG3Cb,IACFc,IAAUG,0BAAqBjB,EAAa,sBAK7Be,IAAbF,IACFZ,GAAYe,0BAAqBH,EAAU,0BAGzCZ,IACFa,IAAUI,qBAAgBjB,SAKXc,IAAbF,IACFX,GAAUc,0BAAqBH,EAAU,gCAGvCX,IACFY,IAAUK,kCAA6BjB,SAKxBa,IAAbF,IACFV,GAASa,0BAAqBH,EAAU,+BAGtCV,IACFW,IAAUK,kCAA6BhB,EAAQ,gBAKhCY,IAAbF,IACFH,GAASM,0BAAqBH,EAAU,0BAGtCH,IACFI,IAAUG,0BAAqBP,EAAQ,iBAKxBK,IAAbF,IACFF,GAAkBK,0BAAqBH,EAAU,gCAG/CF,IACFG,IAAUM,yBAAoBT,EAAiB,0BAKhCI,IAAbF,IACFD,GAAUI,0BAAqBH,EAAU,kCAGvCD,IACFE,IAAUO,mBAAcT,EAAS,iBAKlBG,IAAbF,IACFT,GAAcY,0BAAqBH,EAAU,gCAG3CT,IACFU,IAAUQ,mCAA8BlB,SAMzBW,IAAbF,IACFR,GAAQW,0BAAqBH,EAAU,0BAGrCR,IACFS,IAAUM,yBAAoBf,EAAO,eAMtBU,IAAbF,IACFP,GAAcU,0BAAqBH,EAAU,2BAG3CP,IACFQ,IAAUG,0BAAqBX,EAAa,sBAM7BS,IAAbF,IACFN,GAAcS,0BAAqBH,EAAU,4BAG3CN,IACFO,IAAUS,uBAAkBhB,SAMbQ,IAAbF,IACFL,GAAcQ,0BAAqBH,EAAU,4BAG3CL,IACFM,IAAUM,yBAAoBZ,EAAa,sBAM5BO,IAAbF,IACFJ,GAAeO,0BAAqBH,EAAU,6BAG5CJ,IACFK,IAAUU,wBAAmBf,IAGxBK,KAQP,SAAAf,GACA,IAGIC,EAAaE,EAASC,EAAQC,EAAaC,EAAOC,EAAaC,EAAaC,EAAaC,EAAcC,EAAQC,EAAiBC,EAH5HC,EAAad,EAAbc,SACJC,EAAS,GAiIb,YA3HiBC,IAAbF,IACFb,GAAcgB,0BAAqBH,EAAU,0BAA2B,WAGtEb,IACFc,IAAUG,0BAAqBjB,EAAa,sBAK7Be,IAAbF,IACFX,GAAUc,0BAAqBH,EAAU,8BAA+B,WAGtEX,IACFY,IAAUK,kCAA6BjB,SAKxBa,IAAbF,IACFV,GAASa,0BAAqBH,EAAU,6BAA8B,WAGpEV,IACFW,IAAUK,kCAA6BhB,EAAQ,gBAKhCY,IAAbF,IACFH,GAASM,0BAAqBH,EAAU,wBAAyB,WAG/DH,IACFI,IAAUG,0BAAqBP,EAAQ,iBAKxBK,IAAbF,IACFF,GAAkBK,0BAAqBH,EAAU,8BAA+B,WAG9EF,IACFG,IAAUM,yBAAoBT,EAAiB,0BAKhCI,IAAbF,IACFD,GAAUI,0BAAqBH,EAAU,gCAAiC,WAGxED,IACFE,IAAUO,mBAAcT,EAAS,iBAKlBG,IAAbF,IACFT,GAAcY,0BAAqBH,EAAU,8BAA+B,WAG1ET,IACFU,IAAUQ,mCAA8BlB,SAMzBW,IAAbF,IACFR,GAAQW,0BAAqBH,EAAU,wBAAyB,WAG9DR,IACFS,IAAUM,yBAAoBf,EAAO,eAMtBU,IAAbF,IACFP,GAAcU,0BAAqBH,EAAU,yBAA0B,WAGrEP,IACFQ,IAAUG,0BAAqBX,EAAa,sBAM7BS,IAAbF,IACFN,GAAcS,0BAAqBH,EAAU,0BAA2B,WAGtEN,IACFO,IAAUS,uBAAkBhB,SAMbQ,IAAbF,IACFL,GAAcQ,0BAAqBH,EAAU,0BAA2B,WAGtEL,IACFM,IAAUM,yBAAoBZ,EAAa,sBAM5BO,IAAbF,IACFJ,GAAeO,0BAAqBH,EAAU,2BAA4B,WAGxEJ,IACFK,IAAUU,wBAAmBf,IAGxBK,MCnSZnB,OAAO8B,eAAiB9B,OAAO8B,gBAAkB,IAAIC,KAArD,kT,IA6GD,E,wcA1FE,WAAY3B,GAAO,6BACjB,cAAMA,IACD4B,MAAQ,CACXd,SAAUd,EAAM6B,QAAQC,cACxBC,oBAAoB,GAEtB/B,EAAM6B,QAAQG,WAAd,UACIpC,OAAOqC,kBACTrC,OAAOqC,kBAAP,WAEEjC,EAAMkC,aACR,EAAKC,OAASnC,EAAMkC,YAAN,YAEhB,EAAKE,cAAgB,EAAKA,cAAcC,MAAnB,WACrB,EAAKC,WAAa,EAAKA,WAAWD,MAAhB,WAdD,E,4CAiBnB,WAAgB,WACVrD,KAAK4C,MAAMG,mBACb/C,KAAKuD,SAAS,CACZR,oBAAqB/C,KAAK4C,MAAMG,qBAGlCS,YAAW,WACT,EAAKD,SAAS,CACZR,oBAAqB,EAAKH,MAAMG,uBAEjC,O,wBAIP,SAAWvC,GACT,IAAIsB,EAAW9B,KAAKgB,MAAM6B,QAAQf,SAClCA,EAAS2B,KAAOjD,EAChBR,KAAKgB,MAAM6B,QAAQa,YAAY5B,GAC/B9B,KAAKgB,MAAM6B,QAAQc,uB,oBAGrB,WAGc3D,KAAK4C,MAAMd,SAAS8B,6BACrB5D,KAAK4C,MAAMd,SAAS+B,4BACnB7D,KAAK4C,MAAMG,mBALhB,QAQHK,EAAgB,KAChBpD,KAAK4C,MAAMd,SAAS8B,+BACtBR,EAAgBpD,KAAKoD,eAEvB,IAAIU,EAAc9D,KAAK+D,WAAW,QAWlC,OATE,eACE,UACG/D,KAAK4C,MAAMd,SAAS2B,YADvB,OACG,EAA0BO,MAAM,EAAG,GAEtC,UAAOhE,KAAK4C,MAAMd,SAAS2B,YAA3B,OAAO,EAA0BO,MAAM,GAKvChE,KAAKgB,MAAMiD,SAEX,oBAAC,EAAD,CAAeC,UAAU,cACvB,yBAAMlD,MAAMiD,SAAZ,CACEX,WAAYtD,KAAKsD,WACjBG,KAAMK,EACNK,UAAUC,gBACVC,YAAY,KAMbC,MAAMC,cAAc,MAAO,CAChCL,UACE,4BACAlE,KAAK4C,MAAMd,SAAS0C,0BACtBC,GAAIzE,KAAK4C,MAAMd,SAAS4C,sBAAwB,GAChDC,YAAavB,EACbwB,wBAAyB,CACvBC,OAAQf,GAAe,IAIzBgB,aAAc1B,Q,GAtFKvC","file":"TextWidget.4abe57423ff7210f3b60.bundle.js","sourcesContent":["/**\r\n * Имеет интерфейс для доступы к свойствам data (любой вложенности)\r\n * @class AltrpModel\r\n */\r\nimport cloneDeep from 'lodash.clonedeep';\r\nimport get from 'lodash.get';\r\nimport set from 'lodash.set';\r\nimport has from 'lodash.has';\r\nimport unset from 'lodash.unset';\r\nimport isEmpty from 'lodash.isempty';\r\n// import {cloneDeep, get, set, has, unset, isString, isEmpty} from \"lodash\";\r\n\r\nclass AltrpModel {\r\n  constructor(data = {}) {\r\n    this.data = cloneDeep(data);\r\n  }\r\n\r\n  /**\r\n   * Возваращает объект данных\r\n   * @params {boolean} clone - клонировать или ссылку на данные\r\n   * @return {{}}\r\n   */\r\n  getData(clone = true) {\r\n    if(clone){\r\n      return cloneDeep(this.data);\r\n    }\r\n    return this.data;\r\n  }\r\n\r\n  /**\r\n   * Пустой ли объект\r\n   */\r\n  isEmpty(){\r\n    return isEmpty(this.data);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  getProperty(name, defaultValue = '') {\r\n    return get(this.data, name, defaultValue);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  hasProperty(name, defaultValue = '') {\r\n    return has(this.data, name);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {{}}\r\n   */\r\n  setProperty(name, value = '') {\r\n    if(value instanceof AltrpModel){\r\n      value = value.getData(false);\r\n    }\r\n    return set(this.data, name, value);\r\n  }\r\n  /**\r\n   * Удаляет свойства name\r\n   * @params {string} name\r\n   * @return {*}\r\n   */\r\n  unsetProperty(name) {\r\n    return unset(this.data, name);\r\n  }\r\n}\r\nwindow.AltrpModel = AltrpModel;\r\nexport default AltrpModel\r\n","\r\nclass Tooltip extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let styles = \"altrp-tooltip \";\r\n    if (this.props.active == false) {\r\n      styles += \"altrp-tooltip-none\"\r\n    }\r\n    let tooltip = null;\r\n    if (this.props.switch) {\r\n      tooltip = <span className={styles}>{this.props.label}</span>;\r\n    }\r\n    return tooltip;\r\n  }\r\n}\r\n\r\nexport default Tooltip\r\n","import { getResponsiveSetting } from \"../../../../../../front-app/src/js/helpers\";\r\nimport {\r\n  dimensionsControllerToStyles,\r\n  typographicControllerToStyles,\r\n  simplePropertyStyled,\r\n  colorPropertyStyled,\r\n  borderWidthStyled,\r\n  borderRadiusStyled,\r\n  columnGapStyled,\r\n  opacityStyled,\r\n} from \"../../../../../../front-app/src/js/helpers/styles\";\r\n\r\nconst TextComponent = styled.div`\r\n  && .altrp-text {\r\n\r\n    ${props => {\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let columnCount, columnGap, padding, margin, typographic, color, borderStyle, borderWidth, borderColor, borderRadius, zIndex, backgroundColor, opacity;\r\n\r\n      //Получаем значения column-count из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        columnCount = getResponsiveSetting(settings, 'text_style_column-count');\r\n      }\r\n\r\n      if (columnCount) {\r\n        styles += simplePropertyStyled(columnCount, 'column-count');\r\n      }\r\n\r\n      //Получаем значения column-gap из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        columnGap = getResponsiveSetting(settings, 'text_style_column-gap');\r\n      }\r\n\r\n      if (columnGap) {\r\n        styles += columnGapStyled(columnGap);\r\n      }\r\n\r\n      //Получаем значения padding из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        padding = getResponsiveSetting(settings, 'text_style_position_padding');\r\n      }\r\n\r\n      if (padding) {\r\n        styles += dimensionsControllerToStyles(padding);\r\n      }\r\n\r\n      //Получаем значения margin из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        margin = getResponsiveSetting(settings, 'text_style_position_margin');\r\n      }\r\n\r\n      if (margin) {\r\n        styles += dimensionsControllerToStyles(margin, 'margin');\r\n      }\r\n\r\n      //Получаем значения z-index из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        zIndex = getResponsiveSetting(settings, 'text_position_z_index');\r\n      }\r\n\r\n      if (zIndex) {\r\n        styles += simplePropertyStyled(zIndex, 'z-index');\r\n      }\r\n\r\n      //Получаем значения background-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        backgroundColor = getResponsiveSetting(settings, 'text_style_background_color');\r\n      }\r\n\r\n      if (backgroundColor) {\r\n        styles += colorPropertyStyled(backgroundColor, 'background-color');\r\n      }\r\n\r\n      //Получаем значения opacity из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        opacity = getResponsiveSetting(settings, 'text_style_background_opacity');\r\n      }\r\n\r\n      if (opacity) {\r\n        styles += opacityStyled(opacity, 'opacity');\r\n      }\r\n\r\n      //Получаем значения typographic из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        typographic = getResponsiveSetting(settings, 'text_style_font_typographic');\r\n      }\r\n\r\n      if (typographic) {\r\n        styles += typographicControllerToStyles(typographic);\r\n      }\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'text_style_font_color');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      //Получаем значения border-style из контроллера, обрабатываем и добавляем в styles\r\n\r\n\r\n      if (settings !== undefined) {\r\n        borderStyle = getResponsiveSetting(settings, 'text_style_border_type');\r\n      }\r\n\r\n      if (borderStyle) {\r\n        styles += simplePropertyStyled(borderStyle, 'border-style');\r\n      }\r\n\r\n      //Получаем значения border-width из контроллера, обрабатываем и добавляем в styles\r\n\r\n\r\n      if (settings !== undefined) {\r\n        borderWidth = getResponsiveSetting(settings, 'text_style_border_width');\r\n      }\r\n\r\n      if (borderWidth) {\r\n        styles += borderWidthStyled(borderWidth);\r\n      }\r\n\r\n      //Получаем значения border-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n\r\n      if (settings !== undefined) {\r\n        borderColor = getResponsiveSetting(settings, 'text_style_border_color');\r\n      }\r\n\r\n      if (borderColor) {\r\n        styles += colorPropertyStyled(borderColor, 'border-color');\r\n      }\r\n\r\n      //Получаем значения border-radius из контроллера, обрабатываем и добавляем в styles\r\n\r\n\r\n      if (settings !== undefined) {\r\n        borderRadius = getResponsiveSetting(settings, 'text_style_border_radius');\r\n      }\r\n\r\n      if (borderRadius) {\r\n        styles += borderRadiusStyled(borderRadius);\r\n      }\r\n\r\n      return styles;\r\n\r\n      }\r\n      }\r\n  }\r\n\r\n  && .altrp-text:hover {\r\n\r\n    ${props => {\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let columnCount, padding, margin, typographic, color, borderStyle, borderWidth, borderColor, borderRadius, zIndex, backgroundColor, opacity;\r\n\r\n      //Получаем значения column-count из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        columnCount = getResponsiveSetting(settings, 'text_style_column-count', ':hover');\r\n      }\r\n\r\n      if (columnCount) {\r\n        styles += simplePropertyStyled(columnCount, 'column-count');\r\n      }\r\n\r\n      //Получаем значения padding из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        padding = getResponsiveSetting(settings, 'text_style_position_padding', ':hover');\r\n      }\r\n\r\n      if (padding) {\r\n        styles += dimensionsControllerToStyles(padding);\r\n      }\r\n\r\n      //Получаем значения margin из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        margin = getResponsiveSetting(settings, 'text_style_position_margin', ':hover');\r\n      }\r\n\r\n      if (margin) {\r\n        styles += dimensionsControllerToStyles(margin, 'margin');\r\n      }\r\n\r\n      //Получаем значения z-index из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        zIndex = getResponsiveSetting(settings, 'text_position_z_index', ':hover');\r\n      }\r\n\r\n      if (zIndex) {\r\n        styles += simplePropertyStyled(zIndex, 'z-index');\r\n      }\r\n\r\n      //Получаем значения background-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        backgroundColor = getResponsiveSetting(settings, 'text_style_background_color', ':hover');\r\n      }\r\n\r\n      if (backgroundColor) {\r\n        styles += colorPropertyStyled(backgroundColor, 'background-color');\r\n      }\r\n\r\n      //Получаем значения opacity из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        opacity = getResponsiveSetting(settings, 'text_style_background_opacity', ':hover');\r\n      }\r\n\r\n      if (opacity) {\r\n        styles += opacityStyled(opacity, 'opacity');\r\n      }\r\n\r\n      //Получаем значения typographic из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        typographic = getResponsiveSetting(settings, 'text_style_font_typographic', ':hover');\r\n      }\r\n\r\n      if (typographic) {\r\n        styles += typographicControllerToStyles(typographic);\r\n      }\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'text_style_font_color', ':hover');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      //Получаем значения border-style из контроллера, обрабатываем и добавляем в styles\r\n\r\n\r\n      if (settings !== undefined) {\r\n        borderStyle = getResponsiveSetting(settings, 'text_style_border_type', ':hover');\r\n      }\r\n\r\n      if (borderStyle) {\r\n        styles += simplePropertyStyled(borderStyle, 'border-style');\r\n      }\r\n\r\n      //Получаем значения border-width из контроллера, обрабатываем и добавляем в styles\r\n\r\n\r\n      if (settings !== undefined) {\r\n        borderWidth = getResponsiveSetting(settings, 'text_style_border_width', ':hover');\r\n      }\r\n\r\n      if (borderWidth) {\r\n        styles += borderWidthStyled(borderWidth);\r\n      }\r\n\r\n      //Получаем значения border-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n\r\n      if (settings !== undefined) {\r\n        borderColor = getResponsiveSetting(settings, 'text_style_border_color', ':hover');\r\n      }\r\n\r\n      if (borderColor) {\r\n        styles += colorPropertyStyled(borderColor, 'border-color');\r\n      }\r\n\r\n      //Получаем значения border-radius из контроллера, обрабатываем и добавляем в styles\r\n\r\n\r\n      if (settings !== undefined) {\r\n        borderRadius = getResponsiveSetting(settings, 'text_style_border_radius', ':hover');\r\n      }\r\n\r\n      if (borderRadius) {\r\n        styles += borderRadiusStyled(borderRadius);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  & .altrp-text img{\r\n    max-width: 100%;\r\n  }\r\n\r\n  & .ck.ck-editor__editable_inline{\r\n    padding: 0;\r\n  }\r\n`;\r\n\r\nexport default TextComponent;\r\n","import Tooltip from \"./Tooltip\";\r\nimport { isEditor } from \"../../../../../front-app/src/js/helpers\";\r\nimport TextComponent from \"./styled-components/TextComponent\";\r\n\r\n(window.globalDefaults = window.globalDefaults || []).push(`\r\n.altrp-text {\r\n  padding: 0;\r\n  margin-top: 5px;\r\n  margin-right: 0;\r\n  margin-bottom: 5px;\r\n  margin-left: 0;\r\n  opacity: 1;\r\n  font-size: 16px;\r\n  font-family: \"Open Sans\";\r\n  line-height: 1.5;\r\n  letter-spacing: 0;\r\n  color: rgb(0, 0, 1);\r\n  border-color: rgb(50,168,82);\r\n  border-radius: 0;\r\n}\r\n`)\r\n\r\nclass TextWidget extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      settings: props.element.getSettings(),\r\n      tooltipActiveValue: false\r\n    };\r\n    props.element.component = this;\r\n    if (window.elementDecorator) {\r\n      window.elementDecorator(this);\r\n    }\r\n    if (props.baseRender) {\r\n      this.render = props.baseRender(this);\r\n    }\r\n    this.tooltipActive = this.tooltipActive.bind(this);\r\n    this.changeText = this.changeText.bind(this);\r\n  }\r\n\r\n  tooltipActive() {\r\n    if (this.state.tooltipActiveValue) {\r\n      this.setState({\r\n        tooltipActiveValue: !this.state.tooltipActiveValue\r\n      });\r\n    } else {\r\n      setTimeout(() => {\r\n        this.setState({\r\n          tooltipActiveValue: !this.state.tooltipActiveValue\r\n        });\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  changeText(value) {\r\n    let settings = this.props.element.settings;\r\n    settings.text = value;\r\n    this.props.element.setSettings(settings);\r\n    this.props.element.templateNeedUpdate();\r\n  }\r\n\r\n  render() {\r\n    let tooltip = (\r\n      <Tooltip\r\n        switch={this.state.settings.text_advanced_tooltip_active || false}\r\n        label={this.state.settings.text_advanced_tooltip_label}\r\n        active={this.state.tooltipActiveValue}\r\n      />\r\n    );\r\n    let tooltipActive = null;\r\n    if (this.state.settings.text_advanced_tooltip_active) {\r\n      tooltipActive = this.tooltipActive;\r\n    }\r\n    let textContent = this.getContent(\"text\");\r\n    let textCap = (\r\n      <>\r\n        <span className=\"altrp-text-drop-cap\">\r\n          {this.state.settings.text?.slice(0, 1)}\r\n        </span>\r\n        <span>{this.state.settings.text?.slice(2)}</span> {tooltip}\r\n      </>\r\n    );\r\n\r\n\r\n    if (this.props.CKEditor) {\r\n      return (\r\n        <TextComponent className=\"altrp-text\">\r\n          <this.props.CKEditor\r\n            changeText={this.changeText}\r\n            text={textContent}\r\n            readOnly={isEditor()}\r\n            textWidget={true}\r\n          />\r\n        </TextComponent>\r\n      );\r\n    }\r\n\r\n    return React.createElement(\"div\", {\r\n      className:\r\n        \"altrp-text ck ck-content \" +\r\n        this.state.settings.text_position_css_classes,\r\n      id: this.state.settings.text_position_css_id || \"\",\r\n      onMouseOver: tooltipActive,\r\n      dangerouslySetInnerHTML: {\r\n        __html: textContent || \"\"\r\n      },\r\n      // dangerouslySetInnerHTML: activeText,\r\n\r\n      onMouseLeave: tooltipActive\r\n    });\r\n  }\r\n}\r\n\r\nexport default TextWidget;\r\n"],"sourceRoot":""}