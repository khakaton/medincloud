{"version":3,"sources":["webpack:///./resources/modules/admin/src/components/altrp-select/AltrpSelect.js","webpack:///./resources/modules/editor/src/js/components/altrp-image-select/AltrpImageSelect.js","webpack:///./resources/modules/editor/src/js/components/ckeditor/Plugins/UploadAdapterPlugin.js","webpack:///./resources/modules/editor/src/js/components/ckeditor/CKeditor.js","webpack:///./resources/modules/editor/src/js/components/widgets/InputWidget.js"],"names":["renderScrollbar","props","autoHeight","children","AltrpSelect","loadOptions","searchString","callback","options","optionsResource","search","setState","state","optionsRoute","Resource","route","selectRef","React","customStyles","control","base","boxShadow","borderColor","isFocused","menuPortal","zIndex","selectProps","onChange","this","placeholder","noOptionsMessage","styles","menuPortalTarget","document","body","menuPlacement","menuPosition","onKeyDown","components","MenusList","captureMenuScroll","isDisabled","ref","_","assign","isArray","value","map","item","_i","label","isString","isNumber","isObject","forEach","option","find","o","Component","AltrpImageSelect","changeHandler","isMultiple","className","key","id","includes","onClick","filter","image","src","url","width","UploadAdapter","loader","resource","Promise","resolve","reject","file","then","result","postFiles","response","default","UploadAdapterPlugin","editor","plugins","get","createUploadAdapter","defaultToolbar","textWidget","CKEditor","config","extraPlugins","toolbar","BalloonEditor","disabled","readOnly","data","text","onReady","console","log","event","changeText","getData","onBlur","moment","window","altrpHelpers","globalDefaults","push","AltrpFieldContainer","styled","div","settings","content_label_position_type","InputWidget","timeInput","handleEnter","e","keyCode","preventDefault","inputs","Array","from","querySelectorAll","index","indexOf","target","undefined","focus","element","getSettings","create_allowed","create_label","create_url","createItem","debounceDispatch","debounce","dispatchFieldValueToStore","onFocus","focus_actions","isEditor","actionsManager","callAllWidgetActions","getIdForAction","content_type","userInput","formId","getFormId","fieldName","getFieldId","replaceContentWithData","appStore","dispatch","changeFormFieldValue","change_actions","inputValue","create_data","select2_multiple","currentModel","getCurrentModel","parseParamsFromString","parseURLTemplate","post","res","success","newOption","unshift","selectStateManager","menuIsOpen","error","component","elementDecorator","bind","defaultValue","getContent","valueMustArray","parseOptionsFromSettings","paramsForUpdate","altrpSelectRef","createRef","optionsDynamicSetting","getDynamicSetting","convertData","prevProps","prevState","model_for_options","getRoute","getAll","getProperty","contentLoaded","currentDataStorage","content_options","isEqual","dynamic","formsStore","updateOptions","updateValue","content_calculation","altrpforms","prevContext","altrpdata","altrpmodel","altrpuser","currentUser","altrppagestate","altrpPageState","altrpresponses","altrpmeta","altrpMeta","context","currentDataStorageLoaded","changedField","altrpstorage","getDataFromLocalStorage","replace","eval","message","getId","path","formData","AltrpModel","isEmpty","JSON","stringify","getQueried","filters","valueToDispatch","getElementsByName","name","input","checked","_value","trueValue","falseValue","valueReplacement","cloneDeep","timestamp","isDate","Date","getTime","change_change_end","change_change_end_delay","clearTimeout","setTimeout","sortBy","toString","options_sorting","content_readonly","image_select_options","label_icon","classLabel","styleLabel","getResponsiveSetting","marginBottom","label_style_spacing","size","unit","marginTop","marginRight","position","content_label","style","content_required","assetType","renderAssetIcon","autocomplete","content_autocomplete","getOptions","getName","position_css_id","position_css_classes","content_options_nullable","sortOptions","renderSelect2","renderRepeatedInput","renderWysiwyg","autoComplete","content_placeholder","renderAcceptInput","isClearable","content_clearable","unix","isValid","format","type","Math","random","substr","formID","inputType","idx","altrpCompare","htmlFor","nulled_option_title","v","_v","valueItem","union","select2Props","classNamePrefix","isOptionSelected","isMulti"],"mappings":"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","file":"InputWidget.e1cec06213b58461aadf.bundle.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport AsyncSelect from \"react-select/async\";\r\nimport Resource from \"../../../../editor/src/js/classes/Resource\";\r\nimport Select from \"react-select\";\r\nimport { Scrollbars } from \"react-custom-scrollbars\";\r\nimport {parseParamsFromString, parseURLTemplate} from \"../../../../front-app/src/js/helpers\";\r\n\r\nexport const renderScrollbar = (props) => {\r\n  return <Scrollbars autoHeight >{props.children}</Scrollbars>;\r\n};\r\n\r\nclass AltrpSelect extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      options: props.options || [],\r\n    };\r\n    if(props.optionsRoute){\r\n      this.optionsResource = new Resource({route: props.optionsRoute});\r\n    }\r\n    this.selectRef = React.createRef();\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  async componentDidMount(){\r\n\r\n  }\r\n  /**\r\n   * изменение значения\r\n   */\r\n  onChange(){\r\n\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  loadOptions = async (searchString, callback)=>{\r\n    let options = [];\r\n    if(this.optionsResource){\r\n      options = await this.optionsResource.search(searchString);\r\n    }\r\n    this.setState(state=>({\r\n      ...state,\r\n      options\r\n    }));\r\n    return callback(options);\r\n  };\r\n\r\n  render(){\r\n    const customStyles = {\r\n      control: (base, state) => ({\r\n        ...base,\r\n        boxShadow: \"none\",\r\n        borderColor: state.isFocused ? \"hsl(0,0%,80%)\" : \"hsl(0,0%,80%)\",\r\n        \"&:hover\": {\r\n          borderColor: \"hsl(0,0%,80%)\"\r\n        }\r\n      }),\r\n      menuPortal: base => ({ ...base, zIndex: 99999 }),\r\n      // option: (provided, state) => ({\r\n      //   ...provided,\r\n      //   backgroundColor: state.isSelected ?\r\n      //     background.selected.color :\r\n      //     state.isFocused ? background.focused.color : background.normal.color\r\n      // })\r\n    };\r\n\r\n    let selectProps = {\r\n      onChange: this.onChange,\r\n      options: this.state.options || [],\r\n      placeholder: this.props.placeholder,\r\n      loadOptions: this.loadOptions,\r\n      noOptionsMessage: this.props.noOptionsMessage || (() => \"not found\"),\r\n      styles: customStyles,\r\n      menuPortalTarget: document.body,\r\n      menuPlacement: 'auto',\r\n      menuPosition: 'absolute',\r\n      onKeyDown : this.onKeyDown,\r\n      components: { MenusList: renderScrollbar },\r\n      captureMenuScroll: false,\r\n      isDisabled: this.state.isDisabled,\r\n      ref: this.selectRef,\r\n    };\r\n\r\n    _.assign(selectProps, this.props);\r\n\r\n    if(_.isArray(selectProps.value)){\r\n      selectProps.value = selectProps.value.map(item => {\r\n        let _i = {\r\n          label: '',\r\n          value: '',\r\n        };\r\n        if(_.isString(item) || _.isNumber(item)){\r\n          _i.value = item;\r\n          _i.label = item;\r\n        } else if(_.isObject(item)) {\r\n          return item;\r\n        }\r\n        if(_.isArray(selectProps.options)){\r\n          selectProps.options.forEach(option=>{\r\n            if(option.value === _i.value){\r\n              _i = {...option,};\r\n            }\r\n          });\r\n        }\r\n        return _i;\r\n      });\r\n    }\r\n    if(selectProps.value && ! _.isObject(selectProps.value)){\r\n      selectProps.value = selectProps.options.find(o=>{\r\n        return o.value == selectProps.value;\r\n      });\r\n    }\r\n    if( this.optionsResource){\r\n      return <AsyncSelect {...selectProps} />\r\n    } else {\r\n      return <Select {...selectProps} />\r\n    }\r\n  }\r\n}\r\n\r\nexport default AltrpSelect\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\r\n\r\nclass AltrpImageSelect extends Component {\r\n  render() {\r\n    const { options, changeHandler, isMultiple, value } = this.props;\r\n\r\n    return <div className=\"altrp-image-select\">\r\n      {options?.map(option => <div key={option.id}\r\n        className={`altrp-field altrp-field-container \r\n          ${(isMultiple && value.includes(option.value) || value === option.value ? \"active\" : \"\")}`}\r\n        onClick={() => changeHandler(isMultiple ?\r\n          value.includes(option.value) ? value.filter(item => item !== option.value) : [...value, option.value] :\r\n          option.value)}\r\n      >\r\n        {option.image && <img src={option.image.url} width={\"100%\"} />}\r\n        <div className=\"altrp-image-select__label\">{option.label}</div>\r\n      </div>)}\r\n    </div>\r\n  }\r\n}\r\nexport default AltrpImageSelect;\r\n","import Resource from \"../../../classes/Resource\";\r\n\r\nclass UploadAdapter {\r\n  constructor(props) {\r\n    this.loader = props;\r\n    this.resource = new Resource({ route: \"/admin/ajax/media\" });\r\n  }\r\n\r\n  upload() {\r\n    return new Promise((resolve, reject) => {\r\n      this.loader.file.then(result => {\r\n        this.resource.postFiles([result]).then(response => {\r\n          resolve({\r\n            default: response[0].url\r\n          });\r\n        });\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n * @param editor\r\n */\r\nexport default function UploadAdapterPlugin(editor) {\r\n  editor.plugins.get(\"FileRepository\").createUploadAdapter = loader => {\r\n    return new UploadAdapter(loader);\r\n  };\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { CKEditor } from \"@ckeditor/ckeditor5-react\";\r\nimport BalloonEditor from \"@ckeditor/ckeditor5-build-balloon\";\r\nimport UploadAdapterPlugin from \"./Plugins/UploadAdapterPlugin\";\r\n\r\nconst defaultToolbar = [\r\n  \"heading\",\r\n  \"undo\",\r\n  \"redo\",\r\n  \"bold\",\r\n  \"italic\",\r\n  \"blockQuote\",\r\n  \"indent\",\r\n  \"outdent\",\r\n  \"link\",\r\n  \"numberedList\",\r\n  \"bulletedList\",\r\n  \"imageTextAlternative\",\r\n  \"imageUpload\",\r\n  \"mediaEmbed\",\r\n  \"insertTable\",\r\n  \"tableColumn\",\r\n  \"tableRow\",\r\n  \"mergeTableCells\"\r\n];\r\nclass CKeditor extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    if (this.props.textWidget) {\r\n      return (\r\n        <>\r\n          <CKEditor\r\n            config={{\r\n              extraPlugins: [UploadAdapterPlugin],\r\n              toolbar: defaultToolbar\r\n            }}\r\n            editor={BalloonEditor}\r\n            disabled={!this.props.readOnly}\r\n            data={this.props.text || \"Type text here\"}\r\n            onReady={editor => {\r\n              // You can store the \"editor\" and use when it is needed.\r\n              console.log(\"Editor is ready to use!\", editor);\r\n            }}\r\n            onChange={(event, editor) =>\r\n              this.props.changeText(editor.getData())\r\n            }\r\n          />\r\n        </>\r\n      );\r\n    }\r\n    return (\r\n      <CKEditor\r\n        config={{\r\n          extraPlugins: [UploadAdapterPlugin],\r\n          toolbar: defaultToolbar\r\n        }}\r\n        editor={BalloonEditor}\r\n        data={this.props.text || \"Type text here\"}\r\n        disabled={this.props.readOnly}\r\n        onReady={editor => {\r\n          console.log(\"Editor is ready to use!\", editor);\r\n        }}\r\n        onChange={(event, editor) => this.props.onChange(event, editor)}\r\n        onBlur={(event, editor) => this.props.onBlur(event, editor)}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default CKeditor;\r\n","import {\r\n  altrpCompare,\r\n  convertData,\r\n  isEditor,\r\n  parseOptionsFromSettings,\r\n  parseParamsFromString,\r\n  parseURLTemplate,\r\n  replaceContentWithData,\r\n  sortOptions,\r\n  renderAssetIcon,\r\n  valueReplacement,\r\n  getDataFromLocalStorage\r\n} from \"../../../../../front-app/src/js/helpers\";\r\nimport Resource from \"../../classes/Resource\";\r\nimport AltrpSelect from \"../../../../../admin/src/components/altrp-select/AltrpSelect\";\r\nimport { changeFormFieldValue } from \"../../../../../front-app/src/js/store/forms-data-storage/actions\";\r\nimport AltrpModel from \"../../classes/AltrpModel\";\r\nimport CKeditor from \"../ckeditor/CKeditor\";\r\nimport AltrpImageSelect from \"../altrp-image-select/AltrpImageSelect\";\r\nimport AltrpInput from \"../altrp-input/AltrpInput\";\r\nconst {moment} = window.altrpHelpers;\r\n\r\n(window.globalDefaults = window.globalDefaults || []).push(`\r\n.altrp-field {\r\n  border-style: solid;\r\n  width: 100%;\r\n}\r\n.altrp-field-file{\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.altrp-label-icon svg,\r\n.altrp-label-icon img {\r\n  width: 20px;\r\n}\r\n.altrp-label-icon svg{\r\n  height: 20px;\r\n}\r\n.altrp-field-file__field{\r\n  display: none;\r\n}\r\n.altrp-field-file__placeholder{\r\n  display: none;\r\n}\r\n.altrp-field-file_empty .altrp-field-file__placeholder{\r\n  display: block;\r\n  padding: 10px 20px;\r\n  border: none;\r\n  cursor: pointer;\r\n  background-color: rgb(52,59,76);\r\n  color: #fff;\r\n}\r\n.input-clear-btn {\r\n  background: transparent;\r\n  padding: 0;\r\n  position: absolute;\r\n  bottom: calc(50% - 7px);\r\n  right: 15px;\r\n  display: none;\r\n}\r\n.input-clear-btn:hover {\r\n  font-weight: bold;\r\n}\r\n.altrp-field:hover + .input-clear-btn, .input-clear-btn:hover {\r\n  display: block;\r\n}\r\n.altrp-input-wrapper, .altrp-field-select2 {\r\n  position: relative;\r\n  flex-grow: 1;\r\n}\r\n.altrp-field-label--required::after {\r\n  content: \"*\";\r\n  color: red;\r\n  font-size: inherit;\r\n  padding-left: 10px;\r\n}\r\n.altrp-field-label {\r\n  font-size: 16px;\r\n  font-family: \"Open Sans\";\r\n  line-height: 1.5;\r\n  letter-spacing: 0;\r\n}\r\n.altrp-field-select2__single-value, .altrp-field {\r\n  font-size: 16px;\r\n  font-family: \"Open Sans\";\r\n  line-height: 1.5;\r\n  letter-spacing: 0;\r\n}\r\n.altrp-field-select2__control, .altrp-field {\r\n  text-align: left;\r\n  padding-top: 2px;\r\n  padding-right: 2px;\r\n  padding-bottom: 2px;\r\n  padding-left: 2px;\r\n  border-width: 1px;\r\n  border-color: #000;\r\n}\r\n.altrp-field-select2__control:hover{\r\n  border-width: 1px;\r\n  border-color: #000;\r\n}\r\n.altrp-field-container {\r\n  margin: 0;\r\n}\r\n.altrp-field::placeholder, .altrp-field-select2__placeholder {\r\n  font-size: 13px;\r\n  font-family: \"Open Sans\";\r\n  line-height: 1.5;\r\n  letter-spacing: 0;\r\n}\r\n.altrp-image-select {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n}\r\n.altrp-image-select img {\r\n  flex-grow: 1;\r\n  object-fit: contain;\r\n}\r\n.altrp-field {\r\n  overflow: hidden;\r\n  cursor: pointer;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n}\r\n.altrp-field.active {\r\n  border-color: lightcoral;\r\n}\r\n.altrp-field-label {\r\n  text-align: center;\r\n  display: block;\r\n}\r\n.altrp-pagination__select-size .altrp-field-select2__single-value {\r\n  font-size: 14px;\r\n}\r\n.altrp-pagination__select-size .altrp-field-select2__indicator-separator {\r\n  display: none;\r\n}\r\n.altrp-pagination__select-size .altrp-field-select2__indicator {\r\n  align-items: center;\r\n}\r\n.altrp-pagination__select-size .altrp-field-select2__control {\r\n  width: 100px;\r\n  min-height: 32px;\r\n  padding: 0;\r\n  border-radius: 0;\r\n  outline: none;\r\n  border-color: rgb(142,148,170);\r\n  -webkit-box-shadow: none;\r\n  -moz-box-shadow: none;\r\n  box-shadow: none;\r\n}\r\n.altrp-pagination__select-size .altrp-field-select2__control input {\r\n  border: none;\r\n}\r\n.altrp-field-select2 {\r\n  position: relative;\r\n  box-sizing: border-box;\r\n  pointer-events: none;\r\n}\r\n.altrp-field-select2__control {\r\n  webkit-align-items: center;\r\n  -webkit-box-align: center;\r\n  -ms-flex-align: center;\r\n  align-items: center;\r\n  background-color: hsl(0,0%,100%);\r\n  border-color: hsl(0,0%,80%);\r\n  border-style: solid;\r\n  border-width: 1px;\r\n  cursor: default;\r\n  display: -webkit-box;\r\n  display: -webkit-flex;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -webkit-flex-wrap: wrap;\r\n  -ms-flex-wrap: wrap;\r\n  flex-wrap: wrap;\r\n  -webkit-box-pack: justify;\r\n  -webkit-justify-content: space-between;\r\n  -ms-flex-pack: justify;\r\n  justify-content: space-between;\r\n  min-height: 38px;\r\n  outline: 0 !important;\r\n  position: relative;\r\n  -webkit-transition: all 100ms;\r\n  transition: all 100ms;\r\n  box-sizing: border-box;\r\n}\r\n.altrp-field-select2__value-container {\r\n  -webkit-align-items: center;\r\n  -webkit-box-align: center;\r\n  -ms-flex-align: center;\r\n  align-items: center;\r\n  display: -webkit-box;\r\n  display: -webkit-flex;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -webkit-flex: 1;\r\n  -ms-flex: 1;\r\n  flex: 1;\r\n  -webkit-flex-wrap: wrap;\r\n  -ms-flex-wrap: wrap;\r\n  flex-wrap: wrap;\r\n  padding: 2px 8px;\r\n  -webkit-overflow-scrolling: touch;\r\n  position: relative;\r\n  overflow: hidden;\r\n  box-sizing: border-box;\r\n}\r\n.altrp-field-select2__single-value {\r\n  color: hsl(0,0%,20%);\r\n  margin-left: 2px;\r\n  margin-right: 2px;\r\n  max-width: calc(100% - 8px);\r\n  overflow: hidden;\r\n  position: absolute;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n  top: 50%;\r\n  -webkit-transform: translateY(-50%);\r\n  -ms-transform: translateY(-50%);\r\n  transform: translateY(-50%);\r\n  box-sizing: border-box;\r\n}\r\n.altrp-field-select2__indicators {\r\n  -webkit-align-items: center;\r\n  -webkit-box-align: center;\r\n  -ms-flex-align: center;\r\n  align-items: center;\r\n  -webkit-align-self: stretch;\r\n  -ms-flex-item-align: stretch;\r\n  align-self: stretch;\r\n  display: -webkit-box;\r\n  display: -webkit-flex;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -webkit-flex-shrink: 0;\r\n  -ms-flex-negative: 0;\r\n  flex-shrink: 0;\r\n  box-sizing: border-box;\r\n}\r\n.altrp-field-select2__indicator-separator {\r\n  -webkit-align-self: stretch;\r\n  -ms-flex-item-align: stretch;\r\n  align-self: stretch;\r\n  background-color: hsl(0,0%,80%);\r\n  margin-bottom: 8px;\r\n  margin-top: 8px;\r\n  width: 1px;\r\n  box-sizing: border-box;\r\n}\r\n.altrp-field-select2__indicator {\r\n  color: hsl(0,0%,80%);\r\n  display: -webkit-box;\r\n  display: -webkit-flex;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  padding: 8px;\r\n  -webkit-transition: color 150ms;\r\n  transition: color 150ms;\r\n  box-sizing: border-box;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n.tba-placeholder {\r\n  display: flex;\r\n  justify-content: center;\r\n  font-size: 28px;\r\n  font-weight: bold;\r\n}\r\n.altrp-field-subgroup {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n}\r\n.altrp-field-option {\r\n  display: flex;\r\n  padding: 10px;\r\n}\r\n.altrp-field-option__label {\r\n  cursor: pointer;\r\n}\r\ntextarea.altrp-field {\r\n  display: block;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__placeholder {\r\n  white-space: nowrap;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__single-value {\r\n  font-size: 14px;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__indicator-separator {\r\n  display: none;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__indicator {\r\n  align-items: center;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__control {\r\n  width: 100%;\r\n  min-height: 19px;\r\n  padding: 0;\r\n  border-radius: 0;\r\n  outline: none;\r\n  border-color: rgb(142, 148, 170);\r\n  -webkit-box-shadow: none;\r\n  -moz-box-shadow: none;\r\n  box-shadow: none;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__control input {\r\n  border: none;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__value-container {\r\n  padding-top: 0;\r\n  padding-bottom: 0;\r\n  line-height: 13px;\r\n}\r\n.altrp-field-required {\r\n  color: red;\r\n  font-size: 18px;\r\n  padding-left: 10px;\r\n}\r\n.altrp-field-container-label {\r\n  display: flex;\r\n  flex-direction: row;\r\n}\r\n\r\n.altrp-field-label-container-left {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.altrp-field-label-container {\r\n  display: inline-flex;\r\n  align-items: center;\r\n}\r\n.altrp-field-select2__indicator.altrp-field-select2__dropdown-indicator {\r\n  padding: 0 8px;\r\n  max-height: 14px;\r\n  overflow: hidden;\r\n}\r\n.altrp-field-select2 .altrp-field-select2__value-container {\r\n  padding: 0px 8px;\r\n}\r\n.altrp-field-select2 .css-b8ldur-Input {\r\n  padding-bottom: 0px;\r\n  padding-top: 0px;\r\n  margin: 0 2px;\r\n}\r\n.altrp-field-select2 .altrp-field-select2__control {\r\n  min-height: 14px;\r\n}\r\n`)\r\n\r\nconst AltrpFieldContainer = styled.div`\r\n  ${({ settings: { content_label_position_type } }) => {\r\n    switch (content_label_position_type) {\r\n      case \"left\": {\r\n        return \"display: flex\";\r\n      }\r\n      case \"right\": {\r\n        return \"display:flex;flex-direction:row-reverse;justify-content:flex-end;\";\r\n      }\r\n    }\r\n    return \"\";\r\n  }}\r\n`;\r\n\r\nclass InputWidget extends Component {\r\n  timeInput = null;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    props.element.component = this;\r\n    if (window.elementDecorator) {\r\n      window.elementDecorator(this);\r\n    }\r\n    this.onChange = this.onChange.bind(this);\r\n    this.debounceDispatch = this.debounceDispatch.bind(this);\r\n\r\n    this.defaultValue =\r\n      this.getContent(\"content_default_value\") ||\r\n      (this.valueMustArray() ? [] : \"\");\r\n    if (this.valueMustArray() && !_.isArray(this.defaultValue)) {\r\n      this.defaultValue = [];\r\n    }\r\n    this.state = {\r\n      settings: { ...props.element.getSettings() },\r\n      value: this.defaultValue,\r\n      options: parseOptionsFromSettings(\r\n        props.element.getSettings(\"content_options\")\r\n      ),\r\n      paramsForUpdate: null\r\n    };\r\n    this.altrpSelectRef = React.createRef();\r\n    if (this.getContent(\"content_default_value\")) {\r\n      this.dispatchFieldValueToStore(this.getContent(\"content_default_value\"));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * В некоторых случаях значение поля должно быть массивом\r\n   * @return {boolean}\r\n   */\r\n  valueMustArray() {\r\n    if (\r\n      [\"file\", \"image_select\", \"checkbox\"].indexOf(\r\n        this.props.element.getSettings(\"content_type\")\r\n      ) !== -1\r\n    ) {\r\n      return true;\r\n    }\r\n    if (\r\n      this.props.element.getSettings(\"content_type\") === \"select2\" &&\r\n      this.props.element.getSettings(\"select2_multiple\")\r\n    ) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  /**\r\n   * Чистит значение\r\n   */\r\n  clearValue() {\r\n    let value = \"\";\r\n    if (\r\n      this.props.element.getSettings(\"content_type\") === \"checkbox\" ||\r\n      ([\"select2\", \"image_select\"].indexOf(\r\n        this.props.element.getSettings(\"content_type\")\r\n      ) >= 0 &&\r\n        this.props.element.getSettings(\"select2_multiple\"))\r\n    ) {\r\n      value = [];\r\n    }\r\n    this.onChange(value);\r\n    this.dispatchFieldValueToStore(value, true);\r\n  }\r\n  /**\r\n   * Метод устанавливает все опции как выбранные\r\n   */\r\n  selectAll() {\r\n    const optionsDynamicSetting = this.props.element.getDynamicSetting(\r\n      \"content_options\"\r\n    );\r\n    if (this.props.element.getSettings(\"content_type\") === \"checkbox\") {\r\n      let options = [...this.state.options];\r\n\r\n      if (optionsDynamicSetting) {\r\n        options = convertData(optionsDynamicSetting, options);\r\n      }\r\n      options = options.map(({ value }) => value);\r\n      this.onChange(options);\r\n    }\r\n    if (\r\n      [\"select2\", \"image_select\"].indexOf(\r\n        this.props.element.getSettings(\"content_type\")\r\n      ) >= 0 &&\r\n      this.props.element.getSettings(\"select2_multiple\")\r\n    ) {\r\n      let options = [...this.state.options];\r\n      if (!_.isArray(options)) {\r\n        options = [];\r\n      } else {\r\n        if (optionsDynamicSetting) {\r\n          options = convertData(optionsDynamicSetting, options);\r\n        }\r\n      }\r\n      this.onChange(options);\r\n    }\r\n  }\r\n  /**\r\n   * Обработка нажатия клавиши\r\n   * @param {{}} e\r\n   */\r\n  handleEnter = e => {\r\n    if (e.keyCode === 13) {\r\n      e.preventDefault();\r\n      const inputs = Array.from(document.querySelectorAll(\"input,select\"));\r\n      const index = inputs.indexOf(e.target);\r\n      if (index === undefined) return;\r\n      inputs[index + 1] && inputs[index + 1].focus();\r\n      const {\r\n        create_allowed,\r\n        create_label,\r\n        create_url\r\n      } = this.props.element.getSettings();\r\n      if (create_allowed && create_label && create_url) {\r\n        this.createItem(e);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Загрузка виджета\r\n   * @param {{}} prevProps\r\n   * @param {{}} prevState\r\n   */\r\n  async _componentDidMount(prevProps, prevState) {\r\n    if (this.props.element.getSettings(\"content_options\")) {\r\n      let options = parseOptionsFromSettings(\r\n        this.props.element.getSettings(\"content_options\")\r\n      );\r\n\r\n      this.setState(state => ({ ...state, options }));\r\n    } else if (\r\n      [\"select\", \"select2\"].indexOf(this.state.settings.content_type) >= 0 &&\r\n      this.state.settings.model_for_options\r\n    ) {\r\n      let options = await new Resource({ route: this.getRoute() }).getAll();\r\n      options = !_.isArray(options) ? options.data : options;\r\n      options = _.isArray(options) ? options : [];\r\n      this.setState(state => ({ ...state, options }));\r\n    }\r\n    let value = this.state.value;\r\n    /**\r\n     * Если динамическое значение загрузилось,\r\n     * то используем this.getContent для получение этого динамического значения\r\n     * старые динамические данные\r\n     * */\r\n    if (\r\n      _.get(value, \"dynamic\") &&\r\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\r\n    ) {\r\n      value = this.getContent(\"content_default_value\");\r\n    }\r\n    // if (!_.isObject(value)) {\r\n    //   value = this.getContent('content_default_value');\r\n    // }\r\n    /**\r\n     * Если модель обновилась при смене URL\r\n     */\r\n    if (\r\n      prevProps &&\r\n      !prevProps.currentModel.getProperty(\"altrpModelUpdated\") &&\r\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\r\n    ) {\r\n      value = this.getContent(\"content_default_value\");\r\n      this.setState(\r\n        state => ({ ...state, value, contentLoaded: true }),\r\n        () => {\r\n          this.dispatchFieldValueToStore(value);\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    if (\r\n      this.props.currentModel.getProperty(\"altrpModelUpdated\") &&\r\n      this.props.currentDataStorage.getProperty(\"currentDataStorageLoaded\") &&\r\n      !this.state.contentLoaded\r\n    ) {\r\n      value = this.getContent(\"content_default_value\");\r\n      this.setState(\r\n        state => ({ ...state, value, contentLoaded: true }),\r\n        () => {\r\n          this.dispatchFieldValueToStore(value);\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    if (this.state.value !== value) {\r\n      this.setState(\r\n        state => ({ ...state, value }),\r\n        () => {\r\n          this.dispatchFieldValueToStore(value);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Получить url для запросов\r\n   */\r\n  getRoute() {\r\n    let url = this.props.element.getSettings(\"model_for_options\");\r\n\r\n    if (url.indexOf(\"/\") === -1) {\r\n      return `/ajax/models/${url}_options`;\r\n    }\r\n    if (url.indexOf(\"{{\") !== -1) {\r\n      url = replaceContentWithData(url);\r\n    }\r\n    return url;\r\n  }\r\n  /**\r\n   * Обновление виджета\r\n   */\r\n  async _componentDidUpdate(prevProps, prevState) {\r\n    const { content_options, model_for_options } = this.state.settings;\r\n    if (\r\n      prevProps &&\r\n      !prevProps.currentDataStorage.getProperty(\"currentDataStorageLoaded\") &&\r\n      this.props.currentDataStorage.getProperty(\"currentDataStorageLoaded\")\r\n    ) {\r\n      let value = this.getContent(\r\n        \"content_default_value\",\r\n        this.props.element.getSettings(\"select2_multiple\")\r\n      );\r\n      this.setState(\r\n        state => ({ ...state, value, contentLoaded: true }),\r\n        () => {\r\n          this.dispatchFieldValueToStore(value);\r\n        }\r\n      );\r\n    }\r\n    if (\r\n      this.props.element.getSettings(\"content_type\") === \"select\" &&\r\n      this.props.element.getSettings(\"model_for_options\")\r\n    ) {\r\n      if (\r\n        !(\r\n          this.state.settings.model_for_options ===\r\n          prevProps.element.getSettings(\"model_for_options\")\r\n        )\r\n      ) {\r\n        let model_for_options = prevProps.element.getSettings(\r\n          \"model_for_options\"\r\n        );\r\n        let options = await new Resource({ route: this.getRoute() }).getAll();\r\n        options = !_.isArray(options) ? options.data : options;\r\n        options = _.isArray(options) ? options : [];\r\n        this.setState(state => ({ ...state, options, model_for_options }));\r\n      }\r\n    }\r\n    /**\r\n     * Если обновилась модель, то пробрасываем в стор новое значение (старый источник диамических данных)\r\n     */\r\n    if (\r\n      !_.isEqual(this.props.currentModel, prevProps.currentModel) &&\r\n      this.state.value &&\r\n      this.state.value.dynamic\r\n    ) {\r\n      this.dispatchFieldValueToStore(this.getContent(\"content_default_value\"));\r\n    }\r\n\r\n    /**\r\n     * Если обновилось хранилище данных формы, currentDataStorage или модель, то получаем новые опции c сервера\r\n     */\r\n    if (\r\n      this.props.formsStore !== prevProps.formsStore ||\r\n      this.props.currentModel !== prevProps.currentModel ||\r\n      this.props.currentDataStorage !== prevProps.currentDataStorage\r\n    ) {\r\n      this.updateOptions();\r\n    }\r\n    if (content_options && !model_for_options) {\r\n      let options = parseOptionsFromSettings(content_options);\r\n      if (!_.isEqual(options, this.state.options)) {\r\n        this.setState(state => ({ ...state, options }));\r\n      }\r\n    }\r\n    this.updateValue(prevProps);\r\n  }\r\n\r\n  /**\r\n   * Обновить значение если нужно\r\n   * @param {{}} prevProps\r\n   */\r\n  updateValue(prevProps) {\r\n    if (isEditor()) {\r\n      return;\r\n    }\r\n    let content_calculation = this.props.element.getSettings(\r\n      \"content_calculation\"\r\n    );\r\n    const altrpforms = this.props.formsStore;\r\n    const fieldName = this.props.element.getFieldId();\r\n    const formId = this.props.element.getFormId();\r\n    if (!content_calculation) {\r\n      /**\r\n       * Обновить значение, если formsStore изменилось из другого компонента\r\n       */\r\n      const path = `${formId}.${fieldName}`;\r\n      if (\r\n        this.props.formsStore !== prevProps.formsStore &&\r\n        _.get(altrpforms, path) !== this.state.value\r\n      ) {\r\n        this.setState(state => ({\r\n          ...state,\r\n          value: _.get(altrpforms, path)\r\n        }));\r\n      }\r\n      return;\r\n    }\r\n\r\n    const prevContext = {};\r\n\r\n    const altrpdata = this.props.currentDataStorage.getData();\r\n    const altrpmodel = this.props.currentModel.getData();\r\n    const altrpuser = this.props.currentUser.getData();\r\n    const altrppagestate = this.props.altrpPageState.getData();\r\n    const altrpresponses = this.props.altrpresponses.getData();\r\n    const altrpmeta = this.props.altrpMeta.getData();\r\n    const context = this.props.element.getCurrentModel().getData();\r\n    if (content_calculation.indexOf(\"altrpdata\") !== -1) {\r\n      context.altrpdata = altrpdata;\r\n      if (!altrpdata.currentDataStorageLoaded) {\r\n        prevContext.altrpdata = altrpdata;\r\n      } else {\r\n        prevContext.altrpdata = prevProps.currentDataStorage.getData();\r\n      }\r\n    }\r\n    if (content_calculation.indexOf(\"altrpforms\") !== -1) {\r\n      context.altrpforms = altrpforms;\r\n      /**\r\n       * Не производим вычисления, если изменилось текущее поле\r\n       */\r\n      if (`${formId}.${fieldName}` === altrpforms.changedField) {\r\n        prevContext.altrpforms = altrpforms;\r\n      } else {\r\n        prevContext.altrpforms = prevProps.formsStore;\r\n      }\r\n    }\r\n    if (content_calculation.indexOf(\"altrpmodel\") !== -1) {\r\n      context.altrpmodel = altrpmodel;\r\n      prevContext.altrpmodel = prevProps.currentModel.getData();\r\n    }\r\n    if (content_calculation.indexOf(\"altrpuser\") !== -1) {\r\n      context.altrpuser = altrpuser;\r\n      prevContext.altrpuser = prevProps.currentUser.getData();\r\n    }\r\n    if (content_calculation.indexOf(\"altrpuser\") !== -1) {\r\n      context.altrpuser = altrpuser;\r\n      prevContext.altrpuser = prevProps.currentUser.getData();\r\n    }\r\n    if (content_calculation.indexOf(\"altrppagestate\") !== -1) {\r\n      context.altrppagestate = altrppagestate;\r\n      prevContext.altrppagestate = prevProps.altrpPageState.getData();\r\n    }\r\n    if (content_calculation.indexOf(\"altrpmeta\") !== -1) {\r\n      context.altrpmeta = altrpmeta;\r\n      prevContext.altrpmeta = prevProps.altrpMeta.getData();\r\n    }\r\n    if (content_calculation.indexOf(\"altrpresponses\") !== -1) {\r\n      context.altrpresponses = altrpresponses;\r\n      prevContext.altrpresponses = prevProps.altrpresponses.getData();\r\n    }\r\n\r\n    if (content_calculation.indexOf(\"altrpstorage\") !== -1) {\r\n      context.altrpstorage = getDataFromLocalStorage(\"altrpstorage\", {});\r\n    }\r\n\r\n    // if(_.isEqual(prevContext, context)){\r\n    //   return;\r\n    // }\r\n\r\n    if (\r\n      _.isEqual(prevProps.currentDataStorage, this.props.currentDataStorage) &&\r\n      _.isEqual(prevProps.currentUser, this.props.currentUser) &&\r\n      _.isEqual(prevProps.formsStore, this.props.formsStore) &&\r\n      _.isEqual(prevProps.altrpPageState, this.props.altrpPageState) &&\r\n      _.isEqual(prevProps.altrpMeta, this.props.altrpMeta) &&\r\n      _.isEqual(prevProps.altrpresponses, this.props.altrpresponses) &&\r\n      _.isEqual(prevProps.currentModel, this.props.currentModel)\r\n    ) {\r\n      return;\r\n    }\r\n    if (\r\n      !_.isEqual(prevProps.formsStore, this.props.formsStore) &&\r\n      `${formId}.${fieldName}` === altrpforms.changedField\r\n    ) {\r\n      return;\r\n    }\r\n    let value = \"\";\r\n    try {\r\n      content_calculation = content_calculation\r\n        .replace(/}}/g, \"')\")\r\n        .replace(/{{/g, \"_.get(context, '\");\r\n      value = eval(content_calculation);\r\n      if (value === this.state.value) {\r\n        return;\r\n      }\r\n      this.setState(\r\n        state => ({ ...state, value }),\r\n        () => {\r\n          this.dispatchFieldValueToStore(value);\r\n        }\r\n      );\r\n    } catch (e) {\r\n      console.error(\r\n        \"Evaluate error in Input \" + e.message,\r\n        this.props.element.getId()\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Обновляет опции для селекта при обновлении данных, полей формы\r\n   */\r\n  async updateOptions() {\r\n    {\r\n      let formId = this.props.element.getFormId();\r\n      let paramsForUpdate = this.props.element.getSettings(\"params_for_update\");\r\n      let formData = _.get(this.props.formsStore, [formId], {});\r\n      paramsForUpdate = parseParamsFromString(\r\n        paramsForUpdate,\r\n        new AltrpModel(formData)\r\n      );\r\n      /**\r\n       * Сохраняем параметры запроса, и если надо обновляем опции\r\n       */\r\n      let options = [...this.state.options];\r\n      if (!_.isEqual(paramsForUpdate, this.state.paramsForUpdate)) {\r\n        if (!_.isEmpty(paramsForUpdate)) {\r\n          if (this.props.element.getSettings(\"params_as_filters\", false)) {\r\n            paramsForUpdate = JSON.stringify(paramsForUpdate);\r\n            options = await new Resource({\r\n              route: this.getRoute()\r\n            }).getQueried({ filters: paramsForUpdate });\r\n          } else {\r\n            options = await new Resource({ route: this.getRoute() }).getQueried(\r\n              paramsForUpdate\r\n            );\r\n          }\r\n          options = !_.isArray(options) ? options.data : options;\r\n          options = _.isArray(options) ? options : [];\r\n        } else if (this.state.paramsForUpdate) {\r\n          options = await new Resource({ route: this.getRoute() }).getAll();\r\n          options = !_.isArray(options) ? options.data : options;\r\n          options = _.isArray(options) ? options : [];\r\n        }\r\n        // console.log(options);\r\n        // console.log(this.state.value);\r\n        this.setState(state => ({\r\n          ...state,\r\n          paramsForUpdate,\r\n          options\r\n        }));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Изменение значения в виджете\r\n   * @param e\r\n   * @param  editor для получения изменений из CKEditor\r\n   */\r\n  onChange(e, editor = null) {\r\n    let value = \"\";\r\n    let valueToDispatch;\r\n    const settings = this.props.element.getSettings();\r\n    if (e && e.target) {\r\n      if (this.props.element.getSettings(\"content_type\") === \"checkbox\") {\r\n        let inputs = document.getElementsByName(e.target.name);\r\n        value = [];\r\n        inputs.forEach(input => {\r\n          if (input.checked) {\r\n            value.push(input.value);\r\n          }\r\n        });\r\n      } else if (settings.content_type === \"accept\") {\r\n        let _value = e.target.checked;\r\n        let trueValue =\r\n          this.props.element.getSettings(\"accept_checked\") || true;\r\n        let falseValue =\r\n          this.props.element.getSettings(\"accept_unchecked\") || false;\r\n        falseValue = valueReplacement(falseValue);\r\n        trueValue = valueReplacement(trueValue);\r\n        valueToDispatch = _value ? trueValue : falseValue;\r\n      } else {\r\n        value = e.target.value;\r\n      }\r\n    }\r\n\r\n    if (e && e.value) {\r\n      value = e.value;\r\n    }\r\n    if (_.get(editor, \"getData\")) {\r\n      value = `<div class=\"ck ck-content\" style=\"width:100%\">${editor.getData()}</div>`;\r\n    }\r\n    if (_.isArray(e)) {\r\n      value = _.cloneDeep(e);\r\n    }\r\n    if (this.props.element.getSettings(\"content_type\") === \"select2\") {\r\n      if (this.props.element.getSettings(\"select2_multiple\", false) && !e) {\r\n        value = [];\r\n      }\r\n      if (this.props.element.getSettings(\"select2_multiple\", false)) {\r\n        value = value.map(item => item.value);\r\n      }\r\n    }\r\n    if (\r\n      this.props.element.getSettings(\"content_options_nullable\") &&\r\n      e &&\r\n      e.value === \"<null>\"\r\n    ) {\r\n      value = null;\r\n    }\r\n\r\n    let timestamp = this.props.element.getSettings(\"content_timestamp\");\r\n    let isDate = this.state.settings.content_type === \"date\";\r\n\r\n    if (isDate && timestamp && value != \"\") {\r\n      value = new Date(value).getTime(); // timestamp\r\n    }\r\n    this.setState(\r\n      state => ({\r\n        ...state,\r\n        value\r\n      }),\r\n      () => {\r\n        /**\r\n         * Обновляем хранилище только если не текстовое поле\r\n         */\r\n\r\n        const change_actions = this.props.element.getSettings(\"change_actions\");\r\n        const change_change_end = this.props.element.getSettings(\r\n          \"change_change_end\"\r\n        );\r\n        const change_change_end_delay = this.props.element.getSettings(\r\n          \"change_change_end_delay\"\r\n        );\r\n\r\n        if (\r\n          [\"text\", \"email\", \"phone\", \"tel\", \"number\", \"password\"].indexOf(\r\n            this.state.settings.content_type\r\n          ) === -1\r\n        ) {\r\n          this.dispatchFieldValueToStore(\r\n            valueToDispatch !== undefined ? valueToDispatch : value,\r\n            true\r\n          );\r\n        }\r\n        if (change_actions && !change_change_end && !isEditor()) {\r\n          this.debounceDispatch(\r\n            valueToDispatch !== undefined ? valueToDispatch : value\r\n          );\r\n        }\r\n        if (change_actions && change_change_end && !isEditor()) {\r\n          this.timeInput && clearTimeout(this.timeInput);\r\n          this.timeInput = setTimeout(() => {\r\n            this.debounceDispatch(\r\n              valueToDispatch !== undefined ? valueToDispatch : value\r\n            );\r\n          }, change_change_end_delay);\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  debounceDispatch = _.debounce(\r\n    value => this.dispatchFieldValueToStore(value, true),\r\n    150\r\n  );\r\n\r\n  // inputKeyBetween = setTimeout(\r\n  //   value => this.dispatchFieldValueToStore(value, true),\r\n  //   this.props.element.getSettings(\"change_change_end_delay\")\r\n  // );\r\n  /**\r\n   * получить опции\r\n   */\r\n  getOptions() {\r\n    let options = [...this.state.options];\r\n    const optionsDynamicSetting = this.props.element.getDynamicSetting(\r\n      \"content_options\"\r\n    );\r\n    if (optionsDynamicSetting) {\r\n      options = convertData(optionsDynamicSetting, options);\r\n    }\r\n    if (!this.props.element.getSettings(\"sort_default\")) {\r\n      options = _.sortBy(options, o => o && (o.label ? o.label.toString() : o));\r\n    }\r\n    return options;\r\n  }\r\n\r\n  /**\r\n   * Для действие по фокусу\r\n   * @param e\r\n   * @return {Promise<void>}\r\n   */\r\n\r\n  onFocus = async e => {\r\n    const focus_actions = this.props.element.getSettings(\"focus_actions\");\r\n\r\n    if (focus_actions && !isEditor()) {\r\n      const actionsManager = (\r\n        await import(\r\n          /* webpackChunkName: 'ActionsManager' */\r\n          \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\r\n        )\r\n      ).default;\r\n      await actionsManager.callAllWidgetActions(\r\n        this.props.element.getIdForAction(),\r\n        \"focus\",\r\n        focus_actions,\r\n        this.props.element\r\n      );\r\n    }\r\n  };\r\n  /**\r\n   * Потеря фокуса для оптимизации\r\n   * @param  e\r\n   * @param  editor для получения изменений из CKEditor\r\n   */\r\n  onBlur = async (e, editor = null) => {\r\n    if (\r\n      [\"text\", \"email\", \"phone\", \"tel\", \"number\", \"password\"].indexOf(\r\n        this.state.settings.content_type\r\n      ) !== -1\r\n    ) {\r\n      this.dispatchFieldValueToStore(e.target.value, true);\r\n    }\r\n    if (_.get(editor, \"getData\")) {\r\n      this.dispatchFieldValueToStore(editor.getData(), true);\r\n    }\r\n    if (this.props.element.getSettings(\"actions\", []) && !isEditor()) {\r\n      const actionsManager = (\r\n        await import(\r\n          /* webpackChunkName: 'ActionsManager' */\r\n          \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\r\n        )\r\n      ).default;\r\n      await actionsManager.callAllWidgetActions(\r\n        this.props.element.getIdForAction(),\r\n        \"blur\",\r\n        this.props.element.getSettings(\"actions\", []),\r\n        this.props.element\r\n      );\r\n    }\r\n  };\r\n  /**\r\n   * Передадим значение в хранилище формы\r\n   * @param {*} value\r\n   * @param {boolean} userInput true - имзенилось пользователем\r\n   */\r\n  dispatchFieldValueToStore = async (value, userInput = false) => {\r\n    let formId = this.props.element.getFormId();\r\n    let fieldName = this.props.element.getFieldId();\r\n    if (fieldName.indexOf(\"{{\") !== -1) {\r\n      fieldName = replaceContentWithData(fieldName);\r\n    }\r\n    if (_.isObject(this.props.appStore) && fieldName && formId) {\r\n      this.props.appStore.dispatch(\r\n        changeFormFieldValue(fieldName, value, formId, userInput)\r\n      );\r\n      if (userInput) {\r\n        const change_actions = this.props.element.getSettings(\"change_actions\");\r\n\r\n        if (change_actions && !isEditor()) {\r\n          const actionsManager = (\r\n            await import(\r\n              /* webpackChunkName: 'ActionsManager' */\r\n              \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\r\n            )\r\n          ).default;\r\n          await actionsManager.callAllWidgetActions(\r\n            this.props.element.getIdForAction(),\r\n            \"change\",\r\n            change_actions,\r\n            this.props.element\r\n          );\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Обработка добавления опции по ajax\r\n   * @param {SyntheticKeyboardEvent} e\r\n   */\r\n  createItem = async e => {\r\n    const keyCode = e.keyCode;\r\n    const { value: inputValue } = e.target;\r\n    if (keyCode !== 13 || !inputValue) {\r\n      return;\r\n    }\r\n    const {\r\n      create_url,\r\n      create_label,\r\n      create_data,\r\n      select2_multiple\r\n    } = this.props.element.getSettings();\r\n    if (!create_label && !create_url) {\r\n      return;\r\n    }\r\n    const currentModel = this.props.element.getCurrentModel();\r\n    let data = parseParamsFromString(create_data, currentModel, true);\r\n    data[create_label] = inputValue;\r\n    let url = parseURLTemplate(create_url, currentModel.getData());\r\n    this.setState(state => ({ ...state, isDisabled: true }));\r\n    try {\r\n      const resource = new Resource({\r\n        route: url\r\n      });\r\n      let res = await resource.post(data);\r\n      if (res.success && _.get(res, \"data.id\")) {\r\n        let newOption = {\r\n          label: inputValue,\r\n          value: _.get(res, \"data.id\")\r\n        };\r\n        this.setState(\r\n          state => ({ ...state, isDisabled: false }),\r\n          () => {\r\n            let options = [...this.state.options];\r\n            options.unshift(newOption);\r\n            let value = this.state.value;\r\n            if (select2_multiple) {\r\n              value = value ? [...value] : [];\r\n              value.push(_.get(res, \"data.id\"));\r\n            } else {\r\n              value = _.get(res, \"data.id\");\r\n            }\r\n            this.setState(\r\n              state => ({ ...state, options, value }),\r\n              () => {\r\n                const selectStateManager = _.get(\r\n                  this,\r\n                  \"altrpSelectRef.current.selectRef.current\"\r\n                );\r\n                if (selectStateManager) {\r\n                  selectStateManager.setState({\r\n                    menuIsOpen: false,\r\n                    inputValue: \"\"\r\n                  });\r\n                }\r\n              }\r\n            );\r\n          }\r\n        );\r\n      }\r\n      this.setState(state => ({ ...state, isDisabled: false }));\r\n    } catch (error) {\r\n      console.error(error);\r\n      this.setState(state => ({ ...state, isDisabled: false }));\r\n    }\r\n  };\r\n  // shouldComponentUpdate(nextProps) {\r\n    // console.log(nextProps);\r\n\r\n    // console.log(nextProps.ElementWrapper=== this.props.ElementWrapper);\r\n    // console.log(nextProps.altrpMeta=== this.props.altrpMeta);\r\n    // console.log(nextProps.altrpPageState=== this.props.altrpPageState);\r\n    // console.log(nextProps.altrpresponses=== this.props.altrpresponses);\r\n    // console.log(nextProps.appStore=== this.props.appStore);\r\n    // console.log(nextProps.baseRender=== this.props.baseRender);\r\n    // console.log(nextProps.children=== this.props.children);\r\n    // console.log(nextProps.currentDataStorage=== this.props.currentDataStorage);\r\n    // console.log(nextProps.currentModel=== this.props.currentModel);\r\n    // console.log(nextProps.currentScreen=== this.props.currentScreen);\r\n    // console.log(nextProps.currentUser=== this.props.currentUser);\r\n    // console.log(nextProps.element=== this.props.element);\r\n    // console.log(nextProps.elementDisplay=== this.props.elementDisplay);\r\n    // console.log(nextProps.formsStore=== this.props.formsStore);\r\n    // console.log(nextProps.match=== this.props.match);\r\n    // console.log(nextProps.match);\r\n    // console.log(nextProps.rootElement=== this.props.rootElement);\r\n    // console.log(nextProps.rootElement);\r\n    // console.log(nextProps.updateToken=== this.props.updateToken);\r\n  //   return true;\r\n  // }\r\n  /**\r\n   * Взовращает имя для атрибута name\r\n   * @return {string}\r\n   */\r\n  getName() {\r\n    return `${this.props.element.getFormId()}[${this.props.element.getFieldId()}]`;\r\n  }\r\n\r\n  render() {\r\n    let label = null;\r\n    const settings = this.props.element.getSettings();\r\n    const {\r\n      options_sorting,\r\n      content_readonly,\r\n      image_select_options,\r\n      select2_multiple: isMultiple,\r\n      label_icon\r\n    } = settings;\r\n\r\n    let value = this.state.value;\r\n\r\n    if (\r\n      _.get(value, \"dynamic\") &&\r\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\r\n    ) {\r\n      value = this.getContent(\"content_default_value\");\r\n    }\r\n    /**\r\n     * Пока динамический контент загружается (Еесли это динамический контент),\r\n     * нужно вывести пустую строку\r\n     */\r\n    if (value && value.dynamic) {\r\n      value = \"\";\r\n    }\r\n    let classLabel = \"\";\r\n    let styleLabel = {};\r\n    const content_label_position_type = this.props.element.getResponsiveSetting(\r\n      \"content_label_position_type\"\r\n    );\r\n    switch (content_label_position_type) {\r\n      case \"top\":\r\n        styleLabel = {\r\n          marginBottom: this.state.settings.label_style_spacing\r\n            ? this.state.settings.label_style_spacing.size +\r\n              this.state.settings.label_style_spacing.unit\r\n            : 2 + \"px\"\r\n        };\r\n        classLabel = \"\";\r\n        break;\r\n      case \"bottom\":\r\n        styleLabel = {\r\n          marginTop: this.state.settings.label_style_spacing\r\n            ? this.state.settings.label_style_spacing.size +\r\n              this.state.settings.label_style_spacing.unit\r\n            : 2 + \"px\"\r\n        };\r\n        classLabel = \"\";\r\n        break;\r\n      case \"left\":\r\n        styleLabel = {\r\n          marginRight: this.state.settings.label_style_spacing\r\n            ? this.state.settings.label_style_spacing.size +\r\n              this.state.settings.label_style_spacing.unit\r\n            : 2 + \"px\"\r\n        };\r\n        classLabel = \"altrp-field-label-container-left\";\r\n        // this.label.current.classList.add(\"hello\")\r\n\r\n        break;\r\n      case \"absolute\":\r\n        styleLabel = {\r\n          position: \"absolute\",\r\n          zIndex: 2\r\n        };\r\n        classLabel = \"\";\r\n        break;\r\n    }\r\n\r\n    if (this.state.settings.content_label) {\r\n      label = (\r\n        <div\r\n          className={\"altrp-field-label-container \" + classLabel}\r\n          style={styleLabel}\r\n        >\r\n          <label\r\n            className={`altrp-field-label ${\r\n              this.state.settings.content_required\r\n                ? \"altrp-field-label--required\"\r\n                : \"\"\r\n            }`}\r\n          >\r\n            {this.state.settings.content_label}\r\n          </label>\r\n          {label_icon && label_icon.assetType && (\r\n            <span className=\"altrp-label-icon\">\r\n              {renderAssetIcon(label_icon)}\r\n            </span>\r\n          )}\r\n        </div>\r\n      );\r\n    } else {\r\n      label = null;\r\n    }\r\n\r\n    let autocomplete = \"off\";\r\n    if (this.state.settings.content_autocomplete) {\r\n      autocomplete = \"on\";\r\n    } else {\r\n      autocomplete = \"off\";\r\n    }\r\n\r\n    let input = null;\r\n    switch (this.state.settings.content_type) {\r\n      case \"select\":\r\n        {\r\n          let options = this.getOptions();\r\n          input = (\r\n            <select\r\n              value={value || \"\"}\r\n              onFocus={this.onFocus}\r\n              name={this.getName()}\r\n              onChange={this.onChange}\r\n              onBlur={this.onBlur}\r\n              onKeyDown={this.handleEnter}\r\n              id={this.state.settings.position_css_id}\r\n              className={\r\n                \"altrp-field \" + this.state.settings.position_css_classes\r\n              }\r\n            >\r\n              {this.state.settings.content_options_nullable ? (\r\n                <option value=\"\" />\r\n              ) : (\r\n                \"\"\r\n              )}\r\n\r\n              {(options_sorting\r\n                ? sortOptions(options, options_sorting)\r\n                : options\r\n              ).map(option => (\r\n                <option value={option.value} key={option.value}>\r\n                  {option.label}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          );\r\n        }\r\n        break;\r\n      case \"select2\":\r\n        {\r\n          input = this.renderSelect2();\r\n        }\r\n        break;\r\n      case \"radio\":\r\n      case \"checkbox\":\r\n        {\r\n          input = this.renderRepeatedInput();\r\n        }\r\n        break;\r\n      case \"wysiwyg\":\r\n        {\r\n          input = this.renderWysiwyg();\r\n        }\r\n        break;\r\n      case \"textarea\":\r\n        input = (\r\n          <textarea\r\n            value={value || \"\"}\r\n            readOnly={content_readonly}\r\n            autoComplete={autocomplete}\r\n            placeholder={this.state.settings.content_placeholder}\r\n            className={\r\n              \"altrp-field \" + this.state.settings.position_css_classes\r\n            }\r\n            onChange={this.onChange}\r\n            onBlur={this.onBlur}\r\n            id={this.state.settings.position_css_id}\r\n          />\r\n        );\r\n        break;\r\n      case \"image_select\":\r\n        input = (\r\n          <AltrpImageSelect\r\n            options={image_select_options}\r\n            value={this.state.value}\r\n            changeHandler={value => this.setState({ value })}\r\n            isMultiple={isMultiple}\r\n          />\r\n        );\r\n        break;\r\n      case \"accept\":\r\n        input = this.renderAcceptInput();\r\n        break;\r\n      default: {\r\n        const isClearable = this.state.settings.content_clearable;\r\n        const isDate = this.state.settings.content_type === \"date\";\r\n        const timestamp = this.props.element.getSettings(\"content_timestamp\");\r\n        if (isDate && timestamp) {\r\n          const isValid = moment.unix(value).isValid();\r\n          if (isValid) {\r\n            try {\r\n              value = moment.unix(value / 1000).format(\"YYYY-MM-DD\");\r\n            } catch (error) {\r\n              console.log(error);\r\n            }\r\n          }\r\n        }\r\n        input = (\r\n          <div className=\"altrp-input-wrapper\">\r\n            <AltrpInput\r\n              type={this.state.settings.content_type}\r\n              name={this.getName()}\r\n              value={value || \"\"}\r\n              element={this.props.element}\r\n              readOnly={content_readonly}\r\n              autoComplete={autocomplete}\r\n              placeholder={this.state.settings.content_placeholder}\r\n              className={\r\n                \"altrp-field \" + this.state.settings.position_css_classes\r\n              }\r\n              settings={this.props.element.getSettings()}\r\n              onKeyDown={this.handleEnter}\r\n              onChange={this.onChange}\r\n              onBlur={this.onBlur}\r\n              onFocus={this.onFocus}\r\n              id={this.state.settings.position_css_id}\r\n            />\r\n            {isClearable && (\r\n              <button\r\n                className=\"input-clear-btn\"\r\n                onClick={() => this.setState({ value: this.defaultValue })}\r\n              >\r\n                ✖\r\n              </button>\r\n            )}\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n    return (\r\n      <AltrpFieldContainer\r\n        settings={settings}\r\n        className={\r\n          this.state.settings.content_type !== \"image_select\"\r\n            ? \"altrp-field-container \"\r\n            : \"\" + classLabel\r\n        }\r\n      >\r\n        {content_label_position_type === \"top\" ? label : \"\"}\r\n        {content_label_position_type === \"left\" ? label : \"\"}\r\n        {content_label_position_type === \"right\" ? label : \"\"}\r\n        {content_label_position_type === \"absolute\" ? label : \"\"}\r\n        {/* .altrp-field-label-container */}\r\n        {input}\r\n        {content_label_position_type === \"bottom\" ? label : \"\"}\r\n      </AltrpFieldContainer>\r\n    );\r\n  }\r\n  /**\r\n   * Выводит input type=accept\r\n   */\r\n  renderAcceptInput() {\r\n    const settings = this.props.element.getSettings();\r\n    let value = this.state.value;\r\n    let trueValue = this.props.element.getSettings(\"accept_checked\") || true;\r\n    let falseValue =\r\n      this.props.element.getSettings(\"accept_unchecked\") || false;\r\n    if (value === trueValue) {\r\n      value = true;\r\n    } else if (value === falseValue) {\r\n      value = false;\r\n    }\r\n    return (\r\n      <div className={`altrp-field-option ${value ? \"active\" : \"\"}`}>\r\n        <span className=\"altrp-field-option-span\">\r\n          <input\r\n            type=\"checkbox\"\r\n            name={`${this.props.element.getFormId()}[${this.props.element.getFieldId()}]`}\r\n            className={`altrp-field-option__input ${value ? \"active\" : \"\"}`}\r\n            onChange={this.onChange}\r\n            checked={!!value}\r\n            id={`${this.props.element.getFormId()}[${this.props.element.getFieldId()}]`}\r\n          />\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n  /**\r\n   * Выводит input type=checkbox|radio\r\n   */\r\n  renderRepeatedInput() {\r\n    const { options = [] } = this.state;\r\n    let { value = \"\" } = this.state;\r\n    const fieldName =\r\n      this.props.element.getFieldId() ||\r\n      Math.random()\r\n        .toString(36)\r\n        .substr(2, 9);\r\n    const formID =\r\n      this.props.element.getFormId() ||\r\n      Math.random()\r\n        .toString(36)\r\n        .substr(2, 9);\r\n    const inputType = this.props.element.getSettings(\"content_type\", \"radio\");\r\n    return (\r\n      <div className=\"altrp-field-subgroup\">\r\n        {options.map((option, idx) => {\r\n          let checked = false;\r\n          /**\r\n           * Если значение или опция число, то приведем к числу перед сравнением\r\n           */\r\n          if (inputType === \"radio\") {\r\n            checked = altrpCompare(value, option.value, \"==\");\r\n          } else {\r\n            value = _.isArray(value) ? value : value ? [value] : [];\r\n            checked = altrpCompare(option.value, value, \"in\");\r\n          }\r\n          return (\r\n            <div\r\n              className={`altrp-field-option ${checked ? \"active\" : \"\"}`}\r\n              key={`${fieldName}-${idx}`}\r\n            >\r\n              <span className=\"altrp-field-option-span\">\r\n                <input\r\n                  type={inputType}\r\n                  value={option.value}\r\n                  name={`${formID}-${fieldName}`}\r\n                  className={`altrp-field-option__input ${\r\n                    checked ? \"active\" : \"\"\r\n                  }`}\r\n                  onChange={this.onChange}\r\n                  checked={checked}\r\n                  id={`${formID}-${fieldName}-${idx}`}\r\n                />\r\n              </span>\r\n              <label\r\n                htmlFor={`${formID}-${fieldName}-${idx}`}\r\n                className=\"altrp-field-option__label\"\r\n              >\r\n                {option.label}\r\n              </label>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Выводит инпут-select2, используя компонент AltrpSelect\r\n   */\r\n  renderSelect2() {\r\n    const {\r\n      content_options_nullable,\r\n      nulled_option_title,\r\n      content_placeholder\r\n    } = this.props.element.getSettings();\r\n\r\n    let options = this.getOptions();\r\n    let value = this.state.value;\r\n    if (\r\n      _.get(value, \"dynamic\") &&\r\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\r\n    ) {\r\n      value = this.getContent(\"content_default_value\", true);\r\n    }\r\n    /**\r\n     * Пока динамический контент загружается, нужно вывести пустую строку\r\n     */\r\n    if (value && value.dynamic) {\r\n      value = \"\";\r\n    }\r\n    if (!this.props.element.getSettings(\"select2_multiple\", false)) {\r\n      options.forEach(option => {\r\n        if (!option) {\r\n          return;\r\n        }\r\n        if (option.value === value) {\r\n          value = { ...option };\r\n        }\r\n        if (_.isArray(option.options)) {\r\n          option.options.forEach(option => {\r\n            if (option.value == value) {\r\n              value = { ...option };\r\n            }\r\n          });\r\n        }\r\n      });\r\n    } else {\r\n      /**\r\n       * Если включен мультиселект\r\n       */\r\n      value = value ? (_.isArray(value) ? value : [value]) : [];\r\n      value = value.map(v => {\r\n        let _v = v;\r\n        options.forEach(option => {\r\n          if (option.value && option.value.toString() === _v.toString()) {\r\n            _v = { ...option };\r\n          }\r\n          if (_.isArray(option.options)) {\r\n            option.options.forEach(option => {\r\n              if (option.value && option.value.toString() === _v.toString()) {\r\n                _v = { ...option };\r\n              }\r\n            });\r\n          }\r\n        });\r\n        return _v;\r\n      });\r\n      /**\r\n       * Добавим опцию, если для какого-то значения ее нет\r\n       */\r\n      value.forEach(valueItem => {\r\n        if (!_.isObject(valueItem)) {\r\n          options.push({\r\n            value: valueItem,\r\n            label: valueItem\r\n          });\r\n        }\r\n      });\r\n    }\r\n    /**\r\n     * Сортируем опции\r\n     * @type {Array|*}\r\n     */\r\n    if (\r\n      content_options_nullable &&\r\n      (this.props.element.getSettings(\"content_type\") !== \"select2\" ||\r\n        this.props.element.getSettings(\"select2_multiple\") !== true)\r\n    ) {\r\n      options = _.union(\r\n        [{ label: nulled_option_title, value: \"<null>\" }],\r\n        options\r\n      );\r\n    }\r\n    const select2Props = {\r\n      className: \"altrp-field-select2\",\r\n      onFocus: this.onFocus,\r\n      element: this.props.element,\r\n      classNamePrefix: this.props.element.getId() + \" altrp-field-select2\",\r\n      options,\r\n      name: this.props.element.getFieldId(),\r\n      ref: this.altrpSelectRef,\r\n      settings: this.props.element.getSettings(),\r\n      onChange: this.onChange,\r\n      onBlur: this.onBlur,\r\n      value: value || _.find(options, o => o && o.value == this.state.value),\r\n      isOptionSelected: option => {\r\n        if (_.isNumber(this.state.value) || _.isString(this.state.value)) {\r\n          return this.state.value == option.value;\r\n        }\r\n        return this.state.value && this.state.value.includes(option.value);\r\n      },\r\n      placeholder: content_placeholder,\r\n      isMulti: this.props.element.getSettings(\"select2_multiple\", false),\r\n      onKeyDown: this.handleEnter\r\n      // menuIsOpen: true,\r\n    };\r\n    return (\r\n      <div className=\"altrp-input-wrapper\">\r\n        <AltrpSelect {...select2Props} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderWysiwyg() {\r\n    return (\r\n      <CKeditor\r\n        onChange={this.onChange}\r\n        onBlur={this.onBlur}\r\n        changeText={this.dispatchFieldValueToStore}\r\n        text={this.getContent(\"content_default_value\")}\r\n        name={this.getName()}\r\n        readOnly={this.getContent(\"read_only\")}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputWidget;\r\n"],"sourceRoot":""}