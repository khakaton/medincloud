{"version":3,"sources":["webpack:///./resources/modules/admin/src/js/helpers.js","webpack:///./resources/modules/editor/src/js/classes/AltrpModel.js","webpack:///./resources/modules/editor/src/js/components/altrp-input/AltrpInputFile.js","webpack:///./resources/modules/editor/src/js/components/altrp-input/AltrpInput.js"],"names":["iconsManager","window","IconsManager","AltrpModel","data","this","cloneDeep","clone","isEmpty","name","defaultValue","get","has","value","getData","set","unset","props","labelClick","e","isEditor","preventDefault","deleteItem","idx","files","state","splice","filesForDisplay","length","setState","console","log","_","each","f","fr","FileReader","readAsDataURL","onload","push","src","result","alt","isFunction","onChange","target","FileList","types","settings","content_accept","split","_f","forEach","type","trim","replace","indexOf","multiple","select2_multiple","placeholder","content_placeholder","accept","classes","className","join","onClick","renderIcon","renderAsset","map","key","Component","isValid","checkValidity","mask","isValueMatchMask","prevProps","prevState","content_mask","Input","altrpLibs","Blueprint","InputGroup","content_type","mask_mismatch_message","inputProps","m","guide","onBlur","validateEmail"],"mappings":"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","file":"757.7a73b58525eee7352bb9.bundle.js","sourcesContent":["import IconsManager from \"../../../editor/src/js/classes/modules/IconsManager\";\r\nimport Resource from \"../../../editor/src/js/classes/Resource\";\r\nimport { isEmpty } from \"lodash\";\r\n\r\nexport function redirect(url) {\r\n  url = url || '/';\r\n  window.location.assign(url);\r\n}\r\nexport function generateId() {\r\n  return '_' + Math.random().toString(36).substr(2, 9);\r\n}\r\n/**\r\n * @return {IconsManager}\r\n* */\r\nexport function iconsManager() {\r\n  if (!window.iconsManager) {\r\n    window.iconsManager = new IconsManager();\r\n  }\r\n  return window.iconsManager;\r\n}\r\n\r\nexport async function logout() {\r\n  let res = await (new Resource({ route: '/logout' })).post();\r\n  redirect(res.location)\r\n}\r\n\r\nexport function pageReload() {\r\n  document.location.reload(true);\r\n}\r\n\r\nconst a = { \"Ё\": \"Yo\", \"Й\": \"I\", \"Ц\": \"Ts\", \"У\": \"U\", \"К\": \"K\", \"Е\": \"E\", \"Н\": \"N\", \"Г\": \"G\", \"Ш\": \"Sh\", \"Щ\": \"Sch\", \"З\": \"Z\", \"Х\": \"H\", \"Ъ\": \"\", \"ё\": \"yo\", \"й\": \"i\", \"ц\": \"ts\", \"у\": \"u\", \"к\": \"k\", \"е\": \"e\", \"н\": \"n\", \"г\": \"g\", \"ш\": \"sh\", \"щ\": \"sch\", \"з\": \"z\", \"х\": \"h\", \"ъ\": \"\", \"Ф\": \"F\", \"Ы\": \"I\", \"В\": \"V\", \"А\": \"a\", \"П\": \"P\", \"Р\": \"R\", \"О\": \"O\", \"Л\": \"L\", \"Д\": \"D\", \"Ж\": \"ZH\", \"Э\": \"E\", \"ф\": \"f\", \"ы\": \"i\", \"в\": \"v\", \"а\": \"a\", \"п\": \"p\", \"р\": \"r\", \"о\": \"o\", \"л\": \"l\", \"д\": \"d\", \"ж\": \"zh\", \"э\": \"e\", \"Я\": \"Ya\", \"Ч\": \"CH\", \"С\": \"S\", \"М\": \"M\", \"И\": \"I\", \"Т\": \"T\", \"Ь\": \"\", \"Б\": \"B\", \"Ю\": \"YU\", \"я\": \"ya\", \"ч\": \"ch\", \"с\": \"s\", \"м\": \"m\", \"и\": \"i\", \"т\": \"t\", \"ь\": \"\", \"б\": \"b\", \"ю\": \"yu\" };\r\n\r\n/**\r\n * Транслитерация\r\n * @param {string}str\r\n * @return {string}\r\n */\r\nexport function transliterate(str) {\r\n  if (!str) {\r\n    return \"\";\r\n  }\r\n  return str.split('').map(function (char) {\r\n    return _.isUndefined(a[char]) ? char : a[char];\r\n  }).join(\"\");\r\n}\r\n\r\n/**\r\n * Парсит строку в name для БД\r\n * @param {string}str\r\n * @return {string}\r\n */\r\nexport function titleToName(str) {\r\n  str = transliterate(str);\r\n  return str.toLowerCase().replace(/^\\d+/, '').replace(/[^\\d\\w]/g, '_');\r\n\r\n}\r\n\r\nexport function titleToPath(str) {\r\n  str = transliterate(str);\r\n  return str.toLowerCase().replace(/^\\d+/, '').replace(/[^\\d\\w]/g, '-');\r\n\r\n}\r\n/** @function objectDeepCleaning\r\n  * Удаляет все свойства id, и чистит settings (пока нет) todo: нужна оптимизация\r\n  * @param {object} collection\r\n  * @return {object} Объект после удаления всех свойств id, и чистки settings\r\n */\r\nexport function objectDeepCleaning(collection) {\r\n  return collection;\r\n  if (typeof collection !== \"object\" || collection === null) return collection;\r\n  if (collection.id) delete collection.id;\r\n\r\n  if (Array.isArray(collection)) {\r\n    for (let index = 0; index < collection.length; index++) {\r\n      const element = collection[index];\r\n      objectDeepCleaning(element);\r\n    }\r\n  } else {\r\n    if (collection.hasOwnProperty(\"settings\")) deleteEmptyPropsDeep(collection.settings);\r\n    if (isEmpty(collection.settings)) delete collection.settings; // удаляем settings, если оно - пустой объект\r\n    for (const key in collection) {\r\n      if (collection.hasOwnProperty(key)) {\r\n        const element = collection[key];\r\n        objectDeepCleaning(element);\r\n      }\r\n    }\r\n  }\r\n  return collection;\r\n}\r\n/** @function deleteEmptyPropsDeep\r\n  * Удаляет в объекте все свойства, значения которых - null, или \"\", или {}\r\n  * @param {object} collection\r\n */\r\nexport function deleteEmptyPropsDeep(collection) {\r\n  const deleteProps = [];\r\n  for (const key in collection) {\r\n    if (collection[key] === null || collection[key] === \"\") {\r\n      deleteProps.push(key);\r\n    }\r\n    deleteProps.forEach(key => delete collection[key]);\r\n\r\n    if (typeof collection[key] === \"object\") {\r\n      deleteEmptyPropsDeep(collection[key]);\r\n      if (isEmpty(collection[key])) delete collection[key];\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport function buildPagesTree(pages) {\r\n  const level = 0;\r\n  const tree = [];\r\n  const roots = pages.filter(({ parent_page_id }) => parent_page_id === null);\r\n\r\n  if (!roots.length) return pages;\r\n\r\n  roots.forEach(root => {\r\n    tree.push(root);\r\n    treeRecursion(root.id, level + 1);\r\n  });\r\n\r\n  function treeRecursion(parentId, level) {\r\n    const children = pages.filter(({ parent_page_id }) => parent_page_id === parentId);\r\n    children.forEach(page => {\r\n      page.title = \"—\".repeat(level) + page.title;\r\n      tree.push(page);\r\n      treeRecursion(page.id, level + 1);\r\n    });\r\n  }\r\n\r\n  return tree;\r\n}\r\n\r\nexport function filterUsers(users, roleFilter) {\r\n  return users.filter(user => user.roles.some(role => role.id === roleFilter));\r\n}\r\n\r\n\r\nexport function sortUsers(users, sortingField, order) {\r\n  const sortedUsers = users.sort((a, b) => {\r\n    if (a[sortingField] < b[sortingField]) {\r\n      return -1;\r\n    }\r\n    if (a[sortingField] > b[sortingField]) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  });\r\n\r\n  return order === 'ASC' ? sortedUsers : sortedUsers.reverse();\r\n}","/**\r\n * Имеет интерфейс для доступы к свойствам data (любой вложенности)\r\n * @class AltrpModel\r\n */\r\nimport cloneDeep from 'lodash.clonedeep';\r\nimport get from 'lodash.get';\r\nimport set from 'lodash.set';\r\nimport has from 'lodash.has';\r\nimport unset from 'lodash.unset';\r\nimport isEmpty from 'lodash.isempty';\r\n// import {cloneDeep, get, set, has, unset, isString, isEmpty} from \"lodash\";\r\n\r\nclass AltrpModel {\r\n  constructor(data = {}) {\r\n    this.data = cloneDeep(data);\r\n  }\r\n\r\n  /**\r\n   * Возваращает объект данных\r\n   * @params {boolean} clone - клонировать или ссылку на данные\r\n   * @return {{}}\r\n   */\r\n  getData(clone = true) {\r\n    if(clone){\r\n      return cloneDeep(this.data);\r\n    }\r\n    return this.data;\r\n  }\r\n\r\n  /**\r\n   * Пустой ли объект\r\n   */\r\n  isEmpty(){\r\n    return isEmpty(this.data);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  getProperty(name, defaultValue = '') {\r\n    return get(this.data, name, defaultValue);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  hasProperty(name, defaultValue = '') {\r\n    return has(this.data, name);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {{}}\r\n   */\r\n  setProperty(name, value = '') {\r\n    if(value instanceof AltrpModel){\r\n      value = value.getData(false);\r\n    }\r\n    return set(this.data, name, value);\r\n  }\r\n  /**\r\n   * Удаляет свойства name\r\n   * @params {string} name\r\n   * @return {*}\r\n   */\r\n  unsetProperty(name) {\r\n    return unset(this.data, name);\r\n  }\r\n}\r\nwindow.AltrpModel = AltrpModel;\r\nexport default AltrpModel\r\n","import React, { Component } from \"react\";\r\nimport { iconsManager } from \"../../../../../admin/src/js/helpers\";\r\nimport { isEditor, renderAsset } from \"../../../../../front-app/src/js/helpers\";\r\n\r\nclass AltrpInputFile extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      filesForDisplay: [],\r\n      files: []\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Клик по леблу\r\n   * @param {{}} e\r\n   */\r\n  labelClick = e => {\r\n    if (isEditor()) {\r\n      e.preventDefault();\r\n    }\r\n  };\r\n  /**\r\n   * Удалить элемент\r\n   * @param e\r\n   * @param idx\r\n   */\r\n  deleteItem = (e, idx) => {\r\n    e.preventDefault();\r\n    let { files } = this.state;\r\n    files.splice(idx, 1);\r\n    let filesForDisplay = [];\r\n    if (!files.length) {\r\n      this.setState(state => ({ ...state, filesForDisplay, files }));\r\n    }\r\n    console.log(files);\r\n    _.each(files, f => {\r\n      let fr = new FileReader();\r\n      fr.readAsDataURL(f);\r\n      fr.onload = () => {\r\n        filesForDisplay.push({\r\n          src: fr.result,\r\n          alt: f.name || \"\"\r\n        });\r\n        if (filesForDisplay.length === files.length) {\r\n          this.setState(state => ({ ...state, filesForDisplay, files }));\r\n        }\r\n      };\r\n    });\r\n    if (_.isFunction(this.props.onChange)) {\r\n      this.props.onChange(files);\r\n    }\r\n  };\r\n  /**\r\n   * Обновление Файлов\r\n   * @param e\r\n   */\r\n  onChange = e => {\r\n    if (!e.target.files instanceof FileList) {\r\n      return;\r\n    }\r\n    let files = [];\r\n    let types = this.props.settings.content_accept\r\n      ? this.props.settings.content_accept.split(\",\")\r\n      : [];\r\n\r\n    _.each(e.target.files, _f => {\r\n      types.forEach(type => {\r\n        type = type.trim();\r\n        type = type.replace(\"*\", \"\");\r\n        if (_f.type.indexOf(type) === 0) {\r\n          files.push(_f);\r\n        }\r\n      });\r\n    });\r\n    let filesForDisplay = [];\r\n    if (!files.length) {\r\n      this.setState(state => ({ ...state, filesForDisplay, files }));\r\n    }\r\n    _.each(files, f => {\r\n      let fr = new FileReader();\r\n      fr.readAsDataURL(f);\r\n      fr.onload = () => {\r\n        filesForDisplay.push({\r\n          src: fr.result,\r\n          alt: f.name || \"\"\r\n        });\r\n        if (filesForDisplay.length === files.length) {\r\n          console.log(filesForDisplay);\r\n          this.setState(state => ({ ...state, filesForDisplay, files }));\r\n        }\r\n      };\r\n    });\r\n    if (_.isFunction(this.props.onChange)) {\r\n      this.props.onChange(files);\r\n    }\r\n  };\r\n  render() {\r\n    // console.log(this.props);\r\n    let multiple = this.props.settings.select2_multiple;\r\n    let placeholder = this.props.settings.content_placeholder || \"\";\r\n    const { filesForDisplay } = this.state;\r\n    let accept = this.props.settings.content_accept || \"\";\r\n    const classes = [\"altrp-field-file\"];\r\n    if (!filesForDisplay.length) {\r\n      classes.push(\"altrp-field-file_empty\");\r\n    }\r\n    return (\r\n      <label className={classes.join(\" \")} onClick={this.labelClick}>\r\n        <span className=\"altrp-field-file__placeholder\">{placeholder}</span>\r\n        <input\r\n          type=\"file\"\r\n          className=\"altrp-field-file__field\"\r\n          multiple={multiple}\r\n          accept={accept}\r\n          onChange={this.onChange}\r\n        />\r\n        <span className=\"altrp-field-file-media-list media-list\">\r\n          {isEditor() ? (\r\n            <span className=\"media-list-item\">\r\n              {iconsManager().renderIcon(\"times\", {\r\n                className: \"media-list-item__remove\"\r\n              })}\r\n              {renderAsset(\r\n                {},\r\n                {\r\n                  className: \"media-list-item__img\"\r\n                }\r\n              )}\r\n            </span>\r\n          ) : (\r\n            filesForDisplay.map((f, idx) => {\r\n              return (\r\n                <span key={idx} className=\"media-list-item\">\r\n                  {iconsManager().renderIcon(\"times\", {\r\n                    className: \"media-list-item__remove\",\r\n                    onClick: e => {\r\n                      this.deleteItem(e, idx);\r\n                    }\r\n                  })}\r\n                  <img className=\"media-list-item__img\" {...f} />\r\n                </span>\r\n              );\r\n            })\r\n          )}\r\n        </span>\r\n      </label>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AltrpInputFile;\r\n","import React, { Component } from \"react\";\r\nimport (\"./altrp-input.scss\");\r\nimport AltrpInputFile from \"./AltrpInputFile\";\r\nimport { isValueMatchMask, validateEmail } from \"../../../../../front-app/src/js/helpers\";\r\nimport MaskedInput from \"react-text-mask\";\r\n\r\nclass AltrpInput extends Component {\r\n  state = {\r\n    isValid: true\r\n  };\r\n\r\n  checkValidity = mask => {\r\n    if (! mask) return;\r\n    let value = this.props.value.replace(/_/g, '');\r\n    let isValid = ! ! (value.length && isValueMatchMask(value, mask));\r\n    this.setState(state => ({...state, isValid}));\r\n    _.set(this, 'props.element.maskIsValid', isValid);\r\n  };\r\n\r\n  /**\r\n   *\r\n   * @param {{}} prevProps\r\n   * @param {{}} prevState\r\n   */\r\n  componentDidUpdate(prevProps, prevState){\r\n    if((! this.props.value) && this.props.settings.content_mask && this.state.isValid){\r\n      this.setState(state => ({...state, isValid: false}));\r\n      _.set(this, 'props.element.maskIsValid', false);\r\n    }\r\n  }\r\n  render() {\r\n    let Input = window.altrpLibs.Blueprint.InputGroup;\r\n    const { isValid } = this.state;\r\n    const { content_type, content_mask, mask_mismatch_message } = this.props.settings;\r\n    const inputProps = {\r\n      ...this.props,\r\n    };\r\n    switch (content_type) {\r\n      case \"file\": {\r\n        return <AltrpInputFile {...inputProps} />;\r\n      }\r\n    }\r\n    if (content_mask) {\r\n      let mask = content_mask.split(\"\");\r\n      mask = mask.map(m => {\r\n        switch (m) {\r\n          case \"_\": {\r\n            return /\\d/;\r\n          }\r\n          case \"*\": {\r\n            return /\\S/;\r\n          }\r\n          default:\r\n            return m;\r\n        }\r\n      });\r\n      inputProps.mask = mask;\r\n      inputProps.guide = true;\r\n      inputProps.onBlur = e => {\r\n        this.props.onBlur(e);\r\n        // if (mask_mismatch_message) {\r\n        //   this.checkValidity(mask)\r\n        // }\r\n        this.checkValidity(mask)\r\n      };\r\n      inputProps.onChange = e => {\r\n        this.props.onChange(e);\r\n        if (! isValid) {\r\n          this.checkValidity(mask)\r\n        }\r\n      };\r\n      return (<>\r\n          <MaskedInput {...inputProps} />\r\n          {!isValid && mask_mismatch_message && <p className=\"mask-mismatch-message\">{mask_mismatch_message}</p>}\r\n        </>\r\n      );\r\n    }\r\n\r\n    if (content_type === 'email' && mask_mismatch_message) {\r\n      inputProps.onBlur = e => {\r\n        this.props.onBlur(e);\r\n        this.setState({ isValid: validateEmail(e.target.value) });\r\n      };\r\n\r\n      if (!isValid) {\r\n        inputProps.onChange = e => {\r\n          this.props.onChange(e);\r\n          this.setState({ isValid: validateEmail(e.target.value) });\r\n        };\r\n      }\r\n    }\r\n\r\n\r\n    return <>\r\n      <Input {...inputProps} />\r\n      {!isValid && content_type === 'email' && mask_mismatch_message &&\r\n        <p className=\"mask-mismatch-message\">{mask_mismatch_message}</p>}\r\n    </>;\r\n  }\r\n}\r\n\r\nexport default AltrpInput;\r\n"],"sourceRoot":""}