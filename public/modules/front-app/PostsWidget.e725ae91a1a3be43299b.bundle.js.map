{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/classes/AltrpModel.js","webpack:///./resources/modules/editor/src/js/classes/Query.js","webpack:///./resources/modules/editor/src/js/classes/AltrpModelUpdater.js","webpack:///./resources/modules/editor/src/js/classes/modules/ModelsManager.js","webpack:///./resources/modules/editor/src/js/components/widgets/PostsWidget.js"],"names":["AltrpModel","data","this","cloneDeep","clone","isEmpty","name","defaultValue","get","has","value","getData","set","unset","window","Query","component","modelName","dataSource","type","dataSourceName","pageSize","paginationType","orderingField","order","route","sql_name","context","_","props","currentModel","setProperty","currentDataStorage","setDefaultParams","parseParamsFromString","defaultParams","Resource","modelData","isArray","params","modelUpdater","console","log","modelManager","model_name","getModelId","getResource","getQueried","getParams","lastQuery","res","hasMore","assign","getDefaultParams","page","counterStart","parseInt","modelId","error","subscribers","resource","updating","callback","push","callSubscribers","updateData","forEach","subscriber","isFunction","updateModelData","filter","_s","extend","modelsStorage","altrpModel","AltrpModelUpdater","model","subscribeToUpdates","unsubscribe","updateWithData","PostsWidget","state","settings","element","getSettings","PostsComponent","children","elementDecorator","baseRender","render","then","setState","default","query","getProperty","table_query","showPosts","getFromModel","path","replace","getDataByPath","getCurrentModel","Component"],"mappings":"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","file":"PostsWidget.e725ae91a1a3be43299b.bundle.js","sourcesContent":["/**\r\n * Имеет интерфейс для доступы к свойствам data (любой вложенности)\r\n * @class AltrpModel\r\n */\r\nimport cloneDeep from 'lodash.clonedeep';\r\nimport get from 'lodash.get';\r\nimport set from 'lodash.set';\r\nimport has from 'lodash.has';\r\nimport unset from 'lodash.unset';\r\nimport isEmpty from 'lodash.isempty';\r\n// import {cloneDeep, get, set, has, unset, isString, isEmpty} from \"lodash\";\r\n\r\nclass AltrpModel {\r\n  constructor(data = {}) {\r\n    this.data = cloneDeep(data);\r\n  }\r\n\r\n  /**\r\n   * Возваращает объект данных\r\n   * @params {boolean} clone - клонировать или ссылку на данные\r\n   * @return {{}}\r\n   */\r\n  getData(clone = true) {\r\n    if(clone){\r\n      return cloneDeep(this.data);\r\n    }\r\n    return this.data;\r\n  }\r\n\r\n  /**\r\n   * Пустой ли объект\r\n   */\r\n  isEmpty(){\r\n    return isEmpty(this.data);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  getProperty(name, defaultValue = '') {\r\n    return get(this.data, name, defaultValue);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  hasProperty(name, defaultValue = '') {\r\n    return has(this.data, name);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {{}}\r\n   */\r\n  setProperty(name, value = '') {\r\n    if(value instanceof AltrpModel){\r\n      value = value.getData(false);\r\n    }\r\n    return set(this.data, name, value);\r\n  }\r\n  /**\r\n   * Удаляет свойства name\r\n   * @params {string} name\r\n   * @return {*}\r\n   */\r\n  unsetProperty(name) {\r\n    return unset(this.data, name);\r\n  }\r\n}\r\nwindow.AltrpModel = AltrpModel;\r\nexport default AltrpModel\r\n","import Resource from \"./Resource\";\r\nimport modelManager from \"../../../../editor/src/js/classes/modules/ModelsManager\";\r\nimport {parseParamsFromString} from \"../../../../front-app/src/js/helpers\";\r\n\r\nclass Query {\r\n\r\n  constructor(data, component){\r\n    this.component = component;\r\n    this.modelName = data.modelName || '';\r\n    this.dataSource = data.dataSource;\r\n    if(data.dataSource && data.dataSource.type === 'model_query'){\r\n      this.dataSourceName = data.dataSource.value || '';\r\n    }\r\n    this.pageSize = data.pageSize || 10;\r\n    this.paginationType = data.paginationType || 'pages';\r\n    this.orderingField = data.orderingField || 'name';\r\n    this.order = data.order || 'ASC';\r\n    this.route = `/ajax/models/${this.modelName || (data.dataSource ? data.dataSource.value : '')}`;\r\n    if(data.dataSource && data.dataSource.type === 'sql_datasource'){\r\n      this.route = data.dataSource.value;\r\n      this.dataSourceName = data.dataSource.sql_name || '';\r\n    }\r\n    /**\r\n     * @member {AltrpModel} context\r\n     */\r\n    let context = _.cloneDeep(component.props.currentModel);\r\n    context.setProperty('altrpdata', component.props.currentDataStorage.getData());\r\n    this.setDefaultParams(parseParamsFromString(data.defaultParams, context));\r\n  }\r\n  /**\r\n   *\r\n   * @return {Resource}\r\n   */\r\n  getResource(){\r\n    return new Resource({route: this.route});\r\n  }\r\n\r\n\r\n  /**\r\n   * Поулчить данные с модели, которая хранится в компоненте\r\n   * @param {{}} modelData\r\n   * @return {array}\r\n   */\r\n  getFromModel(modelData){\r\n    if(! modelData){\r\n      return [];\r\n    }\r\n    if(_.isArray(modelData[this.dataSource.value])){\r\n      return [...modelData[this.dataSource.value]];\r\n    } else {\r\n      return [{...modelData[this.dataSource.value]}]\r\n    }\r\n  }\r\n  /**\r\n   * Делает запрос с параметрами\r\n   * @param params\r\n   * @return {Promise}\r\n   */\r\n  async getQueried(params){\r\n    if(this.dataSource && (this.dataSource.type === 'has_many_relation')){\r\n      if(!this.modelUpdater){\r\n        this.modelUpdater = modelManager.subscribeToModelUpdates(this.dataSource.model_name, this.component.getModelId(), this.component);\r\n      } else {\r\n        console.log(this.modelUpdater);\r\n      }\r\n    } else {\r\n      this.lastQuery = (await this.getResource().getQueried(this.getParams(params)));\r\n      let res;\r\n      if(_.isArray(this.lastQuery)){\r\n        res = [...this.lastQuery];\r\n      } else if(_.isArray(this.lastQuery.data)){\r\n        res = this.lastQuery.data;\r\n      }\r\n      res.hasMore = this.lastQuery.hasMore;\r\n      return res;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Проверка есть ли еще\r\n   */\r\n  hasMore(){\r\n    if(! this.lastQuery){\r\n      return false;\r\n    }\r\n    return this.lastQuery.hasMore;\r\n  }\r\n\r\n  /**\r\n   * Задать параметры по умолчанию\r\n   * @params {{}} defaultParams\r\n   */\r\n  setDefaultParams(defaultParams = {}){\r\n    this.defaultParams = defaultParams;\r\n  }\r\n\r\n  /**\r\n   * Вернуть значения по умолчанию\r\n   * @return {{}}\r\n   */\r\n  getDefaultParams(){\r\n    this.defaultParams = this.defaultParams || {};\r\n    this.defaultParams.pageSize = this.pageSize;\r\n    return this.defaultParams;\r\n  }\r\n\r\n  /**\r\n   * Сливает параметры с параметрами по умолчанию\r\n   * @param {object} params\r\n   * @return {object}\r\n   */\r\n  getParams(params) {\r\n    params = {..._.assign(_.cloneDeep(this.getDefaultParams()), params)};\r\n    params.page = params.page || 1;\r\n    if(_.has(params, 'pageSize') && (params.pageSize <= 0)){\r\n      delete params.pageSize;\r\n      delete params.page;\r\n    }\r\n    return params;\r\n  }\r\n\r\n  /**\r\n   * Получить стартовое значение для счетчика, если нужно показать номер по порядку в таблице\r\n   * @param {int} page\r\n   */\r\n  getCounterStart(page){\r\n    let counterStart = 1;\r\n    if(this.pageSize < 1){\r\n      return counterStart;\r\n    }\r\n    page = parseInt(page) || 1;\r\n    counterStart = this.pageSize * (page - 1) + 1;\r\n    return counterStart;\r\n  }\r\n}\r\n\r\nexport default Query","/**\r\n * @class AltrpModelUpdater\r\n */\r\nimport Resource from \"./Resource\";\r\n\r\nclass AltrpModelUpdater {\r\n  /**\r\n   *\r\n   * @param {string} modelName\r\n   * @param {int} modelId\r\n   */\r\n  constructor(modelName, modelId){\r\n    this.modelName = modelName;\r\n    if(! modelId){\r\n      console.error('ид модели не указан!');\r\n    }\r\n    this.modelId = modelId;\r\n    this.data = null;\r\n    this.subscribers = [];\r\n    this.resource = new Resource({route: `/ajax/models/${this.modelName}`});\r\n    this.updating = false;\r\n  }\r\n\r\n  /**\r\n   * Подписывает функцию на обновления\r\n   * @param {function} callback\r\n   */\r\n  subscribeToUpdates(callback){\r\n    this.subscribers.push(callback);\r\n    if(this.updating){\r\n      return;\r\n    }\r\n    if(this.data) {\r\n      this.callSubscribers();\r\n    }\r\n    this.updateData();\r\n    // } else {\r\n    // }\r\n  }\r\n\r\n  /**\r\n   * Обновляет модель с сервера\r\n   */\r\n  async updateData(){\r\n    this.updating = true;\r\n    this.data = await this.resource.get(this.modelId);\r\n    this.updating = false;\r\n    this.callSubscribers();\r\n  }\r\n\r\n  /**\r\n   * Передать данные всем подписчикам\r\n   */\r\n  callSubscribers(){\r\n    this.subscribers.forEach(subscriber=>{\r\n      if(_.isFunction(subscriber.updateModelData)){\r\n        subscriber.updateModelData(this.getData());\r\n      }\r\n      if(_.isFunction(subscriber)){\r\n        subscriber(this.getData());\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * Отписаться (отписываемся перед удалением компонента)\r\n   * @param callback\r\n   */\r\n  unsubscribe(subscriber){\r\n    this.subscribers = this.subscribers.filter(_s=>(_s !== subscriber))\r\n  }\r\n  //\r\n  // unsubscribe(callback){\r\n  //   this.subscribers = _.remove(this.subscribers, (idx, item)=>{\r\n  //     console.log(item);\r\n  //     return callback === item;\r\n  //   })\r\n  // }\r\n\r\n  /**\r\n   * Получить данные модели\r\n   * @return {object | null}\r\n   */\r\n  getData(){\r\n    return this.data;\r\n  }\r\n  /**\r\n   * Обновить модель данными\r\n   * @param {{}} data\r\n   * @return void\r\n   */\r\n  updateWithData(data){\r\n    this.data = _.extend( this.data,{...data});\r\n    this.callSubscribers();\r\n  }\r\n}\r\n\r\n\r\nexport default AltrpModelUpdater","import AltrpModelUpdater from \"../AltrpModelUpdater\";\r\n\r\nclass ModelsManager {\r\n  constructor(){\r\n    this.modelsStorage = {};\r\n\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  updateModel(modelName, modelId){\r\n    if(! this.modelsStorage[`${modelName}::${modelId}`]) {\r\n      this.modelsStorage[`${modelName}::${modelId}`].updateData();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {AltrpModelUpdater} altrpModel\r\n   */\r\n  addModel(altrpModel){\r\n\r\n  }\r\n\r\n  /**\r\n   * @param {string} modelName\r\n   * @param {int} modelId\r\n   * @return {AltrpModelUpdater}\r\n   */\r\n  getModel(modelName, modelId){\r\n\r\n  }\r\n\r\n  /**\r\n   * Подписывается на изменения модели\r\n   * @param {string} modelName\r\n   * @param {int} modelId\r\n   * @param {function} callback\r\n   * @return {AltrpModelUpdater | null}\r\n   */\r\n  subscribeToModelUpdates(modelName, modelId, callback){\r\n    if(! modelId){\r\n      return null;\r\n    }\r\n    /**\r\n     * model\r\n     * @type {AltrpModelUpdater}\r\n     */\r\n    let model;\r\n    if(! this.modelsStorage[`${modelName}::${modelId}`]){\r\n      this.modelsStorage[`${modelName}::${modelId}`] = new AltrpModelUpdater(modelName, modelId);\r\n    }\r\n    model = this.modelsStorage[`${modelName}::${modelId}`];\r\n    model.subscribeToUpdates(callback);\r\n    return model;\r\n  }\r\n  /**\r\n   * удаляем подписчика\r\n   * @param {string} modelName\r\n   * @param {int} modelId\r\n   * @param {function} callback\r\n   * @return {AltrpModelUpdater | null}\r\n   */\r\n  unsubscribe(modelName, modelId, callback){\r\n    if(! modelId){\r\n      return null;\r\n    }\r\n    /**\r\n     * model\r\n     * @type {AltrpModelUpdater}\r\n     */\r\n    let model;\r\n    if(! this.modelsStorage[`${modelName}::${modelId}`]){\r\n      return\r\n    }\r\n    model = this.modelsStorage[`${modelName}::${modelId}`];\r\n    model.unsubscribe(callback);\r\n    return model;\r\n  }\r\n\r\n  /**\r\n   * Обновить названию и ИД модель данными\r\n   * @param {string} modelName\r\n   * @param {int} modelId\r\n   * @param {{}} data\r\n   * @return void\r\n   */\r\n  updateModelWithData(modelName, modelId, data){\r\n    if(! this.modelsStorage[`${modelName}::${modelId}`]) {\r\n      return;\r\n    }\r\n    this.modelsStorage[`${modelName}::${modelId}`].updateWithData(data);\r\n  }\r\n}\r\nconst modelManager =  new ModelsManager();\r\nexport default modelManager;","import Query from \"../../classes/Query\";\r\nimport {getDataByPath} from \"../../../../../front-app/src/js/helpers\";\r\n\r\nclass PostsWidget extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      settings: props.element.getSettings(),\r\n      PostsComponent: ()=><div children=\"Loading...\"/>\r\n    };\r\n    props.element.component = this;\r\n    if (window.elementDecorator) {\r\n      window.elementDecorator(this);\r\n    }\r\n    if(props.baseRender){\r\n      this.render = props.baseRender(this);\r\n    }\r\n  }\r\n  _componentDidMount(){\r\n    import(/* webpackChunkName: 'altrp-posts' */'../altrp-posts/altrp-posts').then(res=>{\r\n      this.setState(state=>({...state,PostsComponent:res.default}))\r\n    })\r\n  }\r\n  /**\r\n   * Показывать ли записи\r\n   * @param{Query} query\r\n   * @return {boolean}\r\n   */\r\n  showPosts(query = {}){\r\n    if( this.props.element.getSettings('choose_datasource') === 'datasource' ){\r\n      return true;\r\n    }\r\n    if(! query.modelName && ! query.dataSource){\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n  render(){\r\n    if(! this.props.currentModel.getProperty('altrpModelUpdated')){\r\n      return '';\r\n    }\r\n    let query = new Query(this.props.element.getSettings().table_query || {}, this);\r\n    if(! this.showPosts(query)){\r\n      return <div children=\"Please Choose Source\"/>\r\n    }\r\n    let data = query.getFromModel(this.state.modelData) || [];\r\n    if(this.props.element.getSettings('choose_datasource') === 'datasource') {\r\n      let path = this.props.element.getSettings('posts_datasource', '');\r\n      path = path.replace(/}}/g, '').replace(/{{/g, '');\r\n      data = getDataByPath(path, [], this.props.element.getCurrentModel().getData());\r\n    }\r\n    return <this.state.PostsComponent query={query}\r\n                                      currentModel={this.props.currentModel}\r\n                                      data={data}\r\n                                      element={this.props.element}\r\n                                      settings={this.props.element.getSettings()}/>;\r\n  }\r\n}\r\n\r\nexport default PostsWidget\r\n\r\n"],"sourceRoot":""}