{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/components/altrp-tooltip/AltrpTooltip.js","webpack:///./resources/modules/editor/src/js/components/widgets/styled-components/NavComponent.js","webpack:///./resources/modules/front-app/src/js/store/current-page/actions.js"],"names":["props","className","position","children","NavComponent","styled","div","justifyContent","settings","styles","undefined","getResponsiveSetting","simplePropertyStyled","typographic","color","typographicControllerToStyles","colorPropertyStyled","horizontalPadding","verticalPadding","sizeStyled","fill","stroke","size","iconSizeStyled","marginRight","marginLeft","transformRotate","transformRotateStyled","backgroundColor","height","borderWidth","heightCalcStyled","borderTopStyle","borderTopColor","borderTopWidth","padding","borderType","borderColor","borderRadius","dimensionsControllerToStyles","borderWidthStyled","alignItems","width","marginTop","borderRadiusTopRight","borderRadiusBottomLeft","typographicSubmenu","colorSubmenu","strokeSubmenu","background","widthSubmenu","borderTypeSubmenu","borderWidthSubmenu","borderColorSubmenu","borderRadiusSubmenu","borderRadiusSubmenu2","borderRadiusTopRight2","borderRadiusBottomLeft2","borderTop2","elementId","top","unit","right","bottom","left","CHANGE_CURRENT_PAGE","CHANGE_CURRENT_PAGE_PROPERTY","changeCurrentPageProperty","propertyName","value","type"],"mappings":"yGAQA,IANA,SAAsBA,GACpB,OAAO,uBAAKC,UAAS,uCAAkCD,EAAME,WAC1DF,EAAMG,Y,0ECSLC,EAAeC,OAAOC,IAAV,qvIAIZ,SAAAN,GAEA,IAGIO,EAHIC,EAAaR,EAAbQ,SACJC,EAAS,GAcb,YARiBC,IAAbF,IACFD,GAAiBI,0BAAqBH,EAAU,sCAG9CD,IACFE,IAAUG,0BAAqBL,EAAgB,oBAG1CE,KAQP,SAAAT,GAEA,IAGIa,EAAaC,EAHTN,EAAaR,EAAbQ,SACJC,EAAS,GAwBb,YAlBiBC,IAAbF,IACFK,GAAcF,0BAAqBH,EAAU,gCAG3CK,IACFJ,IAAUM,mCAA8BF,SAKzBH,IAAbF,IACFM,GAAQH,0BAAqBH,EAAU,+BAGrCM,IACFL,IAAUO,yBAAoBF,EAAO,UAGhCL,KAQP,SAAAT,GAEA,IAGIa,EAAaC,EAHTN,EAAaR,EAAbQ,SACJC,EAAS,GAwBb,YAlBiBC,IAAbF,IACFK,GAAcF,0BAAqBH,EAAU,8BAA+B,WAG1EK,IACFJ,IAAUM,mCAA8BF,SAKzBH,IAAbF,IACFM,GAAQH,0BAAqBH,EAAU,6BAA8B,WAGnEM,IACFL,IAAUO,yBAAoBF,EAAO,UAGhCL,KAQP,SAAAT,GAEA,IAGIc,EAAOG,EAAmBC,EAHtBV,EAAaR,EAAbQ,SACJC,EAAS,GAoCb,YA9BiBC,IAAbF,IACFM,GAAQH,0BAAqBH,EAAU,+BAGrCM,IACFL,IAAUO,yBAAoBF,EAAO,eAKtBJ,IAAbF,IACFS,GAAoBN,0BAAqBH,EAAU,uCAGjDS,IACFR,IAAUU,gBAAWF,EAAmB,gBACxCR,IAAUU,gBAAWF,EAAmB,uBAKzBP,IAAbF,IACFU,GAAkBP,0BAAqBH,EAAU,qCAG/CU,IACFT,IAAUU,gBAAWD,EAAiB,eACtCT,IAAUU,gBAAWD,EAAiB,mBAGjCT,KAQP,SAAAT,GAEA,IAGIc,EAAOG,EAAmBC,EAHtBV,EAAaR,EAAbQ,SACJC,EAAS,GAoCb,YA9BiBC,IAAbF,IACFM,GAAQH,0BAAqBH,EAAU,6BAA8B,WAGnEM,IACFL,IAAUO,yBAAoBF,EAAO,eAKtBJ,IAAbF,IACFS,GAAoBN,0BAAqBH,EAAU,qCAAsC,WAGvFS,IACFR,IAAUU,gBAAWF,EAAmB,gBACxCR,IAAUU,gBAAWF,EAAmB,uBAKzBP,IAAbF,IACFU,GAAkBP,0BAAqBH,EAAU,mCAAoC,WAGnFU,IACFT,IAAUU,gBAAWD,EAAiB,eACtCT,IAAUU,gBAAWD,EAAiB,mBAGjCT,KAQP,SAAAT,GAEA,IAGIoB,EAAMC,EAHFb,EAAaR,EAAbQ,SACJC,EAAS,GAwBb,YAlBiBC,IAAbF,IACFY,GAAOT,0BAAqBH,EAAU,iCAGpCY,IACFX,IAAUO,yBAAoBI,EAAM,cAKrBV,IAAbF,IACFa,GAASV,0BAAqBH,EAAU,mCAGtCa,IACFZ,IAAUO,yBAAoBK,EAAQ,WAGjCZ,KAQP,SAAAT,GAEA,IAGIoB,EAAMC,EAHFb,EAAaR,EAAbQ,SACJC,EAAS,GAwBb,YAlBiBC,IAAbF,IACFY,GAAOT,0BAAqBH,EAAU,+BAAgC,WAGpEY,IACFX,IAAUO,yBAAoBI,EAAM,cAKrBV,IAAbF,IACFa,GAASV,0BAAqBH,EAAU,iCAAkC,WAGxEa,IACFZ,IAAUO,yBAAoBK,EAAQ,WAGjCZ,KAQP,SAAAT,GAEA,IAGIsB,EAHId,EAAaR,EAAbQ,SACJC,EAAS,GAcb,YARiBC,IAAbF,IACFc,GAAOX,0BAAqBH,EAAU,iCAGpCc,IACFb,IAAUc,oBAAeD,IAGpBb,KAQP,SAAAT,GAEA,IAGIsB,EAHId,EAAaR,EAAbQ,SACJC,EAAS,GAcb,YARiBC,IAAbF,IACFc,GAAOX,0BAAqBH,EAAU,+BAAgC,WAGpEc,IACFb,IAAUc,oBAAeD,IAGpBb,KAQP,SAAAT,GAEA,IAGIwB,EAHIhB,EAAaR,EAAbQ,SACJC,EAAS,GAcb,YARiBC,IAAbF,IACFgB,GAAcb,0BAAqBH,EAAU,kCAG3CgB,IACFf,IAAUU,gBAAWK,EAAa,iBAG7Bf,KAQP,SAAAT,GAEA,IAGIwB,EAHIhB,EAAaR,EAAbQ,SACJC,EAAS,GAcb,YARiBC,IAAbF,IACFgB,GAAcb,0BAAqBH,EAAU,gCAAiC,WAG5EgB,IACFf,IAAUU,gBAAWK,EAAa,iBAG7Bf,KAQP,SAAAT,GAEA,IAGIyB,EAAYC,EAHRlB,EAAaR,EAAbQ,SACJC,EAAS,GAwBb,YAlBiBC,IAAbF,IACFiB,GAAad,0BAAqBH,EAAU,6CAG1CiB,IACFhB,IAAUU,gBAAWM,EAAY,qBAKlBf,IAAbF,IACFkB,GAAkBf,0BAAqBH,EAAU,mCAG/CkB,IACFjB,IAAUkB,2BAAsBD,IAG3BjB,KAQP,SAAAT,GAEA,IAGIyB,EAAYC,EAHRlB,EAAaR,EAAbQ,SACJC,EAAS,GAwBb,YAlBiBC,IAAbF,IACFiB,GAAad,0BAAqBH,EAAU,2CAA4C,WAGtFiB,IACFhB,IAAUU,gBAAWM,EAAY,qBAKlBf,IAAbF,IACFkB,GAAkBf,0BAAqBH,EAAU,iCAAkC,WAGjFkB,IACFjB,IAAUkB,2BAAsBD,IAG3BjB,KAaP,SAAAT,GAEA,IAGI4B,EAHIpB,EAAaR,EAAbQ,SACJC,EAAS,GAcb,YARiBC,IAAbF,IACFoB,GAAkBjB,0BAAqBH,EAAU,kCAG/CoB,IACFnB,IAAUO,yBAAoBY,EAAiB,qBAG1CnB,KAaP,SAAAT,GAEA,IAGI4B,EAHIpB,EAAaR,EAAbQ,SACJC,EAAS,GAcb,YARiBC,IAAbF,IACFoB,GAAkBjB,0BAAqBH,EAAU,gCAAiC,WAGhFoB,IACFnB,IAAUO,yBAAoBY,EAAiB,qBAG1CnB,KAQP,SAAAT,GAEA,IAGIc,EAHIN,EAAaR,EAAbQ,SACJC,EAAS,GAcb,YARiBC,IAAbF,IACFM,GAAQH,0BAAqBH,EAAU,kCAGrCM,IACFL,IAAUO,yBAAoBF,EAAO,UAGhCL,KAUP,SAAAT,GAEA,IAGI6B,EAHIrB,EAAaR,EAAbQ,SACJC,EAAS,GAcb,YARiBC,IAAbF,IACFqB,GAASlB,0BAAqBH,EAAU,mCAGtCqB,IACFpB,IAAUU,gBAAWU,EAAQ,WAGxBpB,KAQP,SAAAT,GAEA,IAGI8B,EAHItB,EAAaR,EAAbQ,SACJC,EAAS,GAeb,YATiBC,IAAbF,IACFsB,GAAcnB,0BAAqBH,EAAU,mCAG3CsB,IACFrB,IAAUU,gBAAWW,EAAa,sBAClCrB,IAAUU,gBAAWW,EAAa,wBAG7BrB,KAQP,SAAAT,GAEA,IAGI8B,EAHItB,EAAaR,EAAbQ,SACJC,EAAS,GAeb,YATiBC,IAAbF,IACFsB,GAAcnB,0BAAqBH,EAAU,mCAG3CsB,IACFrB,IAAUU,gBAAWW,EAAa,oBAClCrB,IAAUU,gBAAWW,EAAa,sBAG7BrB,KAQP,SAAAT,GAEA,IAGI6B,EAHIrB,EAAaR,EAAbQ,SACJC,EAAS,GAcb,YARiBC,IAAbF,IACFqB,GAASlB,0BAAqBH,EAAU,mCAGtCqB,IACFpB,IAAUsB,sBAAiBF,IAGtBpB,KAQP,SAAAT,GAEA,IAGIc,EAAOD,EAHHL,EAAaR,EAAbQ,SACJC,EAAS,GAwBb,YAlBiBC,IAAbF,IACFM,GAAQH,0BAAqBH,EAAU,qCAGrCM,IACFL,IAAUO,yBAAoBF,EAAO,eAKtBJ,IAAbF,IACFK,GAAcF,0BAAqBH,EAAU,sCAG3CK,IACFJ,IAAUM,mCAA8BF,IAGnCJ,KAQP,SAAAT,GAEA,IAGIc,EAAOD,EAHHL,EAAaR,EAAbQ,SACJC,EAAS,GAwBb,YAlBiBC,IAAbF,IACFM,GAAQH,0BAAqBH,EAAU,mCAAoC,WAGzEM,IACFL,IAAUO,yBAAoBF,EAAO,eAKtBJ,IAAbF,IACFK,GAAcF,0BAAqBH,EAAU,oCAAqC,WAGhFK,IACFJ,IAAUM,mCAA8BF,IAGnCJ,KAQP,SAAAT,GAEA,IAGIiB,EAAmBC,EAHfV,EAAaR,EAAbQ,SACJC,EAAS,GA0Bb,YApBiBC,IAAbF,IACFS,GAAoBN,0BAAqBH,EAAU,6CAGjDS,IACFR,IAAUU,gBAAWF,EAAmB,gBACxCR,IAAUU,gBAAWF,EAAmB,uBAKzBP,IAAbF,IACFU,GAAkBP,0BAAqBH,EAAU,2CAG/CU,IACFT,IAAUU,gBAAWD,EAAiB,eACtCT,IAAUU,gBAAWD,EAAiB,mBAGjCT,KAQP,SAAAT,GAEA,IAGIiB,EAAmBC,EAHfV,EAAaR,EAAbQ,SACJC,EAAS,GA0Bb,YApBiBC,IAAbF,IACFS,GAAoBN,0BAAqBH,EAAU,2CAA4C,WAG7FS,IACFR,IAAUU,gBAAWF,EAAmB,gBACxCR,IAAUU,gBAAWF,EAAmB,uBAKzBP,IAAbF,IACFU,GAAkBP,0BAAqBH,EAAU,yCAA0C,WAGzFU,IACFT,IAAUU,gBAAWD,EAAiB,eACtCT,IAAUU,gBAAWD,EAAiB,mBAGjCT,KAQP,SAAAT,GAEA,IAGIgC,EAAgBC,EAAgBC,EAH5B1B,EAAaR,EAAbQ,SACJC,EAAS,GAkCb,YA5BiBC,IAAbF,IACFwB,GAAiBrB,0BAAqBH,EAAU,uCAG9CwB,IACFvB,IAAUG,0BAAqBoB,EAAgB,0BAKhCtB,IAAbF,IACFyB,GAAiBtB,0BAAqBH,EAAU,wCAG9CyB,IACFxB,IAAUO,yBAAoBiB,EAAgB,0BAK/BvB,IAAbF,IACF0B,GAAiBvB,0BAAqBH,EAAU,wCAG9C0B,IACFzB,IAAUU,gBAAWe,EAAgB,qBAGhCzB,KAQP,SAAAT,GAEA,IAGIgC,EAAgBC,EAAgBC,EAH5B1B,EAAaR,EAAbQ,SACJC,EAAS,GAkCb,YA5BiBC,IAAbF,IACFwB,GAAiBrB,0BAAqBH,EAAU,qCAAsC,WAGpFwB,IACFvB,IAAUG,0BAAqBoB,EAAgB,0BAKhCtB,IAAbF,IACFyB,GAAiBtB,0BAAqBH,EAAU,sCAAuC,WAGrFyB,IACFxB,IAAUO,yBAAoBiB,EAAgB,0BAK/BvB,IAAbF,IACF0B,GAAiBvB,0BAAqBH,EAAU,sCAAuC,WAGrF0B,IACFzB,IAAUU,gBAAWe,EAAgB,qBAGhCzB,KAQP,SAAAT,GAEA,IAGIsB,EAAMI,EAHFlB,EAAaR,EAAbQ,SACJC,EAAS,GAwBb,YAlBiBC,IAAbF,IACFc,GAAOX,0BAAqBH,EAAU,wCAGpCc,IACFb,IAAUc,oBAAeD,SAKVZ,IAAbF,IACFkB,GAAkBf,0BAAqBH,EAAU,yCAG/CkB,IACFjB,IAAUkB,2BAAsBD,IAG3BjB,KAQP,SAAAT,GAEA,IAGIsB,EAAMI,EAHFlB,EAAaR,EAAbQ,SACJC,EAAS,GAwBb,YAlBiBC,IAAbF,IACFc,GAAOX,0BAAqBH,EAAU,sCAAuC,WAG3Ec,IACFb,IAAUc,oBAAeD,SAKVZ,IAAbF,IACFkB,GAAkBf,0BAAqBH,EAAU,uCAAwC,WAGvFkB,IACFjB,IAAUkB,2BAAsBD,IAG3BjB,KAQP,SAAAT,GAEA,IAGI0B,EAHIlB,EAAaR,EAAbQ,SACJC,EAAS,GAcb,YARiBC,IAAbF,IACFkB,GAAkBf,0BAAqBH,EAAU,gDAG/CkB,IACFjB,IAAUkB,2BAAsBD,IAG3BjB,KAQP,SAAAT,GAEA,IAGI0B,EAHIlB,EAAaR,EAAbQ,SACJC,EAAS,GAcb,YARiBC,IAAbF,IACFkB,GAAkBf,0BAAqBH,EAAU,8CAA+C,WAG9FkB,IACFjB,IAAUkB,2BAAsBD,IAG3BjB,KAQP,SAAAT,GAEA,IAGIsB,EAHId,EAAaR,EAAbQ,SACJC,EAAS,GAcb,YARiBC,IAAbF,IACFc,GAAOX,0BAAqBH,EAAU,6CAGpCc,IACFb,IAAUc,oBAAeD,IAGpBb,KAQP,SAAAT,GAEA,IAGIsB,EAHId,EAAaR,EAAbQ,SACJC,EAAS,GAcb,YARiBC,IAAbF,IACFc,GAAOX,0BAAqBH,EAAU,2CAA4C,WAGhFc,IACFb,IAAUc,oBAAeD,IAGpBb,KASP,SAAAT,GAEA,IAGIoB,EAAMC,EAHFb,EAAaR,EAAbQ,SACJC,EAAS,GAwBb,YAlBiBC,IAAbF,IACFY,GAAOT,0BAAqBH,EAAU,mDAGpCY,IACFX,IAAUO,yBAAoBI,EAAM,cAKrBV,IAAbF,IACFa,GAASV,0BAAqBH,EAAU,qDAGtCa,IACFZ,IAAUO,yBAAoBK,EAAQ,WAGjCZ,KAQP,SAAAT,GAEA,IAGIoB,EAAMC,EAHFb,EAAaR,EAAbQ,SACJC,EAAS,GAwBb,YAlBiBC,IAAbF,IACFY,GAAOT,0BAAqBH,EAAU,iDAAkD,WAGtFY,IACFX,IAAUO,yBAAoBI,EAAM,cAKrBV,IAAbF,IACFa,GAASV,0BAAqBH,EAAU,mDAAoD,WAG1Fa,IACFZ,IAAUO,yBAAoBK,EAAQ,WAGjCZ,KAQP,SAAAT,GAEA,IAGI4B,EAAiBO,EAASC,EAAYN,EAAaO,EAAaC,EAH5D9B,EAAaR,EAAbQ,SACJC,EAAS,GAgEb,YA1DiBC,IAAbF,IACFoB,GAAkBjB,0BAAqBH,EAAU,yDAG/CoB,IACFnB,IAAUO,yBAAoBY,EAAiB,0BAKhClB,IAAbF,IACF2B,GAAUxB,0BAAqBH,EAAU,gDAGvC2B,IACF1B,IAAU8B,kCAA6BJ,SAKxBzB,IAAbF,IACF4B,GAAazB,0BAAqBH,EAAU,oDAG1C4B,IACF3B,IAAUG,0BAAqBwB,EAAY,sBAK5B1B,IAAbF,IACFsB,GAAcnB,0BAAqBH,EAAU,qDAG3CsB,IACFrB,IAAU+B,uBAAkBV,SAKbpB,IAAbF,IACF6B,GAAc1B,0BAAqBH,EAAU,qDAG3C6B,IACF5B,IAAUO,yBAAoBqB,EAAa,sBAK5B3B,IAAbF,IACF8B,GAAe3B,0BAAqBH,EAAU,sDAG5C8B,IACF7B,IAAU8B,kCAA6BD,EAAc,kBAGhD7B,KAQP,SAAAT,GAEA,IAGI4B,EAAiBO,EAASC,EAAYN,EAAaO,EAAaC,EAH5D9B,EAAaR,EAAbQ,SACJC,EAAS,GAgEb,YA1DiBC,IAAbF,IACFoB,GAAkBjB,0BAAqBH,EAAU,uDAAwD,WAGvGoB,IACFnB,IAAUO,yBAAoBY,EAAiB,0BAKhClB,IAAbF,IACF2B,GAAUxB,0BAAqBH,EAAU,8CAA+C,WAGtF2B,IACF1B,IAAU8B,kCAA6BJ,SAKxBzB,IAAbF,IACF4B,GAAazB,0BAAqBH,EAAU,kDAAmD,WAG7F4B,IACF3B,IAAUG,0BAAqBwB,EAAY,sBAK5B1B,IAAbF,IACFsB,GAAcnB,0BAAqBH,EAAU,mDAAoD,WAG/FsB,IACFrB,IAAU+B,uBAAkBV,SAKbpB,IAAbF,IACF6B,GAAc1B,0BAAqBH,EAAU,mDAAoD,WAG/F6B,IACF5B,IAAUO,yBAAoBqB,EAAa,sBAK5B3B,IAAbF,IACF8B,GAAe3B,0BAAqBH,EAAU,oDAAqD,WAGjG8B,IACF7B,IAAU8B,kCAA6BD,EAAc,kBAGhD7B,KAQP,SAAAT,GAEA,IAGIO,EAAgBkC,EAHZjC,EAAaR,EAAbQ,SACJC,EAAS,GAwBb,YAlBiBC,IAAbF,IACFD,GAAiBI,0BAAqBH,EAAU,gCAG9CD,IACFE,IAAUG,0BAAqBL,EAAgB,yBAKhCG,IAAbF,IACFiC,GAAa9B,0BAAqBH,EAAU,yCAG1CiC,IACFhC,IAAUG,0BAAqB6B,EAAY,gBAGtChC,KAQP,SAAAT,GAEA,IAGIa,EAAaC,EAHTN,EAAaR,EAAbQ,SACJC,EAAS,GAwBb,YAlBiBC,IAAbF,IACFK,GAAcF,0BAAqBH,EAAU,wCAG3CK,IACFJ,IAAUM,mCAA8BF,SAKzBH,IAAbF,IACFM,GAAQH,0BAAqBH,EAAU,kCAGrCM,IACFL,IAAUO,yBAAoBF,EAAO,UAGhCL,KAQP,SAAAT,GAEA,IAGIa,EAAaC,EAHTN,EAAaR,EAAbQ,SACJC,EAAS,GAwBb,YAlBiBC,IAAbF,IACFK,GAAcF,0BAAqBH,EAAU,sCAAuC,WAGlFK,IACFJ,IAAUM,mCAA8BF,SAKzBH,IAAbF,IACFM,GAAQH,0BAAqBH,EAAU,gCAAiC,WAGtEM,IACFL,IAAUO,yBAAoBF,EAAO,UAGhCL,KAQP,SAAAT,GAEA,IAGIc,EAHIN,EAAaR,EAAbQ,SACJC,EAAS,GAcb,YARiBC,IAAbF,IACFM,GAAQH,0BAAqBH,EAAU,0CAGrCM,IACFL,IAAUO,yBAAoBF,EAAO,UAGhCL,KASP,SAAAT,GAEA,IAGIa,EAAaC,EAHTN,EAAaR,EAAbQ,SACJC,EAAS,GAwBb,YAlBiBC,IAAbF,IACFK,GAAcF,0BAAqBH,EAAU,oDAG3CK,IACFJ,IAAUM,mCAA8BF,SAKzBH,IAAbF,IACFM,GAAQH,0BAAqBH,EAAU,sCAGrCM,IACFL,IAAUO,yBAAoBF,EAAO,UAGhCL,KASP,SAAAT,GAEA,IAGIa,EAAaC,EAHTN,EAAaR,EAAbQ,SACJC,EAAS,GAwBb,YAlBiBC,IAAbF,IACFK,GAAcF,0BAAqBH,EAAU,kDAAmD,WAG9FK,IACFJ,IAAUM,mCAA8BF,SAKzBH,IAAbF,IACFM,GAAQH,0BAAqBH,EAAU,oCAAqC,WAG1EM,IACFL,IAAUO,yBAAoBF,EAAO,UAGhCL,KAQP,SAAAT,GAEA,IAGIqB,EAAQC,EAHJd,EAAaR,EAAbQ,SACJC,EAAS,GAwBb,YAlBiBC,IAAbF,IACFa,GAASV,0BAAqBH,EAAU,6CAGtCa,IACFZ,IAAUO,yBAAoBK,EAAQ,gBAKvBX,IAAbF,IACFc,GAAOX,0BAAqBH,EAAU,2CAGpCc,IACFb,IAAUc,oBAAeD,IAGpBb,KAQP,SAAAT,GAEA,IAGIqB,EAHIb,EAAaR,EAAbQ,SACJC,EAAS,GAcb,YARiBC,IAAbF,IACFa,GAASV,0BAAqBH,EAAU,2CAA4C,WAGlFa,IACFZ,IAAUO,yBAAoBK,EAAQ,WAGjCZ,KAQP,SAAAT,GAEA,IAGIsB,EAHId,EAAaR,EAAbQ,SACJC,EAAS,GAcb,YARiBC,IAAbF,IACFc,GAAOX,0BAAqBH,EAAU,yCAA0C,WAG9Ec,IACFb,IAAUc,oBAAeD,IAGpBb,KAQP,SAAAT,GAEA,IAGIa,EAAaC,EAHTN,EAAaR,EAAbQ,SACJC,EAAS,GAwBb,YAlBiBC,IAAbF,IACFK,GAAcF,0BAAqBH,EAAU,+CAG3CK,IACFJ,IAAUM,mCAA8BF,SAKzBH,IAAbF,IACFM,GAAQH,0BAAqBH,EAAU,yCAGrCM,IACFL,IAAUO,yBAAoBF,EAAO,UAGhCL,KAQP,SAAAT,GAEA,IAGIa,EAAaC,EAHTN,EAAaR,EAAbQ,SACJC,EAAS,GAwBb,YAlBiBC,IAAbF,IACFK,GAAcF,0BAAqBH,EAAU,6CAA8C,WAGzFK,IACFJ,IAAUM,mCAA8BF,SAKzBH,IAAbF,IACFM,GAAQH,0BAAqBH,EAAU,uCAAwC,WAG7EM,IACFL,IAAUO,yBAAoBF,EAAO,UAGhCL,KAQP,SAAAT,GAEA,IAGIoB,EAHIZ,EAAaR,EAAbQ,SACJC,EAAS,GAcb,YARiBC,IAAbF,IACFY,GAAOT,0BAAqBH,EAAU,sCAGpCY,IACFX,IAAUO,yBAAoBI,EAAM,SAG/BX,KAQP,SAAAT,GAEA,IAGIoB,EAHIZ,EAAaR,EAAbQ,SACJC,EAAS,GAcb,YARiBC,IAAbF,IACFY,GAAOT,0BAAqBH,EAAU,oCAAqC,WAGzEY,IACFX,IAAUO,yBAAoBI,EAAM,SAG/BX,KAQP,SAAAT,GAEA,IAGIiB,EAHIT,EAAaR,EAAbQ,SACJC,EAAS,GAeb,YATiBC,IAAbF,IACFS,GAAoBN,0BAAqBH,EAAU,oCAGjDS,IACFR,IAAUU,gBAAWF,EAAmB,gBACxCR,IAAUU,gBAAWF,EAAmB,kBAGnCR,KAQP,SAAAT,GAEA,IAGIiB,EAHIT,EAAaR,EAAbQ,SACJC,EAAS,GAeb,YATiBC,IAAbF,IACFS,GAAoBN,0BAAqBH,EAAU,kCAAmC,WAGpFS,IACFR,IAAUU,gBAAWF,EAAmB,gBACxCR,IAAUU,gBAAWF,EAAmB,kBAGnCR,KAQP,SAAAT,GAEA,IAGIc,EAHIN,EAAaR,EAAbQ,SACJC,EAAS,GAeb,YATiBC,IAAbF,IACFM,GAAQH,0BAAqBH,EAAU,wCAGrCM,IACFL,IAAUO,yBAAoBF,EAAO,QACrCL,IAAUO,yBAAoBF,EAAO,UAGhCL,KAQP,SAAAT,GAEA,IAGIc,EAHIN,EAAaR,EAAbQ,SACJC,EAAS,GAeb,YATiBC,IAAbF,IACFM,GAAQH,0BAAqBH,EAAU,sCAAuC,WAG5EM,IACFL,IAAUO,yBAAoBF,EAAO,QACrCL,IAAUO,yBAAoBF,EAAO,UAGhCL,KAQP,SAAAT,GAEA,IAGI4B,EAHIpB,EAAaR,EAAbQ,SACJC,EAAS,GAcb,YARiBC,IAAbF,IACFoB,GAAkBjB,0BAAqBH,EAAU,2CAG/CoB,IACFnB,IAAUO,yBAAoBY,EAAiB,qBAG1CnB,KAQP,SAAAT,GAEA,IAGI4B,EAHIpB,EAAaR,EAAbQ,SACJC,EAAS,GAcb,YARiBC,IAAbF,IACFoB,GAAkBjB,0BAAqBH,EAAU,yCAA0C,WAGzFoB,IACFnB,IAAUO,yBAAoBY,EAAiB,qBAG1CnB,KAQP,SAAAT,GAEA,IAGI4B,EAAiBd,EAHbN,EAAaR,EAAbQ,SACJC,EAAS,GAwBb,YAlBiBC,IAAbF,IACFoB,GAAkBjB,0BAAqBH,EAAU,+CAG/CoB,IACFnB,IAAUO,yBAAoBY,EAAiB,0BAKhClB,IAAbF,IACFM,GAAQH,0BAAqBH,EAAU,oCAGrCM,IACFL,IAAUO,yBAAoBF,EAAO,UAGhCL,KAQP,SAAAT,GAEA,IAGI4B,EAAiBd,EAHbN,EAAaR,EAAbQ,SACJC,EAAS,GAwBb,YAlBiBC,IAAbF,IACFoB,GAAkBjB,0BAAqBH,EAAU,6CAA8C,WAG7FoB,IACFnB,IAAUO,yBAAoBY,EAAiB,0BAKhClB,IAAbF,IACFM,GAAQH,0BAAqBH,EAAU,kCAAmC,WAGxEM,IACFL,IAAUO,yBAAoBF,EAAO,UAGhCL,KAMT,SAAAT,GAEA,IAMI0B,EAAiBb,EAAaC,EAAOO,EAAQO,EAAiBc,EAAON,EAAYN,EAAaO,EAAaC,EAAcK,EAAWC,EACpIC,EAAwBpB,EAAYqB,EAAoBC,EAAcC,EAAeC,EAAYC,EAAcC,EAAmBC,EAClIC,EAAoBC,EAAqB9B,EAAaQ,EAAgBE,EAAgBqB,EAAsBC,EAAuBC,EAAyBC,EARzJlD,EAAuBR,EAAvBQ,SAAUmD,EAAa3D,EAAb2D,UAEjB,IAAKA,EACH,MAAO,GAOT,IAAIlD,EAAS,IAAH,OAAOkD,EAAP,mHAA2HA,EAA3H,oHAktBV,YA9sBiBjD,IAAbF,IACFkB,GAAkBf,0BAAqBH,EAAU,4CAG/CkB,IACFjB,IAAUkB,2BAAsBD,IAGlCjB,GAAU,KAIVA,GAAU,IAAJ,OAAQkD,EAAR,yHAAkIA,EAAlI,+HAIWjD,IAAbF,IACFkB,GAAkBf,0BAAqBH,EAAU,0CAA2C,WAG1FkB,IACFjB,IAAUkB,2BAAsBD,IAGlCjB,GAAU,KAEVA,GAAU,IAAJ,OAAQkD,EAAR,uEAIWjD,IAAbF,IACFK,GAAcF,0BAAqBH,EAAU,8CAG3CK,IACFJ,IAAUM,mCAA8BF,IAG1CJ,GAAU,KAIVA,GAAU,IAAJ,OAAQkD,EAAR,6EAIWjD,IAAbF,IACFK,GAAcF,0BAAqBH,EAAU,4CAA6C,WAGxFK,IACFJ,IAAUM,mCAA8BF,IAG1CJ,GAAU,KAEVA,GAAU,IAAJ,OAAQkD,EAAR,8GAIWjD,IAAbF,IACFM,GAAQH,0BAAqBH,EAAU,6CAGrCM,IACFL,IAAUO,yBAAoBF,EAAO,UAGvCL,GAAU,KAIVA,GAAU,IAAJ,OAAQkD,EAAR,oHAIWjD,IAAbF,IACFM,GAAQH,0BAAqBH,EAAU,2CAA4C,WAGjFM,IACFL,IAAUO,yBAAoBF,EAAO,UAGvCL,GAAU,KAEVA,GAAU,IAAJ,OAAQkD,EAAR,qHAIWjD,IAAbF,IACFa,GAASV,0BAAqBH,EAAU,6CAGtCa,IACFZ,IAAUO,yBAAoBK,EAAQ,WAGxCZ,GAAU,KAIVA,GAAU,IAAJ,OAAQkD,EAAR,2HAIWjD,IAAbF,IACFa,GAASV,0BAAqBH,EAAU,2CAA4C,WAGlFa,IACFZ,IAAUO,yBAAoBK,EAAQ,WAGxCZ,GAAU,KAEVA,GAAU,IAAJ,OAAQkD,EAAR,+DAIWjD,IAAbF,IACFoB,GAAkBjB,0BAAqBH,EAAU,mDAG/CoB,IACFnB,IAAUO,yBAAoBY,EAAiB,0BAKhClB,IAAbF,IACFkC,GAAQ/B,0BAAqBH,EAAU,wCAGrCkC,IACFjC,IAAUU,gBAAWuB,EAAO,UAG9BjC,GAAU,KAIVA,GAAU,IAAJ,OAAQkD,EAAR,qEAIWjD,IAAbF,IACFoB,GAAkBjB,0BAAqBH,EAAU,iDAAkD,WAGjGoB,IACFnB,IAAUO,yBAAoBY,EAAiB,0BAKhClB,IAAbF,IACFkC,GAAQ/B,0BAAqBH,EAAU,sCAAuC,WAG5EkC,IACFjC,IAAUU,gBAAWuB,EAAO,UAG9BjC,GAAU,KAEVA,GAAU,IAAJ,OAAQkD,EAAR,4DAIWjD,IAAbF,IACF4B,GAAazB,0BAAqBH,EAAU,8CAG1C4B,IACF3B,IAAUG,0BAAqBwB,EAAY,sBAK5B1B,IAAbF,IACFsB,GAAcnB,0BAAqBH,EAAU,+CAG3CsB,IACFrB,IAAU+B,uBAAkBV,SAKbpB,IAAbF,IACF6B,GAAc1B,0BAAqBH,EAAU,+CAG3C6B,IACF5B,IAAUO,yBAAoBqB,EAAa,sBAK5B3B,IAAbF,IACF8B,GAAe3B,0BAAqBH,EAAU,gDAG5C8B,IACF7B,IAAU8B,kCAA6BD,EAAc,uBAKtC5B,IAAbF,IACFmC,GAAYhC,0BAAqBH,EAAU,2CAGzCmC,IACFlC,IAAUU,gBAAWwB,EAAW,eAGlClC,GAAU,KAIVA,GAAU,IAAJ,OAAQkD,EAAR,kEAIWjD,IAAbF,IACF4B,GAAazB,0BAAqBH,EAAU,4CAA6C,WAGvF4B,IACF3B,IAAUG,0BAAqBwB,EAAY,sBAK5B1B,IAAbF,IACFsB,GAAcnB,0BAAqBH,EAAU,6CAA8C,WAGzFsB,IACFrB,IAAU+B,uBAAkBV,SAKbpB,IAAbF,IACF6B,GAAc1B,0BAAqBH,EAAU,6CAA8C,WAGzF6B,IACF5B,IAAUO,yBAAoBqB,EAAa,sBAK5B3B,IAAbF,IACF8B,GAAe3B,0BAAqBH,EAAU,8CAA+C,WAG3F8B,IACF7B,IAAU8B,kCAA6BD,EAAc,uBAKtC5B,IAAbF,IACFmC,GAAYhC,0BAAqBH,EAAU,yCAA0C,WAGnFmC,IACFlC,IAAUU,gBAAWwB,EAAW,eAGlClC,GAAU,KAEVA,GAAU,IAAJ,OAAQkD,EAAR,2EAIWjD,IAAbF,IACFoC,GAAuBjC,0BAAqBH,EAAU,gDAGpDoC,IACFnC,GAAU,kBAAJ,OAAsBmC,EAAqBgB,KAA3C,OAAiDhB,EAAqBiB,KAAtE,YAA8EjB,EAAqBkB,OAAnG,OAA2GlB,EAAqBiB,KAAhI,WAGRpD,GAAU,KAIVA,GAAU,IAAJ,OAAQkD,EAAR,iFAIWjD,IAAbF,IACFoC,GAAuBjC,0BAAqBH,EAAU,8CAA+C,WAGnGoC,IACFnC,GAAU,kBAAJ,OAAsBmC,EAAqBgB,KAA3C,OAAiDhB,EAAqBiB,KAAtE,YAA8EjB,EAAqBkB,OAAnG,OAA2GlB,EAAqBiB,KAAhI,WAGRpD,GAAU,KAEVA,GAAU,IAAJ,OAAQkD,EAAR,0EAIWjD,IAAbF,IACFqC,GAAyBlC,0BAAqBH,EAAU,gDAGtDqC,IACFpC,GAAU,sBAAJ,OAA0BoC,EAAuBkB,QAAjD,OAA0DlB,EAAuBgB,KAAjF,YAAyFhB,EAAuBmB,MAAhH,OAAuHnB,EAAuBgB,KAA9I,OAGRpD,GAAU,KAIVA,GAAU,IAAJ,OAAQkD,EAAR,gFAIWjD,IAAbF,IACFqC,GAAyBlC,0BAAqBH,EAAU,8CAA+C,WAGrGqC,IACFpC,GAAU,sBAAJ,OAA0BoC,EAAuBkB,QAAjD,OAA0DlB,EAAuBgB,KAAjF,YAAyFhB,EAAuBmB,MAAhH,OAAuHnB,EAAuBgB,KAA9I,OAGRpD,GAAU,KAEVA,GAAU,IAAJ,OAAQkD,EAAR,yEAIWjD,IAAbF,IACFiB,GAAad,0BAAqBH,EAAU,4CAG1CiB,IACFhB,IAAUU,gBAAWM,EAAY,qBAKlBf,IAAbF,IACFsC,GAAqBnC,0BAAqBH,EAAU,sDAGlDsC,IACFrC,IAAUM,mCAA8B+B,IAG1CrC,GAAU,KAIVA,GAAU,IAAJ,OAAQkD,EAAR,+EAIWjD,IAAbF,IACFiB,GAAad,0BAAqBH,EAAU,0CAA2C,WAGrFiB,IACFhB,IAAUU,gBAAWM,EAAY,qBAKlBf,IAAbF,IACFsC,GAAqBnC,0BAAqBH,EAAU,oDAAqD,WAGvGsC,IACFrC,IAAUM,mCAA8B+B,IAG1CrC,GAAU,KAEVA,GAAU,IAAJ,OAAQkD,EAAR,gIAIWjD,IAAbF,IACFuC,GAAepC,0BAAqBH,EAAU,qDAG5CuC,IACFtC,IAAUO,yBAAoB+B,EAAc,UAG9CtC,GAAU,KAIVA,GAAU,IAAJ,OAAQkD,EAAR,sIAIWjD,IAAbF,IACFuC,GAAepC,0BAAqBH,EAAU,mDAAoD,WAGhGuC,IACFtC,IAAUO,yBAAoB+B,EAAc,UAG9CtC,GAAU,KAEVA,GAAU,IAAJ,OAAQkD,EAAR,uIAIWjD,IAAbF,IACFwC,GAAgBrC,0BAAqBH,EAAU,qDAG7CwC,IACFvC,IAAUO,yBAAoBgC,EAAe,WAG/CvC,GAAU,KAIVA,GAAU,IAAJ,OAAQkD,EAAR,6IAIWjD,IAAbF,IACFwC,GAAgBrC,0BAAqBH,EAAU,mDAAoD,WAGjGwC,IACFvC,IAAUO,yBAAoBgC,EAAe,WAG/CvC,GAAU,KAEVA,GAAU,IAAJ,OAAQkD,EAAR,wEAIWjD,IAAbF,IACFyC,GAAatC,0BAAqBH,EAAU,2DAG1CyC,IACFxC,IAAUO,yBAAoBiC,EAAY,oBAK3BvC,IAAbF,IACF0C,GAAevC,0BAAqBH,EAAU,gDAG5C0C,IACFzC,IAAUU,gBAAW+B,EAAc,UAGrCzC,GAAU,KAIVA,GAAU,IAAJ,OAAQkD,EAAR,8EAIWjD,IAAbF,IACFyC,GAAatC,0BAAqBH,EAAU,yDAA0D,WAGpGyC,IACFxC,IAAUO,yBAAoBiC,EAAY,oBAK3BvC,IAAbF,IACF0C,GAAevC,0BAAqBH,EAAU,8CAA+C,WAG3F0C,IACFzC,IAAUU,gBAAW+B,EAAc,UAGrCzC,GAAU,KAEVA,GAAU,IAAJ,OAAQkD,EAAR,qEAIWjD,IAAbF,IACF2C,GAAoBxC,0BAAqBH,EAAU,sDAGjD2C,IACF1C,IAAUG,0BAAqBuC,EAAmB,sBAKnCzC,IAAbF,IACF4C,GAAqBzC,0BAAqBH,EAAU,uDAGlD4C,IACF3C,IAAU+B,uBAAkBY,SAKb1C,IAAbF,IACF6C,GAAqB1C,0BAAqBH,EAAU,uDAGlD6C,IACF5C,IAAUO,yBAAoBqC,EAAoB,sBAKnC3C,IAAbF,IACF8C,GAAsB3C,0BAAqBH,EAAU,wDAGnD8C,IACF7C,IAAU8B,kCAA6Be,EAAqB,uBAK7C5C,IAAbF,IACFgB,GAAcb,0BAAqBH,EAAU,mDAG3CgB,IACFf,IAAUU,gBAAWK,EAAa,iBAGpCf,GAAU,KAIVA,GAAU,IAAJ,OAAQkD,EAAR,2EAIWjD,IAAbF,IACF2C,GAAoBxC,0BAAqBH,EAAU,oDAAqD,WAGtG2C,IACF1C,IAAUG,0BAAqBuC,EAAmB,sBAKnCzC,IAAbF,IACF4C,GAAqBzC,0BAAqBH,EAAU,qDAAsD,WAGxG4C,IACF3C,IAAU+B,uBAAkBY,SAKb1C,IAAbF,IACF6C,GAAqB1C,0BAAqBH,EAAU,qDAAsD,WAGxG6C,IACF5C,IAAUO,yBAAoBqC,EAAoB,sBAKnC3C,IAAbF,IACF8C,GAAsB3C,0BAAqBH,EAAU,sDAAuD,WAG1G8C,IACF7C,IAAU8B,kCAA6Be,EAAqB,uBAK7C5C,IAAbF,IACFgB,GAAcb,0BAAqBH,EAAU,iDAAkD,WAG7FgB,IACFf,IAAUU,gBAAWK,EAAa,iBAGpCf,GAAU,KAEVA,GAAU,IAAJ,OAAQkD,EAAR,uEAIWjD,IAAbF,IACFwB,GAAiBrB,0BAAqBH,EAAU,+CAG9CwB,IACFvB,IAAUG,0BAAqBoB,EAAgB,0BAKhCtB,IAAbF,IACF0B,GAAiBvB,0BAAqBH,EAAU,iDAG9C0B,IACFzB,IAAUU,gBAAWe,EAAgB,qBAGvCzB,GAAU,KAIVA,GAAU,IAAJ,OAAQkD,EAAR,6EAIWjD,IAAbF,IACF0B,GAAiBvB,0BAAqBH,EAAU,+CAAgD,WAG9F0B,IACFzB,IAAUU,gBAAWe,EAAgB,qBAGvCzB,GAAU,KAEVA,GAAU,IAAJ,OAAQkD,EAAR,0HAIWjD,IAAbF,IACF+C,GAAuB5C,0BAAqBH,EAAU,wDAGpD+C,IACF9C,IAAU8B,kCAA6BgB,EAAsB,kBAG/D9C,GAAU,KAIVA,GAAU,IAAJ,OAAQkD,EAAR,gIAIWjD,IAAbF,IACF+C,GAAuB5C,0BAAqBH,EAAU,sDAAuD,WAG3G+C,IACF9C,IAAU8B,kCAA6BgB,EAAsB,kBAG/D9C,GAAU,KAEVA,GAAU,IAAJ,OAAQkD,EAAR,oFAIWjD,IAAbF,IACFgD,GAAwB7C,0BAAqBH,EAAU,wDAGrDgD,IACF/C,GAAU,kBAAJ,OAAsB+C,EAAsBI,KAA5C,OAAkDJ,EAAsBK,KAAxE,YAAgFL,EAAsBM,OAAtG,OAA8GN,EAAsBK,KAApI,WAGRpD,GAAU,KAEVA,GAAU,IAAJ,OAAQkD,EAAR,mFAIWjD,IAAbF,IACFiD,GAA0B9C,0BAAqBH,EAAU,wDAGvDiD,IACFhD,GAAU,sBAAJ,OAA0BgD,EAAwBM,QAAlD,OAA2DN,EAAwBI,KAAnF,YAA2FJ,EAAwBO,MAAnH,OAA0HP,EAAwBI,KAAlJ,OAGRpD,GAAU,KAEVA,GAAU,IAAJ,OAAQkD,EAAR,4HAAqIA,EAArI,kLAIWjD,IAAbF,IACFkD,GAAa/C,0BAAqBH,EAAU,iDAG1CkD,IACFjD,GAAU,sBAGZA,EAAU,QAQd,O,oHCrkFO,IAAMwD,EAAsB,sBACtBC,EAA+B,+BASrC,SAASC,EAA0BC,EAAcC,GACtD,MAAO,CACLC,KAAMJ,EACNE,eACAC","file":"268.71c241187cd776745b42.bundle.js","sourcesContent":["import React from 'react';\r\n\r\nfunction AltrpTooltip(props) {\r\n  return <div className={`altrp-tooltip altrp-tooltip--${props.position}`}>\r\n    {props.children}\r\n  </div>;\r\n}\r\n\r\nexport default AltrpTooltip;\r\n","import { getResponsiveSetting } from \"../../../../../../front-app/src/js/helpers\";\r\nimport {\r\n  simplePropertyStyled,\r\n  borderWidthStyled,\r\n  colorPropertyStyled,\r\n  dimensionsControllerToStyles,\r\n  typographicControllerToStyles,\r\n  sizeStyled,\r\n  heightCalcStyled,\r\n  transformRotateStyled,\r\n  iconSizeStyled,\r\n} from \"../../../../../../front-app/src/js/helpers/styles\";\r\n\r\nconst NavComponent = styled.div`\r\n\r\n  && .altrp-nav-menu-dropdown-wrapper {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let justifyContent;\r\n\r\n      //Получаем значения justify-content из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        justifyContent = getResponsiveSetting(settings, 'toggle_align_dropdown_menu_layout');\r\n      }\r\n\r\n      if (justifyContent) {\r\n        styles += simplePropertyStyled(justifyContent, 'justify-content');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link-label {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let typographic, color;\r\n\r\n      //Получаем значения typographic из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        typographic = getResponsiveSetting(settings, 'typographic_main_menu_style');\r\n      }\r\n\r\n      if (typographic) {\r\n        styles += typographicControllerToStyles(typographic);\r\n      }\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'text_color_main_menu_style');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link-label:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let typographic, color;\r\n\r\n      //Получаем значения typographic из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        typographic = getResponsiveSetting(settings, 'typographic_main_menu_style', ':hover');\r\n      }\r\n\r\n      if (typographic) {\r\n        styles += typographicControllerToStyles(typographic);\r\n      }\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'text_color_main_menu_style', ':hover');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let color, horizontalPadding, verticalPadding;\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'text_color_main_menu_style');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      //Получаем значения horizontal-padding в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        horizontalPadding = getResponsiveSetting(settings, 'horizontal_padding_main_menu_style');\r\n      }\r\n\r\n      if (horizontalPadding) {\r\n        styles += sizeStyled(horizontalPadding, 'padding-left');\r\n        styles += sizeStyled(horizontalPadding, 'padding-right');\r\n      }\r\n\r\n      //Получаем значения vertical-padding в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        verticalPadding = getResponsiveSetting(settings, 'vertical_padding_main_menu_style');\r\n      }\r\n\r\n      if (verticalPadding) {\r\n        styles += sizeStyled(verticalPadding, 'padding-top');\r\n        styles += sizeStyled(verticalPadding, 'padding-bottom');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let color, horizontalPadding, verticalPadding;\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'text_color_main_menu_style', ':hover');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      //Получаем значения horizontal-padding в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        horizontalPadding = getResponsiveSetting(settings, 'horizontal_padding_main_menu_style', ':hover');\r\n      }\r\n\r\n      if (horizontalPadding) {\r\n        styles += sizeStyled(horizontalPadding, 'padding-left');\r\n        styles += sizeStyled(horizontalPadding, 'padding-right');\r\n      }\r\n\r\n      //Получаем значения vertical-padding в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        verticalPadding = getResponsiveSetting(settings, 'vertical_padding_main_menu_style', ':hover');\r\n      }\r\n\r\n      if (verticalPadding) {\r\n        styles += sizeStyled(verticalPadding, 'padding-top');\r\n        styles += sizeStyled(verticalPadding, 'padding-bottom');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link path {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let fill, stroke;\r\n\r\n      //Получаем значения fill из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        fill = getResponsiveSetting(settings, 'fill_chevron_main_menu_style');\r\n      }\r\n\r\n      if (fill) {\r\n        styles += colorPropertyStyled(fill, 'fill');\r\n      }\r\n\r\n      //Получаем значения stroke из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        stroke = getResponsiveSetting(settings, 'stroke_chevron_main_menu_style');\r\n      }\r\n\r\n      if (stroke) {\r\n        styles += colorPropertyStyled(stroke, 'stroke');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link:hover path {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let fill, stroke;\r\n\r\n      //Получаем значения fill из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        fill = getResponsiveSetting(settings, 'fill_chevron_main_menu_style', ':hover');\r\n      }\r\n\r\n      if (fill) {\r\n        styles += colorPropertyStyled(fill, 'fill');\r\n      }\r\n\r\n      //Получаем значения stroke из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        stroke = getResponsiveSetting(settings, 'stroke_chevron_main_menu_style', ':hover');\r\n      }\r\n\r\n      if (stroke) {\r\n        styles += colorPropertyStyled(stroke, 'stroke');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link svg {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let size;\r\n\r\n      //Получаем значения width и height из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        size = getResponsiveSetting(settings, 'size_chevron_main_menu_style');\r\n      }\r\n\r\n      if (size) {\r\n        styles += iconSizeStyled(size);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link:hover svg {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let size;\r\n\r\n      //Получаем значения width и height из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        size = getResponsiveSetting(settings, 'size_chevron_main_menu_style', ':hover');\r\n      }\r\n\r\n      if (size) {\r\n        styles += iconSizeStyled(size);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let marginRight;\r\n\r\n      //Получаем значения margin-right в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        marginRight = getResponsiveSetting(settings, 'space_between_main_menu_style');\r\n      }\r\n\r\n      if (marginRight) {\r\n        styles += sizeStyled(marginRight, 'margin-right');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let marginRight;\r\n\r\n      //Получаем значения margin-right в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        marginRight = getResponsiveSetting(settings, 'space_between_main_menu_style', ':hover');\r\n      }\r\n\r\n      if (marginRight) {\r\n        styles += sizeStyled(marginRight, 'margin-right');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link .altrp-nav-menu-li-link-icon {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let marginLeft, transformRotate;\r\n\r\n      //Получаем значения margin-left в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        marginLeft = getResponsiveSetting(settings, 'dropdown_indicator_space_main_menu_style');\r\n      }\r\n\r\n      if (marginLeft) {\r\n        styles += sizeStyled(marginLeft, 'margin-left');\r\n      }\r\n\r\n      //Получаем значения transform rotate в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        transformRotate = getResponsiveSetting(settings, 'chevron_rotate_main_menu_style');\r\n      }\r\n\r\n      if (transformRotate) {\r\n        styles += transformRotateStyled(transformRotate);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link:hover .altrp-nav-menu-li-link-icon {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let marginLeft, transformRotate;\r\n\r\n      //Получаем значения margin-left в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        marginLeft = getResponsiveSetting(settings, 'dropdown_indicator_space_main_menu_style', ':hover');\r\n      }\r\n\r\n      if (marginLeft) {\r\n        styles += sizeStyled(marginLeft, 'margin-left');\r\n      }\r\n\r\n      //Получаем значения transform rotate в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        transformRotate = getResponsiveSetting(settings, 'chevron_rotate_main_menu_style', ':hover');\r\n      }\r\n\r\n      if (transformRotate) {\r\n        styles += transformRotateStyled(transformRotate);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-overline:before,\r\n  && .altrp-nav-menu-li-underLine:after,\r\n  && .altrp-nav-menu-li-doubleLine:before,\r\n  && .altrp-nav-menu-li-framed:before,\r\n  && .altrp-nav-menu-li-framed:after,\r\n  && .altrp-nav-menu-li-background:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let backgroundColor;\r\n\r\n      //Получаем значения background-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        backgroundColor = getResponsiveSetting(settings, 'pointer_color_main_menu_style');\r\n      }\r\n\r\n      if (backgroundColor) {\r\n        styles += colorPropertyStyled(backgroundColor, 'background-color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-overline:hover::before,\r\n  && .altrp-nav-menu-li-underLine:hover::after,\r\n  && .altrp-nav-menu-li-doubleLine:hover::before,\r\n  && .altrp-nav-menu-li-framed:hover::before,\r\n  && .altrp-nav-menu-li-framed:hover::after,\r\n  && .altrp-nav-menu-li-background:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let backgroundColor;\r\n\r\n      //Получаем значения background-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        backgroundColor = getResponsiveSetting(settings, 'pointer_color_main_menu_style', ':hover');\r\n      }\r\n\r\n      if (backgroundColor) {\r\n        styles += colorPropertyStyled(backgroundColor, 'background-color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-animation-text:hover .altrp-nav-menu-li-link-label {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let color;\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'pointer_color_main_menu_style');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-underline:after,\r\n  && .altrp-nav-menu-li-overline:before,\r\n  && .altrp-nav-menu-li-doubleLine:before {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let height;\r\n\r\n      //Получаем значения height в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        height = getResponsiveSetting(settings, 'pointer_height_main_menu_style');\r\n      }\r\n\r\n      if (height) {\r\n        styles += sizeStyled(height, 'height');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-framed:hover::after {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let borderWidth;\r\n\r\n      //Получаем значения border-width в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderWidth = getResponsiveSetting(settings, 'pointer_height_main_menu_style');\r\n      }\r\n\r\n      if (borderWidth) {\r\n        styles += sizeStyled(borderWidth, 'border-right-width');\r\n        styles += sizeStyled(borderWidth, 'border-bottom-width');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-framed:hover:before {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let borderWidth;\r\n\r\n      //Получаем значения border-width в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderWidth = getResponsiveSetting(settings, 'pointer_height_main_menu_style');\r\n      }\r\n\r\n      if (borderWidth) {\r\n        styles += sizeStyled(borderWidth, 'border-top-width');\r\n        styles += sizeStyled(borderWidth, 'border-left-width');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-doubleLine:after {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let height;\r\n\r\n      //Получаем значения height в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        height = getResponsiveSetting(settings, 'pointer_height_main_menu_style');\r\n      }\r\n\r\n      if (height) {\r\n        styles += heightCalcStyled(height);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link-label-dropdown {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let color, typographic;\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'text_color_dropdown_menu_section');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      //Получаем значения typographic из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        typographic = getResponsiveSetting(settings, 'typographic_dropdown_menu_section');\r\n      }\r\n\r\n      if (typographic) {\r\n        styles += typographicControllerToStyles(typographic);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link-label-dropdown:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let color, typographic;\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'text_color_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      //Получаем значения typographic из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        typographic = getResponsiveSetting(settings, 'typographic_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (typographic) {\r\n        styles += typographicControllerToStyles(typographic);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link-dropdown {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let horizontalPadding, verticalPadding;\r\n\r\n      //Получаем значения horizontal padding в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        horizontalPadding = getResponsiveSetting(settings, 'horizontal_padding_dropdown_menu_section');\r\n      }\r\n\r\n      if (horizontalPadding) {\r\n        styles += sizeStyled(horizontalPadding, 'padding-left');\r\n        styles += sizeStyled(horizontalPadding, 'padding-right');\r\n      }\r\n\r\n      //Получаем значения vertical padding в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        verticalPadding = getResponsiveSetting(settings, 'vertical_padding_dropdown_menu_section');\r\n      }\r\n\r\n      if (verticalPadding) {\r\n        styles += sizeStyled(verticalPadding, 'padding-top');\r\n        styles += sizeStyled(verticalPadding, 'padding-bottom');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link-dropdown:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let horizontalPadding, verticalPadding;\r\n\r\n      //Получаем значения horizontal padding в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        horizontalPadding = getResponsiveSetting(settings, 'horizontal_padding_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (horizontalPadding) {\r\n        styles += sizeStyled(horizontalPadding, 'padding-left');\r\n        styles += sizeStyled(horizontalPadding, 'padding-right');\r\n      }\r\n\r\n      //Получаем значения vertical padding в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        verticalPadding = getResponsiveSetting(settings, 'vertical_padding_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (verticalPadding) {\r\n        styles += sizeStyled(verticalPadding, 'padding-top');\r\n        styles += sizeStyled(verticalPadding, 'padding-bottom');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-dropdown-s-content-divider {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let borderTopStyle, borderTopColor, borderTopWidth;\r\n\r\n      //Получаем значения border-top-style padding в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderTopStyle = getResponsiveSetting(settings, 'divider_type_dropdown_menu_section');\r\n      }\r\n\r\n      if (borderTopStyle) {\r\n        styles += simplePropertyStyled(borderTopStyle, 'border-top-style');\r\n      }\r\n\r\n      //Получаем значения borderTopColor из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderTopColor = getResponsiveSetting(settings, 'divider_color_dropdown_menu_section');\r\n      }\r\n\r\n      if (borderTopColor) {\r\n        styles += colorPropertyStyled(borderTopColor, 'border-top-color');\r\n      }\r\n\r\n      //Получаем значения border-top-width в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderTopWidth = getResponsiveSetting(settings, 'divider_width_dropdown_menu_section');\r\n      }\r\n\r\n      if (borderTopWidth) {\r\n        styles += sizeStyled(borderTopWidth, 'border-top-width');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-dropdown-s-content-divider:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let borderTopStyle, borderTopColor, borderTopWidth;\r\n\r\n      //Получаем значения border-top-style padding в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderTopStyle = getResponsiveSetting(settings, 'divider_type_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (borderTopStyle) {\r\n        styles += simplePropertyStyled(borderTopStyle, 'border-top-style');\r\n      }\r\n\r\n      //Получаем значения borderTopColor из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderTopColor = getResponsiveSetting(settings, 'divider_color_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (borderTopColor) {\r\n        styles += colorPropertyStyled(borderTopColor, 'border-top-color');\r\n      }\r\n\r\n      //Получаем значения border-top-width в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderTopWidth = getResponsiveSetting(settings, 'divider_width_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (borderTopWidth) {\r\n        styles += sizeStyled(borderTopWidth, 'border-top-width');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link-chevron-dropdown {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let size, transformRotate;\r\n\r\n      //Получаем значения width и height из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        size = getResponsiveSetting(settings, 'chevron_width_dropdown_menu_section');\r\n      }\r\n\r\n      if (size) {\r\n        styles += iconSizeStyled(size);\r\n      }\r\n\r\n      //Получаем значения transform rotate в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        transformRotate = getResponsiveSetting(settings, 'chevron_rotate_dropdown_menu_section');\r\n      }\r\n\r\n      if (transformRotate) {\r\n        styles += transformRotateStyled(transformRotate);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link-chevron-dropdown:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let size, transformRotate;\r\n\r\n      //Получаем значения width и height из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        size = getResponsiveSetting(settings, 'chevron_width_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (size) {\r\n        styles += iconSizeStyled(size);\r\n      }\r\n\r\n      //Получаем значения transform rotate в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        transformRotate = getResponsiveSetting(settings, 'chevron_rotate_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (transformRotate) {\r\n        styles += transformRotateStyled(transformRotate);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link-active-chevron-dropdown {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let transformRotate;\r\n\r\n      //Получаем значения transform rotate в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        transformRotate = getResponsiveSetting(settings, 'chevron_active_rotate_dropdown_menu_section');\r\n      }\r\n\r\n      if (transformRotate) {\r\n        styles += transformRotateStyled(transformRotate);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link-active-chevron-dropdown:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let transformRotate;\r\n\r\n      //Получаем значения transform rotate в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        transformRotate = getResponsiveSetting(settings, 'chevron_active_rotate_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (transformRotate) {\r\n        styles += transformRotateStyled(transformRotate);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-dropdown-button svg {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let size;\r\n\r\n      //Получаем значения width и height из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        size = getResponsiveSetting(settings, 'size_toggle_button_dropdown_menu_section');\r\n      }\r\n\r\n      if (size) {\r\n        styles += iconSizeStyled(size);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-dropdown-button:hover svg {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let size;\r\n\r\n      //Получаем значения width и height из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        size = getResponsiveSetting(settings, 'size_toggle_button_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (size) {\r\n        styles += iconSizeStyled(size);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n\r\n  && .altrp-nav-menu-dropdown-button svg path {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let fill, stroke;\r\n\r\n      //Получаем значения fill из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        fill = getResponsiveSetting(settings, 'color_toggle_button_fill_dropdown_menu_section');\r\n      }\r\n\r\n      if (fill) {\r\n        styles += colorPropertyStyled(fill, 'fill');\r\n      }\r\n\r\n      //Получаем значения stroke из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        stroke = getResponsiveSetting(settings, 'color_toggle_button_stroke_dropdown_menu_section');\r\n      }\r\n\r\n      if (stroke) {\r\n        styles += colorPropertyStyled(stroke, 'stroke');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-dropdown-button:hover svg path {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let fill, stroke;\r\n\r\n      //Получаем значения fill из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        fill = getResponsiveSetting(settings, 'color_toggle_button_fill_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (fill) {\r\n        styles += colorPropertyStyled(fill, 'fill');\r\n      }\r\n\r\n      //Получаем значения stroke из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        stroke = getResponsiveSetting(settings, 'color_toggle_button_stroke_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (stroke) {\r\n        styles += colorPropertyStyled(stroke, 'stroke');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-dropdown-button {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let backgroundColor, padding, borderType, borderWidth, borderColor, borderRadius;\r\n\r\n      //Получаем значения background-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        backgroundColor = getResponsiveSetting(settings, 'background_color_toggle_button_dropdown_menu_section');\r\n      }\r\n\r\n      if (backgroundColor) {\r\n        styles += colorPropertyStyled(backgroundColor, 'background-color');\r\n      }\r\n\r\n      //Получаем значения padding из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        padding = getResponsiveSetting(settings, 'padding_toggle_button_dropdown_menu_section');\r\n      }\r\n\r\n      if (padding) {\r\n        styles += dimensionsControllerToStyles(padding);\r\n      }\r\n\r\n      //Получаем значения border-type из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderType = getResponsiveSetting(settings, 'border_type_toggle_button_dropdown_menu_section');\r\n      }\r\n\r\n      if (borderType) {\r\n        styles += simplePropertyStyled(borderType, 'border-style');\r\n      }\r\n\r\n      //Получаем значения border-width из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderWidth = getResponsiveSetting(settings, 'border_width_toggle_button_dropdown_menu_section');\r\n      }\r\n\r\n      if (borderWidth) {\r\n        styles += borderWidthStyled(borderWidth);\r\n      }\r\n\r\n      //Получаем значения border-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderColor = getResponsiveSetting(settings, 'border_color_toggle_button_dropdown_menu_section');\r\n      }\r\n\r\n      if (borderColor) {\r\n        styles += colorPropertyStyled(borderColor, 'border-color');\r\n      }\r\n\r\n      //Получаем значения border-radius из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderRadius = getResponsiveSetting(settings, 'border_radius_toggle_button_dropdown_menu_section');\r\n      }\r\n\r\n      if (borderRadius) {\r\n        styles += dimensionsControllerToStyles(borderRadius, 'border-radius');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-dropdown-button:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let backgroundColor, padding, borderType, borderWidth, borderColor, borderRadius;\r\n\r\n      //Получаем значения background-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        backgroundColor = getResponsiveSetting(settings, 'background_color_toggle_button_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (backgroundColor) {\r\n        styles += colorPropertyStyled(backgroundColor, 'background-color');\r\n      }\r\n\r\n      //Получаем значения padding из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        padding = getResponsiveSetting(settings, 'padding_toggle_button_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (padding) {\r\n        styles += dimensionsControllerToStyles(padding);\r\n      }\r\n\r\n      //Получаем значения border-type из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderType = getResponsiveSetting(settings, 'border_type_toggle_button_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (borderType) {\r\n        styles += simplePropertyStyled(borderType, 'border-style');\r\n      }\r\n\r\n      //Получаем значения border-width из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderWidth = getResponsiveSetting(settings, 'border_width_toggle_button_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (borderWidth) {\r\n        styles += borderWidthStyled(borderWidth);\r\n      }\r\n\r\n      //Получаем значения border-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderColor = getResponsiveSetting(settings, 'border_color_toggle_button_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (borderColor) {\r\n        styles += colorPropertyStyled(borderColor, 'border-color');\r\n      }\r\n\r\n      //Получаем значения border-radius из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderRadius = getResponsiveSetting(settings, 'border_radius_toggle_button_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (borderRadius) {\r\n        styles += dimensionsControllerToStyles(borderRadius, 'border-radius');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-breadcrumbs {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let justifyContent, alignItems;\r\n\r\n      //Получаем значения justify-content из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        justifyContent = getResponsiveSetting(settings, 'breadcrumbs_style_alignment');\r\n      }\r\n\r\n      if (justifyContent) {\r\n        styles += simplePropertyStyled(justifyContent, 'justify-content');\r\n      }\r\n\r\n      //Получаем значения align-items из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        alignItems = getResponsiveSetting(settings, 'breadcrumbs_style_vertical_alignment');\r\n      }\r\n\r\n      if (alignItems) {\r\n        styles += simplePropertyStyled(alignItems, 'align-items');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-breadcrumbs-link {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let typographic, color;\r\n\r\n      //Получаем значения typographic из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        typographic = getResponsiveSetting(settings, 'breadcrumbs_links_style_typographic');\r\n      }\r\n\r\n      if (typographic) {\r\n        styles += typographicControllerToStyles(typographic);\r\n      }\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'breadcrumbs_links_style_color');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-breadcrumbs-link:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let typographic, color;\r\n\r\n      //Получаем значения typographic из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        typographic = getResponsiveSetting(settings, 'breadcrumbs_links_style_typographic', ':hover');\r\n      }\r\n\r\n      if (typographic) {\r\n        styles += typographicControllerToStyles(typographic);\r\n      }\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'breadcrumbs_links_style_color', ':hover');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-breadcrumbs-link:visited {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let color;\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'breadcrumbs_links_visited_style_color');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-breadcrumbs-separator-default,\r\n  && .altrp-nav-breadcrumbs-separator-text {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let typographic, color;\r\n\r\n      //Получаем значения typographic из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        typographic = getResponsiveSetting(settings, 'breadcrumbs_separator_default_style_typographic');\r\n      }\r\n\r\n      if (typographic) {\r\n        styles += typographicControllerToStyles(typographic);\r\n      }\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'breadcrumbs_separator_style_color');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-breadcrumbs-separator-default:hover,\r\n  && .altrp-nav-breadcrumbs-separator-text:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let typographic, color;\r\n\r\n      //Получаем значения typographic из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        typographic = getResponsiveSetting(settings, 'breadcrumbs_separator_default_style_typographic', ':hover');\r\n      }\r\n\r\n      if (typographic) {\r\n        styles += typographicControllerToStyles(typographic);\r\n      }\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'breadcrumbs_separator_style_color', ':hover');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-breadcrumbs-separator-icon svg {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let stroke, size;\r\n\r\n      //Получаем значения stroke из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        stroke = getResponsiveSetting(settings, 'breadcrumbs_separator_stroke_style_color');\r\n      }\r\n\r\n      if (stroke) {\r\n        styles += colorPropertyStyled(stroke, 'stroke');\r\n      }\r\n\r\n      //Получаем значения width и height из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        size = getResponsiveSetting(settings, 'breadcrumbs_separator_icon_width_style');\r\n      }\r\n\r\n      if (size) {\r\n        styles += iconSizeStyled(size);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-breadcrumbs-separator-icon:hover svg {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let stroke;\r\n\r\n      //Получаем значения stroke из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        stroke = getResponsiveSetting(settings, 'breadcrumbs_separator_stroke_style_color', ':hover');\r\n      }\r\n\r\n      if (stroke) {\r\n        styles += colorPropertyStyled(stroke, 'stroke');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-breadcrumbs-separator-icon svg:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let size;\r\n\r\n      //Получаем значения width и height из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        size = getResponsiveSetting(settings, 'breadcrumbs_separator_icon_width_style', ':hover');\r\n      }\r\n\r\n      if (size) {\r\n        styles += iconSizeStyled(size);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-breadcrumbs-current {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let typographic, color;\r\n\r\n      //Получаем значения typographic из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        typographic = getResponsiveSetting(settings, 'breadcrumbs_current_page_style_typographic');\r\n      }\r\n\r\n      if (typographic) {\r\n        styles += typographicControllerToStyles(typographic);\r\n      }\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'breadcrumbs_current_page_style_color');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-breadcrumbs-current:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let typographic, color;\r\n\r\n      //Получаем значения typographic из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        typographic = getResponsiveSetting(settings, 'breadcrumbs_current_page_style_typographic', ':hover');\r\n      }\r\n\r\n      if (typographic) {\r\n        styles += typographicControllerToStyles(typographic);\r\n      }\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'breadcrumbs_current_page_style_color', ':hover');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-breadcrumbs-separator-icon svg path {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let fill;\r\n\r\n      //Получаем значения fill из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        fill = getResponsiveSetting(settings, 'breadcrumbs_separator_style_color');\r\n      }\r\n\r\n      if (fill) {\r\n        styles += colorPropertyStyled(fill, 'fill');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-breadcrumbs-separator-icon:hover svg path {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let fill;\r\n\r\n      //Получаем значения fill из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        fill = getResponsiveSetting(settings, 'breadcrumbs_separator_style_color', ':hover');\r\n      }\r\n\r\n      if (fill) {\r\n        styles += colorPropertyStyled(fill, 'fill');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-breadcrumbs-label {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let horizontalPadding;\r\n\r\n      //Получаем значения horizontal-padding в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        horizontalPadding = getResponsiveSetting(settings, 'breadcrumbs_style_space_between');\r\n      }\r\n\r\n      if (horizontalPadding) {\r\n        styles += sizeStyled(horizontalPadding, 'padding-left');\r\n        styles += sizeStyled(horizontalPadding, 'padding-right');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-breadcrumbs-label:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let horizontalPadding;\r\n\r\n      //Получаем значения horizontal-padding в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        horizontalPadding = getResponsiveSetting(settings, 'breadcrumbs_style_space_between', ':hover');\r\n      }\r\n\r\n      if (horizontalPadding) {\r\n        styles += sizeStyled(horizontalPadding, 'padding-left');\r\n        styles += sizeStyled(horizontalPadding, 'padding-right');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link-chevron-dropdown path {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let color;\r\n\r\n      //Получаем значения fill и color  из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'chevron_color_dropdown_menu_section');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'fill');\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link-chevron-dropdown:hover path {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let color;\r\n\r\n      //Получаем значения fill и color  из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'chevron_color_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'fill');\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-dropdown {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let backgroundColor;\r\n\r\n      //Получаем значения background-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        backgroundColor = getResponsiveSetting(settings, 'background_color_dropdown_menu_section');\r\n      }\r\n\r\n      if (backgroundColor) {\r\n        styles += colorPropertyStyled(backgroundColor, 'background-color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-dropdown:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let backgroundColor;\r\n\r\n      //Получаем значения background-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        backgroundColor = getResponsiveSetting(settings, 'background_color_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (backgroundColor) {\r\n        styles += colorPropertyStyled(backgroundColor, 'background-color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-sub {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let backgroundColor, color;\r\n\r\n      //Получаем значения background-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        backgroundColor = getResponsiveSetting(settings, 'background_color_sub_dropdown_menu_section');\r\n      }\r\n\r\n      if (backgroundColor) {\r\n        styles += colorPropertyStyled(backgroundColor, 'background-color');\r\n      }\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'color_sub_dropdown_menu_section');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-sub:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let backgroundColor, color;\r\n\r\n      //Получаем значения background-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        backgroundColor = getResponsiveSetting(settings, 'background_color_sub_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (backgroundColor) {\r\n        styles += colorPropertyStyled(backgroundColor, 'background-color');\r\n      }\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'color_sub_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  ${props => {\r\n\r\n    const {settings, elementId} = props;\r\n\r\n    if (!elementId) {\r\n      return '';\r\n    }\r\n\r\n    let transformRotate, typographic, color, stroke, backgroundColor, width, borderType, borderWidth, borderColor, borderRadius, marginTop, borderRadiusTopRight;\r\n    let borderRadiusBottomLeft, marginLeft, typographicSubmenu, colorSubmenu, strokeSubmenu, background, widthSubmenu, borderTypeSubmenu, borderWidthSubmenu;\r\n    let borderColorSubmenu, borderRadiusSubmenu, marginRight, borderTopStyle, borderTopWidth, borderRadiusSubmenu2, borderRadiusTopRight2, borderRadiusBottomLeft2, borderTop2;\r\n\r\n    let styles = `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li .altrp-nav-menu-ul-dropdown-hor-ver-li-link-icon, .${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-children-hor-ver-li .altrp-nav-menu-ul-dropdown-hor-ver-li-link-icon {`;\r\n\r\n    //Получаем значения transform rotate из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      transformRotate = getResponsiveSetting(settings, 'chevron_rotate_dropdown_main_menu_style');\r\n    }\r\n\r\n    if (transformRotate) {\r\n      styles += transformRotateStyled(transformRotate);\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    //hover\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li:hover .altrp-nav-menu-ul-dropdown-hor-ver-li-link-icon, .${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-children-hor-ver-li:hover .altrp-nav-menu-ul-dropdown-hor-ver-li-link-icon {`;\r\n\r\n    //Получаем значения transform rotate из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      transformRotate = getResponsiveSetting(settings, 'chevron_rotate_dropdown_main_menu_style', ':hover');\r\n    }\r\n\r\n    if (transformRotate) {\r\n      styles += transformRotateStyled(transformRotate);\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-li-dropdown-hor-ver-link-label {`;\r\n\r\n    //Получаем значения typographic из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      typographic = getResponsiveSetting(settings, 'typographic_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (typographic) {\r\n      styles += typographicControllerToStyles(typographic);\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    //hover\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-li-dropdown-hor-ver-link-label:hover {`;\r\n\r\n    //Получаем значения typographic из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      typographic = getResponsiveSetting(settings, 'typographic_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (typographic) {\r\n      styles += typographicControllerToStyles(typographic);\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li .altrp-nav-menu-li-dropdown-hor-ver-link-label {`;\r\n\r\n    //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      color = getResponsiveSetting(settings, 'text_color_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (color) {\r\n      styles += colorPropertyStyled(color, 'color');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    //hover\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li:hover .altrp-nav-menu-li-dropdown-hor-ver-link-label {`;\r\n\r\n    //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      color = getResponsiveSetting(settings, 'text_color_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (color) {\r\n      styles += colorPropertyStyled(color, 'color');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li .altrp-nav-menu-ul-dropdown-hor-ver-li-link-icon path {`;\r\n\r\n    //Получаем значения stroke из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      stroke = getResponsiveSetting(settings, 'text_color_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (stroke) {\r\n      styles += colorPropertyStyled(stroke, 'stroke');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    //hover\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li:hover .altrp-nav-menu-ul-dropdown-hor-ver-li-link-icon path {`;\r\n\r\n    //Получаем значения stroke из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      stroke = getResponsiveSetting(settings, 'text_color_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (stroke) {\r\n      styles += colorPropertyStyled(stroke, 'stroke');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li {`;\r\n\r\n    //Получаем значения background-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      backgroundColor = getResponsiveSetting(settings, 'background_color_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (backgroundColor) {\r\n      styles += colorPropertyStyled(backgroundColor, 'background-color');\r\n    }\r\n\r\n    //Получаем значения width в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      width = getResponsiveSetting(settings, 'width_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (width) {\r\n      styles += sizeStyled(width, 'width');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    //hover\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li:hover {`;\r\n\r\n    //Получаем значения background-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      backgroundColor = getResponsiveSetting(settings, 'background_color_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (backgroundColor) {\r\n      styles += colorPropertyStyled(backgroundColor, 'background-color');\r\n    }\r\n\r\n    //Получаем значения width в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      width = getResponsiveSetting(settings, 'width_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (width) {\r\n      styles += sizeStyled(width, 'width');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver {`;\r\n\r\n    //Получаем значения border-type из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderType = getResponsiveSetting(settings, 'border_type_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderType) {\r\n      styles += simplePropertyStyled(borderType, 'border-style');\r\n    }\r\n\r\n    //Получаем значения border-width из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderWidth = getResponsiveSetting(settings, 'border_width_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderWidth) {\r\n      styles += borderWidthStyled(borderWidth);\r\n    }\r\n\r\n    //Получаем значения border-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderColor = getResponsiveSetting(settings, 'border_color_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderColor) {\r\n      styles += colorPropertyStyled(borderColor, 'border-color');\r\n    }\r\n\r\n    //Получаем значения border-radius из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderRadius = getResponsiveSetting(settings, 'border_radius_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderRadius) {\r\n      styles += dimensionsControllerToStyles(borderRadius, 'border-radius');\r\n    }\r\n\r\n    //Получаем значения margin-top в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      marginTop = getResponsiveSetting(settings, 'distance_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (marginTop) {\r\n      styles += sizeStyled(marginTop, 'margin-top');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    //hover\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver:hover {`;\r\n\r\n    //Получаем значения border-type из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderType = getResponsiveSetting(settings, 'border_type_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (borderType) {\r\n      styles += simplePropertyStyled(borderType, 'border-style');\r\n    }\r\n\r\n    //Получаем значения border-width из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderWidth = getResponsiveSetting(settings, 'border_width_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (borderWidth) {\r\n      styles += borderWidthStyled(borderWidth);\r\n    }\r\n\r\n    //Получаем значения border-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderColor = getResponsiveSetting(settings, 'border_color_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (borderColor) {\r\n      styles += colorPropertyStyled(borderColor, 'border-color');\r\n    }\r\n\r\n    //Получаем значения border-radius из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderRadius = getResponsiveSetting(settings, 'border_radius_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (borderRadius) {\r\n      styles += dimensionsControllerToStyles(borderRadius, 'border-radius');\r\n    }\r\n\r\n    //Получаем значения margin-top в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      marginTop = getResponsiveSetting(settings, 'distance_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (marginTop) {\r\n      styles += sizeStyled(marginTop, 'margin-top');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li:first-child {`;\r\n\r\n    //Получаем значения border-radius-top-right из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderRadiusTopRight = getResponsiveSetting(settings, 'border_radius_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderRadiusTopRight) {\r\n      styles += `border-radius: ${borderRadiusTopRight.top}${borderRadiusTopRight.unit} ${borderRadiusTopRight.right}${borderRadiusTopRight.unit} 0 0; `;\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    //hover\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li:first-child:hover {`;\r\n\r\n    //Получаем значения border-radius-top-right из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderRadiusTopRight = getResponsiveSetting(settings, 'border_radius_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (borderRadiusTopRight) {\r\n      styles += `border-radius: ${borderRadiusTopRight.top}${borderRadiusTopRight.unit} ${borderRadiusTopRight.right}${borderRadiusTopRight.unit} 0 0; `;\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li:last-child {`;\r\n\r\n    //Получаем значения border-radius-bottom-left из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderRadiusBottomLeft = getResponsiveSetting(settings, 'border_radius_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderRadiusBottomLeft) {\r\n      styles += `border-radius: 0 0 ${borderRadiusBottomLeft.bottom}${borderRadiusBottomLeft.unit} ${borderRadiusBottomLeft.left}${borderRadiusBottomLeft.unit}; `;\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    //hover\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li:last-child:hover {`;\r\n\r\n    //Получаем значения border-radius-bottom-left из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderRadiusBottomLeft = getResponsiveSetting(settings, 'border_radius_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (borderRadiusBottomLeft) {\r\n      styles += `border-radius: 0 0 ${borderRadiusBottomLeft.bottom}${borderRadiusBottomLeft.unit} ${borderRadiusBottomLeft.left}${borderRadiusBottomLeft.unit}; `;\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li-link-icon {`;\r\n\r\n    //Получаем значения margin-left в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      marginLeft = getResponsiveSetting(settings, 'submenu_indicator_space_main_menu_style');\r\n    }\r\n\r\n    if (marginLeft) {\r\n      styles += sizeStyled(marginLeft, 'margin-left');\r\n    }\r\n\r\n    //Получаем значения typographic-submenu из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      typographicSubmenu = getResponsiveSetting(settings, 'typographic_submenu_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (typographicSubmenu) {\r\n      styles += typographicControllerToStyles(typographicSubmenu);\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    //hover\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li-link-icon:hover {`;\r\n\r\n    //Получаем значения margin-left в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      marginLeft = getResponsiveSetting(settings, 'submenu_indicator_space_main_menu_style', ':hover');\r\n    }\r\n\r\n    if (marginLeft) {\r\n      styles += sizeStyled(marginLeft, 'margin-left');\r\n    }\r\n\r\n    //Получаем значения typographic-submenu из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      typographicSubmenu = getResponsiveSetting(settings, 'typographic_submenu_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (typographicSubmenu) {\r\n      styles += typographicControllerToStyles(typographicSubmenu);\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-children-hor-ver-li .altrp-nav-menu-li-dropdown-children-hor-ver-link-label {`;\r\n\r\n    //Получаем значения color-submenu из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      colorSubmenu = getResponsiveSetting(settings, 'text_color_submenu_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (colorSubmenu) {\r\n      styles += colorPropertyStyled(colorSubmenu, 'color');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    //hover\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-children-hor-ver-li:hover .altrp-nav-menu-li-dropdown-children-hor-ver-link-label {`;\r\n\r\n    //Получаем значения color-submenu из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      colorSubmenu = getResponsiveSetting(settings, 'text_color_submenu_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (colorSubmenu) {\r\n      styles += colorPropertyStyled(colorSubmenu, 'color');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-children-hor-ver-li .altrp-nav-menu-ul-dropdown-children-hor-ver-li-link-icon path {`;\r\n\r\n    //Получаем значения stroke-submenu из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      strokeSubmenu = getResponsiveSetting(settings, 'text_color_submenu_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (strokeSubmenu) {\r\n      styles += colorPropertyStyled(strokeSubmenu, 'stroke');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    //hover\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-children-hor-ver-li:hover .altrp-nav-menu-ul-dropdown-children-hor-ver-li-link-icon path {`;\r\n\r\n    //Получаем значения stroke-submenu из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      strokeSubmenu = getResponsiveSetting(settings, 'text_color_submenu_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (strokeSubmenu) {\r\n      styles += colorPropertyStyled(strokeSubmenu, 'stroke');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-children-hor-ver-li {`;\r\n\r\n    //Получаем значения background из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      background = getResponsiveSetting(settings, 'background_color_submenu_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (background) {\r\n      styles += colorPropertyStyled(background, 'background');\r\n    }\r\n\r\n    //Получаем значения width-submenu в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      widthSubmenu = getResponsiveSetting(settings, 'width_submenu_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (widthSubmenu) {\r\n      styles += sizeStyled(widthSubmenu, 'width');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    //hover\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-children-hor-ver-li:hover {`;\r\n\r\n    //Получаем значения background из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      background = getResponsiveSetting(settings, 'background_color_submenu_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (background) {\r\n      styles += colorPropertyStyled(background, 'background');\r\n    }\r\n\r\n    //Получаем значения width-submenu в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      widthSubmenu = getResponsiveSetting(settings, 'width_submenu_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (widthSubmenu) {\r\n      styles += sizeStyled(widthSubmenu, 'width');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-children-hor-ver {`;\r\n\r\n    //Получаем значения border-type-submenu из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderTypeSubmenu = getResponsiveSetting(settings, 'border_type_submenu_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderTypeSubmenu) {\r\n      styles += simplePropertyStyled(borderTypeSubmenu, 'border-style');\r\n    }\r\n\r\n    //Получаем значения border-width-submenu из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderWidthSubmenu = getResponsiveSetting(settings, 'border_width_submenu_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderWidthSubmenu) {\r\n      styles += borderWidthStyled(borderWidthSubmenu);\r\n    }\r\n\r\n    //Получаем значения border-color-submenu из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderColorSubmenu = getResponsiveSetting(settings, 'border_color_submenu_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderColorSubmenu) {\r\n      styles += colorPropertyStyled(borderColorSubmenu, 'border-color');\r\n    }\r\n\r\n    //Получаем значения border-radius-submenu из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderRadiusSubmenu = getResponsiveSetting(settings, 'border-radius_submenu_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderRadiusSubmenu) {\r\n      styles += dimensionsControllerToStyles(borderRadiusSubmenu, 'border-radius');\r\n    }\r\n\r\n    //Получаем значения margin-right в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      marginRight = getResponsiveSetting(settings, 'distance_submenu_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (marginRight) {\r\n      styles += sizeStyled(marginRight, 'margin-right');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    //hover\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-children-hor-ver:hover {`;\r\n\r\n    //Получаем значения border-type-submenu из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderTypeSubmenu = getResponsiveSetting(settings, 'border_type_submenu_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (borderTypeSubmenu) {\r\n      styles += simplePropertyStyled(borderTypeSubmenu, 'border-style');\r\n    }\r\n\r\n    //Получаем значения border-width-submenu из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderWidthSubmenu = getResponsiveSetting(settings, 'border_width_submenu_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (borderWidthSubmenu) {\r\n      styles += borderWidthStyled(borderWidthSubmenu);\r\n    }\r\n\r\n    //Получаем значения border-color-submenu из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderColorSubmenu = getResponsiveSetting(settings, 'border_color_submenu_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (borderColorSubmenu) {\r\n      styles += colorPropertyStyled(borderColorSubmenu, 'border-color');\r\n    }\r\n\r\n    //Получаем значения border-radius-submenu из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderRadiusSubmenu = getResponsiveSetting(settings, 'border-radius_submenu_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (borderRadiusSubmenu) {\r\n      styles += dimensionsControllerToStyles(borderRadiusSubmenu, 'border-radius');\r\n    }\r\n\r\n    //Получаем значения margin-right в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      marginRight = getResponsiveSetting(settings, 'distance_submenu_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (marginRight) {\r\n      styles += sizeStyled(marginRight, 'margin-right');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li-divider {`;\r\n\r\n    //Получаем значения border-top-style из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderTopStyle = getResponsiveSetting(settings, 'type_divider_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderTopStyle) {\r\n      styles += simplePropertyStyled(borderTopStyle, 'border-top-style');\r\n    }\r\n\r\n    //Получаем значения border-top-width в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderTopWidth = getResponsiveSetting(settings, 'height_divider_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderTopWidth) {\r\n      styles += sizeStyled(borderTopWidth, 'border-top-width');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    //hover\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li-divider:hover {`;\r\n\r\n    //Получаем значения border-top-width в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderTopWidth = getResponsiveSetting(settings, 'height_divider_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (borderTopWidth) {\r\n      styles += sizeStyled(borderTopWidth, 'border-top-width');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-children-hor-ver-only .altrp-nav-menu-ul-dropdown-children-hor-ver-li {`;\r\n\r\n    //Получаем значения border-radius из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderRadiusSubmenu2 = getResponsiveSetting(settings, 'border-radius_submenu_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderRadiusSubmenu2) {\r\n      styles += dimensionsControllerToStyles(borderRadiusSubmenu2, 'border-radius');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    //hover\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-children-hor-ver-only:hover .altrp-nav-menu-ul-dropdown-children-hor-ver-li {`;\r\n\r\n    //Получаем значения border-radius из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderRadiusSubmenu2 = getResponsiveSetting(settings, 'border-radius_submenu_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (borderRadiusSubmenu2) {\r\n      styles += dimensionsControllerToStyles(borderRadiusSubmenu2, 'border-radius');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-children-hor-ver-li:first-child {`;\r\n\r\n    //Получаем значения border-radius-top-right из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderRadiusTopRight2 = getResponsiveSetting(settings, 'border-radius_submenu_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderRadiusTopRight2) {\r\n      styles += `border-radius: ${borderRadiusTopRight2.top}${borderRadiusTopRight2.unit} ${borderRadiusTopRight2.right}${borderRadiusTopRight2.unit} 0 0; `;\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-children-hor-ver-li:last-child {`;\r\n\r\n    //Получаем значения border-radius-bottom-left из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderRadiusBottomLeft2 = getResponsiveSetting(settings, 'border-radius_submenu_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderRadiusBottomLeft2) {\r\n      styles += `border-radius: 0 0 ${borderRadiusBottomLeft2.bottom}${borderRadiusBottomLeft2.unit} ${borderRadiusBottomLeft2.left}${borderRadiusBottomLeft2.unit}; `;\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li:last-child .altrp-nav-menu-ul-dropdown-hor-ver-li-divider, .${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-children-hor-ver-ul .altrp-nav-menu-ul-dropdown-children-hor-ver-li:last-child .altrp-nav-menu-ul-dropdown-hor-ver-li-divider {`;\r\n\r\n    //Получаем значения border-top из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderTop2 = getResponsiveSetting(settings, 'height_divider_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderTop2) {\r\n      styles += `border-top: none; `;\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    return styles;\r\n    }\r\n  }\r\n\r\n`;\r\n\r\nexport default NavComponent;\r\n","export const CHANGE_CURRENT_PAGE = \"CHANGE_CURRENT_PAGE\";\r\nexport const CHANGE_CURRENT_PAGE_PROPERTY = \"CHANGE_CURRENT_PAGE_PROPERTY\";\r\n\r\nexport function changeCurrentPage(pageData) {\r\n  return {\r\n    type: CHANGE_CURRENT_PAGE,\r\n    pageData: pageData || {}\r\n  };\r\n}\r\n\r\nexport function changeCurrentPageProperty(propertyName, value) {\r\n  return {\r\n    type: CHANGE_CURRENT_PAGE_PROPERTY,\r\n    propertyName,\r\n    value,\r\n  };\r\n}\r\n\r\n"],"sourceRoot":""}