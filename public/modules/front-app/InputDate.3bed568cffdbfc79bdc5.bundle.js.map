{"version":3,"sources":["webpack:///./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","webpack:///./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack:///./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack:///./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","webpack:///./node_modules/@babel/runtime/helpers/esm/inherits.js","webpack:///./node_modules/@babel/runtime/helpers/esm/iterableToArray.js","webpack:///./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","webpack:///./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack:///./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js","webpack:///./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","webpack:///./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","webpack:///./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","webpack:///./node_modules/@babel/runtime/helpers/esm/typeof.js","webpack:///./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","webpack:///./resources/modules/editor/src/js/components/widgets/InputDateWidget.js","webpack:///./resources/modules/front-app/src/js/store/forms-data-storage/actions.js"],"names":["_arrayLikeToArray","arr","len","length","i","arr2","Array","_assertThisInitialized","self","ReferenceError","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","_inherits","subClass","superClass","TypeError","prototype","create","constructor","_iterableToArray","iter","Symbol","iterator","from","_possibleConstructorReturn","call","_setPrototypeOf","p","_taggedTemplateLiteral","strings","raw","slice","freeze","defineProperties","_toConsumableArray","isArray","arrayLikeToArray","iterableToArray","unsupportedIterableToArray","_typeof","_unsupportedIterableToArray","minLen","n","toString","name","test","window","altrpHelpers","isEditor","parseOptionsFromSettings","replaceContentWithData","renderAssetIcon","moment","getDataFromLocalStorage","altrpLibs","BlueprintDatetime","DateInput","TimePrecision","globalDefaults","push","AltrpFieldContainer","styled","div","settings","content_label_position_type","InputDateWidget","props","timeInput","onChange","val","userInput","Date","element","getSettings","getTime","format","dispatchFieldValueToStore","formId","getFormId","fieldName","getFieldId","indexOf","_","isObject","appStore","dispatch","changeFormFieldValue","change_actions","actionsManager","default","callAllWidgetActions","getIdForAction","getValue","timestamp","get","getState","toDate","component","elementDecorator","defaultValue","getContent","timePrecision","typeDate","locale","MINUTE","state","options","paramsForUpdate","altrpSelectRef","React","createRef","isValid","this","prevProps","prevState","setState","currentModel","getProperty","contentLoaded","currentDataStorage","updateValue","content_calculation","altrpforms","formsStore","prevContext","altrpdata","getData","altrpmodel","altrpuser","currentUser","altrppagestate","altrpPageState","altrpresponses","altrpmeta","altrpMeta","context","getCurrentModel","currentDataStorageLoaded","changedField","altrpstorage","isEqual","replace","eval","e","console","error","message","getId","path","formData","parseParamsFromString","AltrpModel","isEmpty","JSON","stringify","Resource","route","getRoute","getQueried","filters","data","getAll","label","label_icon","classLabel","styleLabel","getResponsiveSetting","marginBottom","label_style_spacing","size","unit","marginTop","marginRight","position","zIndex","content_label","className","style","content_required","type","frame","document","body","getElementById","contentWindow","dayPickerProps","firstDayOfWeek","months","weekdaysShort","minimalStyle","timePickerProps","showArrowButtons","precision","undefined","input","getName","minDate","maxDate","add","popoverProps","portalContainer","minimal","popoverClassName","canClearSelection","parseDate","str","disabled","content_readonly","placeholder","content_placeholder","formatDate","date","Component","CHANGE_FORM_FIELD_VALUE","CLEAR_FORM_FIELD_VALUE"],"mappings":"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","file":"InputDate.3bed568cffdbfc79bdc5.bundle.js","sourcesContent":["export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","import _typeof from \"@babel/runtime/helpers/typeof\";\nimport assertThisInitialized from \"./assertThisInitialized.js\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","const {\r\n  isEditor,\r\n  parseOptionsFromSettings,\r\n  replaceContentWithData,\r\n  renderAssetIcon,\r\n  moment,\r\n  getDataFromLocalStorage\r\n} = window.altrpHelpers;\r\nimport { changeFormFieldValue } from \"../../../../../front-app/src/js/store/forms-data-storage/actions\";\r\nconst { DateInput, TimePrecision } = window.altrpLibs.BlueprintDatetime;\r\n(window.globalDefaults = window.globalDefaults || []).push(`\r\n  .altrp-date-field-container .bp3-popover-wrapper, .altrp-date-field-container .bp3-popover-target {\r\n    width: 100%;\r\n  }\r\n\r\n  .altrp-date-picker-popover .bp3-datepicker-caption select + .bp3-icon {\r\n    right: 2px !important;\r\n  }\r\n\r\n  .altrp-date-picker-popover .bp3-datepicker-year-select select {\r\n    padding: 0 0 0 2px;\r\n  }\r\n`)\r\n\r\nconst AltrpFieldContainer = styled.div`\r\n  ${({ settings: { content_label_position_type } }) => {\r\n    switch (content_label_position_type) {\r\n      case \"left\": {\r\n        return \"display: flex\";\r\n      }\r\n      case \"right\": {\r\n        return \"display:flex;flex-direction:row-reverse;justify-content:flex-end;\";\r\n      }\r\n    }\r\n    return \"\";\r\n  }}\r\n`;\r\n\r\nclass InputDateWidget extends Component {\r\n  timeInput = null;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    props.element.component = this;\r\n    if (window.elementDecorator) {\r\n      window.elementDecorator(this);\r\n    }\r\n\r\n    this.defaultValue = this.getContent(\"content_default_value\") || \"\";\r\n\r\n    this.timePrecision = null;\r\n    this.typeDate = props.element.getSettings(\"content_time_type\", \"date\");\r\n    this.locale = this.props.element.getSettings(\"content_locale\", \"en\");\r\n\r\n    switch (this.typeDate) {\r\n      case \"date\":\r\n        this.typeDate = \"LL\";\r\n        break;\r\n      case \"time\":\r\n        this.typeDate = \"LT\";\r\n        this.timePrecision = TimePrecision.MINUTE\r\n        break\r\n      case \"dateTime\":\r\n        this.typeDate = \"llll\";\r\n        this.timePrecision = TimePrecision.MINUTE\r\n        break\r\n    }\r\n\r\n    let value = moment().locale(this.locale).toDate();\r\n\r\n    if(this.defaultValue) {\r\n      value = moment(this.defaultValue).locale(this.locale).toDate()\r\n    }\r\n\r\n    this.state = {\r\n      settings: { ...props.element.getSettings() },\r\n      // value: this.defaultValue,\r\n      options: parseOptionsFromSettings(\r\n        props.element.getSettings(\"content_options\")\r\n      ),\r\n      paramsForUpdate: null\r\n    };\r\n    this.altrpSelectRef = React.createRef();\r\n    if (this.getContent(\"content_default_value\")) {\r\n      let value = this.getContent(\"content_default_value\")\r\n      const format = this.props.element.getSettings('content_format') || 'YYYY-MM-DD';\r\n      value = moment(value);\r\n      value = value.isValid() ? value.format(format) : '';\r\n      this.dispatchFieldValueToStore(value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Чистит значение\r\n   */\r\n  clearValue() {\r\n    this.onChange(\"\");\r\n    this.dispatchFieldValueToStore(\"\", true);\r\n  }\r\n\r\n  /**\r\n   * Загрузка виджета\r\n   * @param {{}} prevProps\r\n   * @param {{}} prevState\r\n   */\r\n  async _componentDidMount(prevProps, prevState) {\r\n    if (this.props.element.getSettings(\"content_options\")) {\r\n      let options = parseOptionsFromSettings(\r\n        this.props.element.getSettings(\"content_options\")\r\n      );\r\n\r\n      this.setState(state => ({ ...state, options }));\r\n    }\r\n\r\n    let value = this.state.value;\r\n\r\n    /**\r\n     * Если динамическое значение загрузилось,\r\n     * то используем this.getContent для получение этого динамического значения\r\n     * старые динамические данные\r\n     * */\r\n    if (\r\n      _.get(value, \"dynamic\") &&\r\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\r\n    ) {\r\n      value = this.getContent(\"content_default_value\");\r\n    }\r\n\r\n    /**\r\n     * Если модель обновилась при смене URL\r\n     */\r\n    if (\r\n      prevProps &&\r\n      !prevProps.currentModel.getProperty(\"altrpModelUpdated\") &&\r\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\r\n    ) {\r\n      value = this.getContent(\"content_default_value\");\r\n\r\n      if(value) {\r\n        value = moment(value).locale(this.locale).toDate()\r\n        this.setState(\r\n          state => ({ ...state, value, contentLoaded: true }),\r\n          () => {\r\n            this.dispatchFieldValueToStore(value);\r\n          }\r\n        );\r\n      } else {\r\n        this.setState(\r\n          state => ({ ...state, contentLoaded: true }),\r\n        );\r\n      }\r\n\r\n      const format = this.props.element.getSettings('content_format') || 'YYYY-MM-DD';\r\n      value = moment(value);\r\n      value = value.isValid() ? value.format(format) : '';\r\n      this.setState(\r\n        state => ({ ...state, value, contentLoaded: true }),\r\n        () => {\r\n          this.dispatchFieldValueToStore(value);\r\n        }\r\n      );\r\n\r\n      return;\r\n    }\r\n\r\n    if (\r\n      this.props.currentModel.getProperty(\"altrpModelUpdated\") &&\r\n      this.props.currentDataStorage.getProperty(\"currentDataStorageLoaded\") &&\r\n      !this.state.contentLoaded\r\n    ) {\r\n      value = this.getContent(\"content_default_value\");\r\n\r\n      if(value) {\r\n        value = moment(value).locale(this.locale).toDate()\r\n        this.setState(\r\n          state => ({ ...state, value, contentLoaded: true }),\r\n          () => {\r\n            this.dispatchFieldValueToStore(value);\r\n          }\r\n        );\r\n      } else {\r\n        this.setState(\r\n          state => ({ ...state, contentLoaded: true }),\r\n        );\r\n      }\r\n      const format = this.props.element.getSettings('content_format') || 'YYYY-MM-DD';\r\n      value = moment(value);\r\n      value = value.isValid() ? value.format(format) : '';\r\n      this.setState(\r\n        state => ({ ...state, value, contentLoaded: true }),\r\n        () => {\r\n          this.dispatchFieldValueToStore(value);\r\n        }\r\n      );\r\n      return;\r\n    }\r\n\r\n    if (this.state.value !== value) {\r\n      this.setState(\r\n        state => ({ ...state, value }),\r\n        () => {\r\n          this.dispatchFieldValueToStore(value);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Обновление виджета\r\n   */\r\n  async _componentDidUpdate(prevProps, prevState) {\r\n\r\n    if (\r\n      prevProps &&\r\n      !prevProps.currentDataStorage.getProperty(\"currentDataStorageLoaded\") &&\r\n      this.props.currentDataStorage.getProperty(\"currentDataStorageLoaded\")\r\n    ) {\r\n      let value = this.getContent(\r\n        \"content_default_value\",\r\n      );\r\n      if(value) {\r\n        value = moment(value).locale(this.locale).toDate()\r\n        this.setState(\r\n          state => ({ ...state, value, contentLoaded: true }),\r\n          () => {\r\n            this.dispatchFieldValueToStore(value);\r\n          }\r\n        );\r\n      } else {\r\n        this.setState(\r\n          state => ({ ...state, contentLoaded: true }),\r\n        );\r\n      }\r\n      const format = this.props.element.getSettings('content_format') || 'YYYY-MM-DD';\r\n      value = moment(value);\r\n      value = value.isValid() ? value.format(format) : '';\r\n      this.setState(\r\n        state => ({ ...state, value, contentLoaded: true }),\r\n        () => {\r\n          this.dispatchFieldValueToStore(value);\r\n        }\r\n      );\r\n    }\r\n\r\n\r\n    this.updateValue(prevProps);\r\n  }\r\n\r\n  /**\r\n   * Обновить значение если нужно\r\n   * @param {{}} prevProps\r\n   */\r\n  updateValue(prevProps) {\r\n    if (isEditor()) {\r\n      return;\r\n    }\r\n\r\n    let content_calculation = this.props.element.getSettings(\r\n      \"content_calculation\"\r\n    );\r\n    const altrpforms = this.props.formsStore;\r\n    const fieldName = this.props.element.getFieldId();\r\n    const formId = this.props.element.getFormId();\r\n\r\n    if (!content_calculation) {\r\n      /**\r\n       * Обновить значение, если formsStore изменилось из другого компонента\r\n       */\r\n      const path = `${formId}.${fieldName}`;\r\n      if (\r\n        this.props.formsStore !== prevProps.formsStore &&\r\n        _.get(altrpforms, path) !== this.state.value\r\n      ) {\r\n        this.setState(state => ({\r\n          ...state,\r\n          value: moment(_.get(altrpforms, path)).locale(this.locale).toDate()\r\n        }));\r\n      }\r\n      return;\r\n    }\r\n\r\n    const prevContext = {};\r\n    const altrpdata = this.props.currentDataStorage.getData();\r\n    const altrpmodel = this.props.currentModel.getData();\r\n    const altrpuser = this.props.currentUser.getData();\r\n    const altrppagestate = this.props.altrpPageState.getData();\r\n    const altrpresponses = this.props.altrpresponses.getData();\r\n    const altrpmeta = this.props.altrpMeta.getData();\r\n    const context = this.props.element.getCurrentModel().getData();\r\n\r\n    if (content_calculation.indexOf(\"altrpdata\") !== -1) {\r\n      context.altrpdata = altrpdata;\r\n      if (!altrpdata.currentDataStorageLoaded) {\r\n        prevContext.altrpdata = altrpdata;\r\n      } else {\r\n        prevContext.altrpdata = prevProps.currentDataStorage.getData();\r\n      }\r\n    }\r\n\r\n    if (content_calculation.indexOf(\"altrpforms\") !== -1) {\r\n      context.altrpforms = altrpforms;\r\n      /**\r\n       * Не производим вычисления, если изменилось текущее поле\r\n       */\r\n      if (`${formId}.${fieldName}` === altrpforms.changedField) {\r\n        prevContext.altrpforms = altrpforms;\r\n      } else {\r\n        prevContext.altrpforms = prevProps.formsStore;\r\n      }\r\n    }\r\n\r\n    if (content_calculation.indexOf(\"altrpmodel\") !== -1) {\r\n      context.altrpmodel = altrpmodel;\r\n      prevContext.altrpmodel = prevProps.currentModel.getData();\r\n    }\r\n\r\n    if (content_calculation.indexOf(\"altrpuser\") !== -1) {\r\n      context.altrpuser = altrpuser;\r\n      prevContext.altrpuser = prevProps.currentUser.getData();\r\n    }\r\n\r\n    if (content_calculation.indexOf(\"altrpuser\") !== -1) {\r\n      context.altrpuser = altrpuser;\r\n      prevContext.altrpuser = prevProps.currentUser.getData();\r\n    }\r\n\r\n    if (content_calculation.indexOf(\"altrppagestate\") !== -1) {\r\n      context.altrppagestate = altrppagestate;\r\n      prevContext.altrppagestate = prevProps.altrpPageState.getData();\r\n    }\r\n\r\n    if (content_calculation.indexOf(\"altrpmeta\") !== -1) {\r\n      context.altrpmeta = altrpmeta;\r\n      prevContext.altrpmeta = prevProps.altrpMeta.getData();\r\n    }\r\n\r\n    if (content_calculation.indexOf(\"altrpresponses\") !== -1) {\r\n      context.altrpresponses = altrpresponses;\r\n      prevContext.altrpresponses = prevProps.altrpresponses.getData();\r\n    }\r\n\r\n    if (content_calculation.indexOf(\"altrpstorage\") !== -1) {\r\n      context.altrpstorage = getDataFromLocalStorage(\"altrpstorage\", {});\r\n    }\r\n\r\n    if (\r\n      _.isEqual(prevProps.currentDataStorage, this.props.currentDataStorage) &&\r\n      _.isEqual(prevProps.currentUser, this.props.currentUser) &&\r\n      _.isEqual(prevProps.formsStore, this.props.formsStore) &&\r\n      _.isEqual(prevProps.altrpPageState, this.props.altrpPageState) &&\r\n      _.isEqual(prevProps.altrpMeta, this.props.altrpMeta) &&\r\n      _.isEqual(prevProps.altrpresponses, this.props.altrpresponses) &&\r\n      _.isEqual(prevProps.currentModel, this.props.currentModel)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    if (\r\n      !_.isEqual(prevProps.formsStore, this.props.formsStore) &&\r\n      `${formId}.${fieldName}` === altrpforms.changedField\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    let value = \"\";\r\n\r\n    try {\r\n      content_calculation = content_calculation\r\n        .replace(/}}/g, \"')\")\r\n        .replace(/{{/g, \"_.get(context, '\");\r\n      value = eval(content_calculation);\r\n      if (value === this.state.value) {\r\n        return;\r\n      }\r\n      this.setState(\r\n        state => ({ ...state, value }),\r\n        () => {\r\n          this.dispatchFieldValueToStore(value);\r\n        }\r\n      );\r\n    } catch (e) {\r\n      console.error(\r\n        \"Evaluate error in Input \" + e.message,\r\n        this.props.element.getId()\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Обновляет опции для селекта при обновлении данных, полей формы\r\n   */\r\n  async updateOptions() {\r\n    {\r\n      let formId = this.props.element.getFormId();\r\n      let paramsForUpdate = this.props.element.getSettings(\"params_for_update\");\r\n      let formData = _.get(this.props.formsStore, [formId], {});\r\n      paramsForUpdate = parseParamsFromString(\r\n        paramsForUpdate,\r\n        new AltrpModel(formData)\r\n      );\r\n      /**\r\n       * Сохраняем параметры запроса, и если надо обновляем опции\r\n       */\r\n      let options = [...this.state.options];\r\n\r\n      if (!_.isEqual(paramsForUpdate, this.state.paramsForUpdate)) {\r\n        if (!_.isEmpty(paramsForUpdate)) {\r\n          if (this.props.element.getSettings(\"params_as_filters\", false)) {\r\n            paramsForUpdate = JSON.stringify(paramsForUpdate);\r\n            options = await new Resource({\r\n              route: this.getRoute()\r\n            }).getQueried({ filters: paramsForUpdate });\r\n          } else {\r\n            options = await new Resource({ route: this.getRoute() }).getQueried(\r\n              paramsForUpdate\r\n            );\r\n          }\r\n          options = !_.isArray(options) ? options.data : options;\r\n          options = _.isArray(options) ? options : [];\r\n        } else if (this.state.paramsForUpdate) {\r\n          options = await new Resource({ route: this.getRoute() }).getAll();\r\n          options = !_.isArray(options) ? options.data : options;\r\n          options = _.isArray(options) ? options : [];\r\n        }\r\n\r\n        this.setState(state => ({\r\n          ...state,\r\n          paramsForUpdate,\r\n          options\r\n        }));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Изменение значения в виджете\r\n   * @param val\r\n   * @param {boolean} userInput\r\n   */\r\n  onChange = (val, userInput) =>{\r\n    let value = \"\";\r\n\r\n    if (val) {\r\n      value = new Date(val);\r\n      let timestamp = this.props.element.getSettings(\"content_timestamp\");\r\n\r\n      if (timestamp) {\r\n        value = value.getTime(); // timestamp\r\n      } else{\r\n        const format = this.props.element.getSettings('content_format') || 'YYYY-MM-DD';\r\n        value = moment(value).format(format)\r\n      }\r\n    }\r\n    this.dispatchFieldValueToStore(value, userInput);\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Передадим значение в хранилище формы\r\n   * @param {*} value\r\n   * @param {boolean} userInput true - имзенилось пользователем\r\n   */\r\n  dispatchFieldValueToStore = async (value, userInput = false) => {\r\n    let formId = this.props.element.getFormId();\r\n    let fieldName = this.props.element.getFieldId();\r\n    if (fieldName.indexOf(\"{{\") !== -1) {\r\n      fieldName = replaceContentWithData(fieldName);\r\n    }\r\n\r\n    if (_.isObject(this.props.appStore) && fieldName && formId) {\r\n      this.props.appStore.dispatch(\r\n        changeFormFieldValue(fieldName, value, formId, userInput)\r\n      );\r\n\r\n      if (userInput) {\r\n        const change_actions = this.props.element.getSettings(\"change_actions\");\r\n\r\n        if (change_actions && !isEditor()) {\r\n          const actionsManager = (\r\n            await import(\r\n              /* webpackChunkName: 'ActionsManager' */\r\n              \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\r\n            )\r\n          ).default;\r\n          await actionsManager.callAllWidgetActions(\r\n            this.props.element.getIdForAction(),\r\n            \"change\",\r\n            change_actions,\r\n            this.props.element\r\n          );\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * Взовращает имя для атрибута name\r\n   * @return {string}\r\n   */\r\n  getName() {\r\n    return `${this.props.element.getFormId()}[${this.props.element.getFieldId()}]`;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns {Date}\r\n   */\r\n  getValue = ()=>{\r\n    let value ;\r\n    let formId = this.props.element.getFormId();\r\n    let fieldName = this.props.element.getFieldId();\r\n    const format = this.props.element.getSettings('content_format') || 'YYYY-MM-DD'\r\n    const timestamp = this.props.element.getSettings(\"content_timestamp\");\r\n\r\n    if(isEditor()){\r\n      value = new Date();\r\n    } else {\r\n      value = _.get(appStore.getState(), `formsStore.${formId}.${fieldName}`, '')\r\n      if(! value){\r\n        value = new Date();\r\n\r\n      } else if(timestamp){\r\n        value = new Date(value);\r\n      } else {\r\n        value = moment(value, format)\r\n        value = value.toDate();\r\n      }\r\n    }\r\n    return value;\r\n  }\r\n  render() {\r\n    let label = null;\r\n    const settings = this.props.element.getSettings();\r\n    const {\r\n      label_icon\r\n    } = settings;\r\n    let classLabel = \"\";\r\n    let styleLabel = {};\r\n    const content_label_position_type = this.props.element.getResponsiveSetting(\r\n      \"content_label_position_type\"\r\n    );\r\n\r\n    switch (content_label_position_type) {\r\n      case \"top\":\r\n        styleLabel = {\r\n          marginBottom: this.state.settings.label_style_spacing\r\n            ? this.state.settings.label_style_spacing.size +\r\n            this.state.settings.label_style_spacing.unit\r\n            : 2 + \"px\"\r\n        };\r\n        classLabel = \"\";\r\n        break;\r\n      case \"bottom\":\r\n        styleLabel = {\r\n          marginTop: this.state.settings.label_style_spacing\r\n            ? this.state.settings.label_style_spacing.size +\r\n            this.state.settings.label_style_spacing.unit\r\n            : 2 + \"px\"\r\n        };\r\n        classLabel = \"\";\r\n        break;\r\n      case \"left\":\r\n        styleLabel = {\r\n          marginRight: this.state.settings.label_style_spacing\r\n            ? this.state.settings.label_style_spacing.size +\r\n            this.state.settings.label_style_spacing.unit\r\n            : 2 + \"px\"\r\n        };\r\n        classLabel = \"altrp-field-label-container-left\";\r\n        break;\r\n      case \"absolute\":\r\n        styleLabel = {\r\n          position: \"absolute\",\r\n          zIndex: 2\r\n        };\r\n        classLabel = \"\";\r\n        break;\r\n    }\r\n\r\n    if (this.state.settings.content_label) {\r\n      label = (\r\n        <div\r\n          className={\"altrp-field-label-container \" + classLabel}\r\n          style={styleLabel}\r\n        >\r\n          <label\r\n            className={`altrp-field-label ${this.state.settings.content_required\r\n              ? \"altrp-field-label--required\"\r\n              : \"\"\r\n              }`}\r\n          >\r\n            {this.state.settings.content_label}\r\n          </label>\r\n          {label_icon && label_icon.type && (\r\n            <span className=\"altrp-label-icon\">\r\n              {renderAssetIcon(label_icon)}\r\n            </span>\r\n          )}\r\n        </div>\r\n      );\r\n    } else {\r\n      label = null;\r\n    }\r\n\r\n\r\n    if (0) {\r\n      const isValid = moment.unix(value).isValid();\r\n\r\n      if (isValid) {\r\n        try {\r\n          value = moment.unix(value / 1000).format(\"YYYY-MM-DD\");\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      }\r\n    }\r\n\r\n    let frame = document.body;\r\n\r\n    if (isEditor()) {\r\n      frame = document.getElementById(\"editorContent\").contentWindow.document.body\r\n    }\r\n\r\n    const locale = this.locale;\r\n    let typeDate = this.props.element.getSettings(\"content_time_type\", \"date\");\r\n    let timePrecision = this.timePrecision;\r\n\r\n    const dayPickerProps = {\r\n      firstDayOfWeek: 1,\r\n      className: this.typeDate === 'time' ? 'altrp-hidden' : '',\r\n    }\r\n\r\n    switch (locale) {\r\n      case \"ru\":\r\n        dayPickerProps.months = [\"Январь\", \"Февраль\", \"Март\", \"Апрель\", \"Май\", \"Июнь\", \"Июль\", \"Август\", \"Сентябрь\", \"Октябрь\", \"Ноябрь\", \"Декабрь\"];\r\n        dayPickerProps.weekdaysShort = ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб',]\r\n    }\r\n\r\n    const minimalStyle = this.props.element.getResponsiveSetting(\"picker_minimal\", false);\r\n    const timePickerProps = {\r\n      showArrowButtons: true,\r\n      precision: timePrecision,\r\n      onChange: typeDate === 'date' ? this.onChange : undefined,\r\n      className: typeDate === 'date' ? 'altrp-hidden' : '',\r\n    };\r\n    const format = this.props.element.getSettings('content_format') || 'YYYY-MM-DD';\r\n    const input = (\r\n      <div className=\"altrp-input-wrapper\">\r\n        <DateInput\r\n          name={this.getName()}\r\n          minDate={new Date(0)}\r\n          maxDate={moment().add(20,'year').toDate()}\r\n          dayPickerProps={dayPickerProps}\r\n          popoverProps={{\r\n            portalContainer: frame,\r\n            minimal: minimalStyle,\r\n            popoverClassName: \"altrp-date-picker-popover altrp-date-picker-popover-\" + this.props.element.getId(),\r\n            // popoverClassName: \"altrp-date-pickerpopover\" + this.props.element.getId(),\r\n          }}\r\n          onChange={this.typeDate !== 'LT' ? this.onChange : undefined}\r\n          className={\"altrp-date-picker\" + this.props.element.getId()}\r\n          timePrecision={timePrecision}\r\n          canClearSelection={false}\r\n          // showActionsBar\r\n          parseDate={(str, locale) => {\r\n            return moment(str, this.typeDate).locale(locale).toDate();\r\n          }}\r\n          timePickerProps={timePickerProps}\r\n          disabled={this.state.settings.content_readonly}\r\n          placeholder={this.state.settings.content_placeholder}\r\n          formatDate={(date, locale) => {\r\n            return moment(date).locale(locale).format(format);\r\n          }}\r\n          value={this.getValue()}\r\n          locale={locale}\r\n        />\r\n      </div>\r\n    );\r\n\r\n    return (\r\n      <AltrpFieldContainer\r\n        settings={settings}\r\n        className=\"altrp-field-container altrp-date-field-container \"\r\n      >\r\n        {content_label_position_type === \"top\" ? label : \"\"}\r\n        {content_label_position_type === \"left\" ? label : \"\"}\r\n        {content_label_position_type === \"right\" ? label : \"\"}\r\n        {content_label_position_type === \"absolute\" ? label : \"\"}\r\n        {/* .altrp-field-label-container */}\r\n        {input}\r\n        {content_label_position_type === \"bottom\" ? label : \"\"}\r\n      </AltrpFieldContainer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputDateWidget;\r\n","export const CHANGE_FORM_FIELD_VALUE = 'CHANGE_FORM_FIELD_VALUE';\nexport const CLEAR_FORM_FIELD_VALUE = 'CHANGE_FORM_FIELD_VALUE';\n\n/**\n * Получает данные поля формы и сохраняет в хранилище\n * @param {string}fieldName\n * @param {*}value\n * @param {string}formId\n * @param {boolean}userInput\n * @return {{type: string, fieldName: *, value: *, formId: *}}\n */\nexport function changeFormFieldValue(fieldName, value, formId, userInput) {\n  return {\n    type: CHANGE_FORM_FIELD_VALUE,\n    fieldName,\n    value,\n    formId,\n    changedField: userInput ? `${formId}.${fieldName}` : null,\n  };\n}\n/**\n * Очистить данные поля формы и сохраняет в хранилище\n * @param {string | null}formId\n * @return {{type: string, fieldName: *, value: *, formId: *}}\n */\nexport function clearFormStorage(formId = null) {\n  return {\n    type: CLEAR_FORM_FIELD_VALUE,\n    formId,\n  };\n}\n\n"],"sourceRoot":""}