{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/classes/AltrpModel.js","webpack:///./resources/modules/editor/src/js/components/widgets/ButtonWidget.js"],"names":["AltrpModel","data","this","cloneDeep","clone","isEmpty","name","defaultValue","get","has","value","getData","set","unset","window","globalDefaults","push","Link","ButtonWidget","props","getClasses","classes","isActive","isDisabled","state","settings","element","getSettings","pending","component","elementDecorator","baseRender","render","onClick","bind","default","unregisterWidgetActions","getId","e","persist","isEditor","preventDefault","getResponsiveSetting","length","stopPropagation","actionsManager","callAllWidgetActions","getIdForAction","getForms","setState","forEach","form","submit","getModelId","res","success","redirect_to_prev_page","redirect_after","history","back","parseURLTemplate","alert","message","console","error","target","href","replace","location","origin","pathname","indexOf","elementId","getHTMLElementById","scrollToElement","mainScrollbars","toggleTrigger","includes","IDs","split","elementsToPrint","trim","getComponentByElementId","getStylesHTMLElement","stylesElement","_","document","head","printElements","link_link","tooltip","advanced_tooltip","background_image","modelData","hasCardModel","getCardModel","currentModel","position_css_classes","url","buttonText","getContent","buttonMediaRight","button_icon_right","buttonMediaLeft","button_icon_left","buttonMediaTop","button_icon_top","buttonMediaBottom","button_icon_bottom","existingIconsString","buttonInner","sort","join","className","renderAsset","isObject","button","id","position_css_id","title","link","toPrevPage","tag","to","Component"],"mappings":"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","file":"ButtonWidget.628a26d438026e314d74.bundle.js","sourcesContent":["/**\r\n * Имеет интерфейс для доступы к свойствам data (любой вложенности)\r\n * @class AltrpModel\r\n */\r\nimport cloneDeep from 'lodash.clonedeep';\r\nimport get from 'lodash.get';\r\nimport set from 'lodash.set';\r\nimport has from 'lodash.has';\r\nimport unset from 'lodash.unset';\r\nimport isEmpty from 'lodash.isempty';\r\n// import {cloneDeep, get, set, has, unset, isString, isEmpty} from \"lodash\";\r\n\r\nclass AltrpModel {\r\n  constructor(data = {}) {\r\n    this.data = cloneDeep(data);\r\n  }\r\n\r\n  /**\r\n   * Возваращает объект данных\r\n   * @params {boolean} clone - клонировать или ссылку на данные\r\n   * @return {{}}\r\n   */\r\n  getData(clone = true) {\r\n    if(clone){\r\n      return cloneDeep(this.data);\r\n    }\r\n    return this.data;\r\n  }\r\n\r\n  /**\r\n   * Пустой ли объект\r\n   */\r\n  isEmpty(){\r\n    return isEmpty(this.data);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  getProperty(name, defaultValue = '') {\r\n    return get(this.data, name, defaultValue);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  hasProperty(name, defaultValue = '') {\r\n    return has(this.data, name);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {{}}\r\n   */\r\n  setProperty(name, value = '') {\r\n    if(value instanceof AltrpModel){\r\n      value = value.getData(false);\r\n    }\r\n    return set(this.data, name, value);\r\n  }\r\n  /**\r\n   * Удаляет свойства name\r\n   * @params {string} name\r\n   * @return {*}\r\n   */\r\n  unsetProperty(name) {\r\n    return unset(this.data, name);\r\n  }\r\n}\r\nwindow.AltrpModel = AltrpModel;\r\nexport default AltrpModel\r\n","import {\r\n  getComponentByElementId,\r\n  getHTMLElementById,\r\n  isEditor,\r\n  parseURLTemplate,\r\n  printElements,\r\n  renderAsset,\r\n  scrollToElement\r\n} from \"../../../../../front-app/src/js/helpers\";\r\n\r\n(window.globalDefaults = window.globalDefaults || []).push(`\r\n  .altrp-btn-wrapper {\r\n    align-items: center;\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    & img {\r\n      max-width: 100%;\r\n    }\r\n  }\r\n\r\n  .altrp-btn:hover {\r\n    text-decoration: none;\r\n  }\r\n\r\n  .altrp-btn {\r\n    width: auto;\r\n    text-decoration: none;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    border-radius: 6px;\r\n    flex-direction: row;\r\n    background-color: #343B4C;\r\n    color: #FFFFFF;\r\n    padding-top: 20px;\r\n    padding-right: 25px;\r\n    padding-bottom: 20px;\r\n    padding-left: 25px\r\n\r\n    &_gray {\r\n      background-color: #8E94AA;\r\n      color: #fff;\r\n    }\r\n\r\n    &__icon {\r\n      transform: scale(0.6);\r\n    }\r\n\r\n    &-icon {\r\n      display: flex;\r\n      justify-content: center;\r\n    }\r\n\r\n    & svg {\r\n      height: 25px;\r\n      width: 25px;\r\n    }\r\n  }\r\n\r\n  .btn-container-row {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n  }\r\n\r\n  .btn-container-column {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n  }\r\n`);\r\n\r\nconst Link = window.Link;\r\n\r\nclass ButtonWidget extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      settings: props.element.getSettings(),\r\n      pending: false\r\n    };\r\n    props.element.component = this;\r\n    if (window.elementDecorator) {\r\n      window.elementDecorator(this);\r\n    }\r\n    if(props.baseRender){\r\n      this.render = props.baseRender(this);\r\n    }\r\n    this.onClick = this.onClick.bind(this);\r\n  }\r\n  /**\r\n   * Компонент удаляется со страницы\r\n   */\r\n  async _componentWillUnmount() {\r\n    const actionsManager = (\r\n      await import(/* webpackChunkName: 'ActionsManager' */\r\n        \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\r\n      )\r\n    ).default;\r\n    actionsManager.unregisterWidgetActions(this.props.element.getId());\r\n  }\r\n\r\n  /**\r\n   * Клик по кнопке\r\n   * @param e\r\n   * @return {Promise<void>}\r\n   */\r\n  async onClick(e) {\r\n    e.persist();\r\n    if (isEditor()) {\r\n      e.preventDefault();\r\n    } else if (this.props.element.getResponsiveSetting(\"actions\", null, []).length) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      const actionsManager = (\r\n        await import(/* webpackChunkName: 'ActionsManager' */\r\n          \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\r\n        )\r\n      ).default;\r\n      await actionsManager.callAllWidgetActions(\r\n        this.props.element.getIdForAction(),\r\n        'click',\r\n        this.props.element.getSettings(\"actions\", []),\r\n        this.props.element\r\n      );\r\n    }\r\n    if (this.props.element.getForms().length) {\r\n      this.setState(state => ({ ...state, pending: true }));\r\n      this.props.element.getForms().forEach(\r\n        /**\r\n         * @param {AltrpForm} form\r\n         */ async form => {\r\n          try {\r\n            let res = await form.submit(\r\n              this.getModelId(),\r\n              this.props.element.getResponsiveSetting(\"form_confirm\")\r\n            );\r\n            if (res.success) {\r\n              let {\r\n                redirect_to_prev_page,\r\n                redirect_after\r\n              } = this.state.settings;\r\n              if (redirect_to_prev_page) {\r\n                return history.back();\r\n              }\r\n              if (redirect_after) {\r\n                redirect_after = parseURLTemplate(redirect_after, res.data);\r\n                return this.props.history.push(redirect_after);\r\n              }\r\n\r\n              if (this.props.element.getResponsiveSetting(\"text_after\", null,\"\")) {\r\n                alert(this.props.element.getResponsiveSetting(\"text_after\", null, \"\"));\r\n              }\r\n            } else if (res.message) {\r\n              alert(res.message);\r\n            }\r\n            this.setState(state => ({ ...state, pending: false }));\r\n          } catch (e) {\r\n            console.error(e);\r\n            this.setState(state => ({ ...state, pending: false }));\r\n          }\r\n        }\r\n      );\r\n    }\r\n    // else      if (\r\n    //   this.props.element.getSettings(\"popup_trigger_type\") &&\r\n    //   this.props.element.getSettings(\"popup_id\")\r\n    // ) {\r\n    //   this.props.appStore.dispatch(\r\n    //     togglePopup(this.props.element.getSettings(\"popup_id\"))\r\n    //   );\r\n    //   /**\r\n    //    * Проверим надо ли по ID скроллить к элементу\r\n    //    */\r\n    // }\r\n    else if (\r\n      e.target.href &&\r\n      e.target.href\r\n        .replace(window.location.origin + window.location.pathname, \"\")\r\n        .indexOf(\"#\") === 0\r\n    ) {\r\n      let elementId = e.target.href\r\n        .replace(window.location.origin + window.location.pathname, \"\")\r\n        .replace(\"#\", \"\");\r\n      const element = getHTMLElementById(elementId);\r\n      if (element) {\r\n        e.preventDefault();\r\n        scrollToElement(mainScrollbars, element);\r\n      }\r\n    } else if (this.props.element.getResponsiveSetting(\"hide_elements_trigger\")) {\r\n      this.props.toggleTrigger(\r\n        this.props.element.getResponsiveSetting(\"hide_elements_trigger\")\r\n      );\r\n    } else if (\r\n      this.props.element\r\n        .getResponsiveSetting(\"other_action_type\", '',[])\r\n        .includes(\"print_elements\")\r\n    ) {\r\n      let IDs = this.props.element.getResponsiveSetting(\"print_elements_ids\", null,\"\");\r\n      IDs = IDs.split(\",\");\r\n      let elementsToPrint = [];\r\n      IDs.forEach(elementId => {\r\n        if (!elementId || !elementId.trim()) {\r\n          return;\r\n        }\r\n        getHTMLElementById(elementId.trim()) &&\r\n          elementsToPrint.push(getHTMLElementById(elementId));\r\n        if (getComponentByElementId(elementId.trim())?.getStylesHTMLElement) {\r\n          let stylesElement = getComponentByElementId(\r\n            elementId.trim()\r\n          ).getStylesHTMLElement();\r\n          if (stylesElement) {\r\n            elementsToPrint.push(stylesElement);\r\n          }\r\n        }\r\n      });\r\n      if (_.get(window, \"stylesModule.stylesContainer.current\")) {\r\n        elementsToPrint.push(\r\n          _.get(window, \"stylesModule.stylesContainer.current\")\r\n        );\r\n      }\r\n      elementsToPrint.push(document.head);\r\n      printElements(elementsToPrint);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Получить css классы для кнопки\r\n   */\r\n  getClasses = ()=>{\r\n    let classes = 'altrp-btn ';\r\n    if(this.isActive()){\r\n      classes += 'active '\r\n    }\r\n    if(this.isDisabled()){\r\n      classes += 'state-disabled '\r\n    }\r\n    return classes;\r\n  }\r\n\r\n  render() {\r\n    const { link_link = {}, advanced_tooltip: tooltip } = this.state.settings;\r\n    const { back } = history;\r\n    const background_image = this.props.element.getResponsiveSetting(\r\n      \"background_image\",\r\n      null,\r\n      {}\r\n    );\r\n\r\n    let modelData = this.props.element.hasCardModel()\r\n      ? this.props.element.getCardModel().getData()\r\n      : this.props.currentModel.getData();\r\n    let classes =\r\n      this.getClasses() + (this.state.settings.position_css_classes || \"\");\r\n    if (background_image.url) {\r\n      classes += \" altrp-background-image\";\r\n    }\r\n\r\n    let buttonText = this.props.element.getContent(\"button_text\");\r\n    let buttonMediaRight = { ...this.state.settings.button_icon_right };\r\n    let buttonMediaLeft = { ...this.state.settings.button_icon_left };\r\n    let buttonMediaTop = { ...this.state.settings.button_icon_top };\r\n    let buttonMediaBottom = { ...this.state.settings.button_icon_bottom };\r\n\r\n    const showIcon = buttonMediaRight.url || buttonMediaLeft.url || buttonMediaTop.url || buttonMediaBottom.url;\r\n\r\n    let existingIconsString = '';\r\n\r\n    if (showIcon) {\r\n      if (buttonMediaRight.url) {\r\n        existingIconsString += 'r'\r\n      }\r\n\r\n      if (buttonMediaLeft.url) {\r\n        existingIconsString += 'l'\r\n      }\r\n\r\n      if (buttonMediaTop.url) {\r\n        existingIconsString += 't'\r\n      }\r\n\r\n      if (buttonMediaBottom.url) {\r\n        existingIconsString += 'b'\r\n      }\r\n    }\r\n\r\n    existingIconsString = existingIconsString.split('').sort().join('');\r\n\r\n    let buttonInner = buttonText || \"\";\r\n\r\n    if (existingIconsString === 'r') {\r\n      buttonInner = (\r\n        <div className=\"btn-container-row\">\r\n          <span></span>\r\n          {buttonText}\r\n          <span className={\"altrp-btn-icon-right \"}>\r\n            {renderAsset(buttonMediaRight)}{\" \"}\r\n          </span>\r\n        </div>\r\n      )\r\n    }\r\n\r\n\r\n    if (existingIconsString === 'l') {\r\n      buttonInner = (\r\n        <div className=\"btn-container-row\">\r\n          <span className={\"altrp-btn-icon-left \"}>\r\n            {renderAsset(buttonMediaLeft)}{\" \"}\r\n          </span>\r\n          {buttonText}\r\n          <span></span>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    if (existingIconsString === 't') {\r\n      buttonInner = (\r\n        <div className=\"btn-container-column\">\r\n          <span className={\"altrp-btn-icon-top \"}>\r\n            {renderAsset(buttonMediaTop)}{\" \"}\r\n          </span>\r\n          {buttonText}\r\n          <span></span>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    if (existingIconsString === 'b') {\r\n      buttonInner = (\r\n        <div className=\"btn-container-column\">\r\n          <span></span>\r\n          {buttonText}\r\n          <span className={\"altrp-btn-icon-bottom \"}>\r\n            {renderAsset(buttonMediaBottom)}{\" \"}\r\n          </span>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    if (existingIconsString === 'blrt') {\r\n      buttonInner = (\r\n        <div className=\"btn-container-column\">\r\n          <span className={\"altrp-btn-icon-top \"}>\r\n            {renderAsset(buttonMediaTop)}{\" \"}\r\n          </span>\r\n          <div className=\"btn-container-row\">\r\n            <span className={\"altrp-btn-icon-left \"}>\r\n              {renderAsset(buttonMediaLeft)}{\" \"}\r\n            </span>\r\n            {buttonText}\r\n            <span className={\"altrp-btn-icon-right \"}>\r\n              {renderAsset(buttonMediaRight)}{\" \"}\r\n            </span>\r\n          </div>\r\n          <span className={\"altrp-btn-icon-bottom \"}>\r\n            {renderAsset(buttonMediaBottom)}{\" \"}\r\n          </span>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    if (existingIconsString === 'brt') {\r\n      buttonInner = (\r\n        <div className=\"btn-container-column\">\r\n          <span className={\"altrp-btn-icon-top \"}>\r\n            {renderAsset(buttonMediaTop)}{\" \"}\r\n          </span>\r\n          <div className=\"btn-container-row\">\r\n            <span></span>\r\n            {buttonText}\r\n            <span className={\"altrp-btn-icon-right \"}>\r\n              {renderAsset(buttonMediaRight)}{\" \"}\r\n            </span>\r\n          </div>\r\n          <span className={\"altrp-btn-icon-bottom \"}>\r\n            {renderAsset(buttonMediaBottom)}{\" \"}\r\n          </span>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    if (existingIconsString === 'blt') {\r\n      buttonInner = (\r\n         <div className=\"btn-container-column\">\r\n          <span className={\"altrp-btn-icon-top \"}>\r\n            {renderAsset(buttonMediaTop)}{\" \"}\r\n          </span>\r\n          <div className=\"btn-container-row\">\r\n            <span className={\"altrp-btn-icon-left \"}>\r\n              {renderAsset(buttonMediaLeft)}{\" \"}\r\n            </span>\r\n            {buttonText}\r\n            <span></span>\r\n          </div>\r\n          <span className={\"altrp-btn-icon-bottom \"}>\r\n            {renderAsset(buttonMediaBottom)}{\" \"}\r\n          </span>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    if (existingIconsString === 'lrt') {\r\n      buttonInner = (\r\n        <div className=\"btn-container-column\">\r\n          <span className={\"altrp-btn-icon-top \"}>\r\n            {renderAsset(buttonMediaTop)}{\" \"}\r\n          </span>\r\n          <div className=\"btn-container-row\">\r\n            <span className={\"altrp-btn-icon-left \"}>\r\n              {renderAsset(buttonMediaLeft)}{\" \"}\r\n            </span>\r\n            {buttonText}\r\n            <span className={\"altrp-btn-icon-right \"}>\r\n              {renderAsset(buttonMediaRight)}{\" \"}\r\n            </span>\r\n          </div>\r\n          <span></span>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    if (existingIconsString === 'blr') {\r\n      buttonInner = (\r\n        <div className=\"btn-container-column\">\r\n          <span></span>\r\n          <div className=\"btn-container-row\">\r\n            <span className={\"altrp-btn-icon-left \"}>\r\n              {renderAsset(buttonMediaLeft)}{\" \"}\r\n            </span>\r\n            {buttonText}\r\n            <span className={\"altrp-btn-icon-right \"}>\r\n              {renderAsset(buttonMediaRight)}{\" \"}\r\n            </span>\r\n          </div>\r\n          <span className={\"altrp-btn-icon-bottom \"}>\r\n            {renderAsset(buttonMediaBottom)}{\" \"}\r\n          </span>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    if (existingIconsString === 'rt') {\r\n      buttonInner = (\r\n        <div className=\"btn-container-column\">\r\n          <span className={\"altrp-btn-icon-top \"}>\r\n            {renderAsset(buttonMediaTop)}{\" \"}\r\n          </span>\r\n          <div className=\"btn-container-row\">\r\n            <span></span>\r\n            {buttonText}\r\n            <span className={\"altrp-btn-icon-right \"}>\r\n              {renderAsset(buttonMediaRight)}{\" \"}\r\n            </span>\r\n          </div>\r\n          <span></span>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    if (existingIconsString === 'lt') {\r\n      buttonInner = (\r\n        <div className=\"btn-container-column\">\r\n          <span className={\"altrp-btn-icon-top \"}>\r\n            {renderAsset(buttonMediaTop)}{\" \"}\r\n          </span>\r\n          <div className=\"btn-container-row\">\r\n            <span className={\"altrp-btn-icon-left \"}>\r\n              {renderAsset(buttonMediaLeft)}{\" \"}\r\n            </span>\r\n            {buttonText}\r\n            <span></span>\r\n          </div>\r\n          <span></span>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    if (existingIconsString === 'bt') {\r\n      buttonInner = (\r\n        <div className=\"btn-container-column\">\r\n          <span className={\"altrp-btn-icon-top \"}>\r\n            {renderAsset(buttonMediaTop)}{\" \"}\r\n          </span>\r\n          <div className=\"btn-container-row\">\r\n            <span></span>\r\n            {buttonText}\r\n            <span></span>\r\n          </div>\r\n          <span className={\"altrp-btn-icon-bottom \"}>\r\n            {renderAsset(buttonMediaBottom)}{\" \"}\r\n          </span>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    if (existingIconsString === 'br') {\r\n      buttonInner = (\r\n        <div className=\"btn-container-column\">\r\n          <span></span>\r\n          <div className=\"btn-container-row\">\r\n            <span></span>\r\n            {buttonText}\r\n            <span className={\"altrp-btn-icon-right \"}>\r\n              {renderAsset(buttonMediaRight)}{\" \"}\r\n            </span>\r\n          </div>\r\n          <span className={\"altrp-btn-icon-bottom \"}>\r\n            {renderAsset(buttonMediaBottom)}{\" \"}\r\n          </span>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    if (existingIconsString === 'lr') {\r\n      buttonInner = (\r\n        <div className=\"btn-container-column\">\r\n          <span></span>\r\n          <div className=\"btn-container-row\">\r\n            <span className={\"altrp-btn-icon-left \"}>\r\n              {renderAsset(buttonMediaLeft)}{\" \"}\r\n            </span>\r\n            {buttonText}\r\n            <span className={\"altrp-btn-icon-right \"}>\r\n              {renderAsset(buttonMediaRight)}{\" \"}\r\n            </span>\r\n          </div>\r\n          <span></span>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    if (existingIconsString === 'bl') {\r\n      buttonInner = (\r\n        <div className=\"btn-container-column\">\r\n          <span></span>\r\n          <div className=\"btn-container-row\">\r\n            <span className={\"altrp-btn-icon-left \"}>\r\n              {renderAsset(buttonMediaLeft)}{\" \"}\r\n            </span>\r\n            {buttonText}\r\n            <span></span>\r\n          </div>\r\n          <span className={\"altrp-btn-icon-bottom \"}>\r\n            {renderAsset(buttonMediaBottom)}{\" \"}\r\n          </span>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    if (this.state.pending) {\r\n      classes += \" altrp-disabled\";\r\n    }\r\n\r\n    // classes +=\r\n    //   this.state.settings.link_button_type === \"dropbar\"\r\n    //     ? \"altrp-btn-dropbar\"\r\n    //     : \"\";\r\n\r\n    // let icon =\r\n    //   buttonMedia && showIcon && buttonMedia.assetType ? (\r\n    //     <span className={\"altrp-btn-icon \"}>\r\n    //       {renderAsset(buttonMedia)}{\" \"}\r\n    //     </span>\r\n    //   ) : (\r\n    //     \"\"\r\n    //   );\r\n\r\n    let url = link_link.url\r\n      ? link_link.url.replace(\":id\", this.getModelId() || \"\")\r\n      : \"\";\r\n    if (_.isObject(this.props.currentModel)) {\r\n      url = parseURLTemplate(link_link.url || \"\", modelData);\r\n    }\r\n\r\n    let button = <button\r\n      onClick={this.onClick}\r\n      className={classes}\r\n      id={this.state.settings.position_css_id}\r\n      title={tooltip || null}\r\n    >\r\n      {buttonInner}\r\n    </button>;\r\n    // let buttonTemplate = (\r\n    //   <button\r\n    //     onClick={this.onClick}\r\n    //     className={classes}\r\n    //     id={this.state.settings.position_css_id}\r\n    //     title={tooltip || null}\r\n    //   >\r\n    //     {buttonText}\r\n    //     {\r\n    //       showIcon ? (\r\n    //         ! isSSR() && <span className={\"altrp-btn-icon \"}>\r\n    //       {renderAsset(buttonMedia)}{\" \"}\r\n    //       </span>\r\n    //       ) : \"\"\r\n    //     }\r\n    //   </button>\r\n    // );\r\n\r\n    // switch (this.props.element.getResponsiveSetting(\"link_button_type\", null,\"none\")) {\r\n    //   case \"dropbar\":\r\n    //     button = (\r\n    //       <Suspense fallback={<div>Загрузка...</div>}>\r\n    //         <Dropbar\r\n    //           elemenentId={this.props.element.getId()}\r\n    //           settings={this.props.element.getSettings()}\r\n    //           className=\"btn\"\r\n    //           element={this.props.element}\r\n    //           getContent={this.getContent}\r\n    //           showDelay={this.state.settings.show_delay_dropbar_options}\r\n    //         >\r\n    //           {buttonTemplate}\r\n    //         </Dropbar>\r\n    //       </Suspense>\r\n    //     );\r\n    //     break;\r\n    //   default:\r\n    //     button = buttonTemplate;\r\n    // }\r\n\r\n    let link = null;\r\n    if (\r\n      this.state.settings.link_link?.url &&\r\n      !this.state.settings.link_link.toPrevPage\r\n    ) {\r\n      if (this.state.settings.link_link.tag === \"a\" || isEditor()) {\r\n        let target = _.get(this.state.settings, \"link_link.openInNew\")\r\n          ? \"blank\"\r\n          : \"\";\r\n        link = (\r\n          <a\r\n            href={url}\r\n            onClick={this.onClick}\r\n            className={classes}\r\n            target={target}\r\n            title={tooltip || null}\r\n          >\r\n            {\" \"}\r\n            {buttonInner}\r\n          </a>\r\n        );\r\n      } else {\r\n        link = (\r\n          <Link to={url} onClick={this.onClick} className={classes} title={tooltip || null}>\r\n            {\" \"}\r\n            {buttonInner}\r\n          </Link>\r\n        );\r\n      }\r\n    }\r\n\r\n    if (_.get(this.state, \"settings.link_link.toPrevPage\")) {\r\n      link = (\r\n        <button\r\n          onClick={() => (isEditor() ? null : back())}\r\n          className={classes}\r\n          id={this.state.settings.position_css_id}\r\n          title={tooltip || null}\r\n        >\r\n          {buttonInner}\r\n        </button>\r\n      );\r\n    }\r\n\r\n    return <div className=\"altrp-btn-wrapper\">\r\n      {link || button || buttonMediaRight || buttonMediaLeft || buttonMediaTop || buttonMediaBottom}\r\n    </div>;\r\n    // return React.createElement(tag, buttonProps, <>{this.state.settings.button_text}{icon}</>);\r\n  }\r\n}\r\n\r\n\r\nexport default ButtonWidget;\r\n"],"sourceRoot":""}