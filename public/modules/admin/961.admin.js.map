{"version":3,"sources":["webpack:///./resources/modules/front-app/src/js/store/routes/actions.js","webpack:///./resources/modules/front-app/src/js/store/routes/reducers.js","webpack:///./resources/modules/front-app/src/js/store/current-model/reducers.js","webpack:///./resources/modules/front-app/src/js/store/forms-data-storage/actions.js","webpack:///./resources/modules/front-app/src/js/store/forms-data-storage/reducers.js","webpack:///./resources/modules/front-app/src/js/store/current-data-storage/reducers.js","webpack:///./resources/modules/front-app/src/js/store/scroll-position/actions.js","webpack:///./resources/modules/front-app/src/js/store/scroll-position/reducers.js","webpack:///./resources/modules/front-app/src/js/store/popup-trigger/actions.js","webpack:///./resources/modules/front-app/src/js/store/popup-trigger/reducers.js","webpack:///./resources/modules/front-app/src/js/store/elements-storage/reducers.js","webpack:///./resources/modules/front-app/src/js/store/hide-triggers/actions.js","webpack:///./resources/modules/front-app/src/js/store/hide-triggers/reducers.js","webpack:///./resources/modules/front-app/src/js/store/responses-storage/reducers.js","webpack:///./resources/modules/editor/src/js/store/altrp-dashboard/reducers.js","webpack:///./resources/modules/front-app/src/js/store/altrp-meta-storage/actions.js","webpack:///./resources/modules/front-app/src/js/store/altrp-meta-storage/reducers.js","webpack:///./resources/modules/front-app/src/js/store/altrp-page-state-storage/actions.js","webpack:///./resources/modules/front-app/src/js/store/altrp-page-state-storage/reducers.js","webpack:///./resources/modules/front-app/src/js/store/fonts-storage/actions.js","webpack:///./resources/modules/front-app/src/js/store/fonts-storage/reducers.js","webpack:///./resources/modules/front-app/src/js/store/user-local-storage/reducers.js","webpack:///./resources/modules/front-app/src/js/store/altrp-dashboard-export/reducers.js","webpack:///./resources/modules/front-app/src/js/store/media-screen-storage/reducers.js","webpack:///./resources/modules/front-app/src/js/store/current-title/actions.js","webpack:///./resources/modules/front-app/src/js/store/current-title/reducers.js","webpack:///./resources/modules/front-app/src/js/store/current-page/reducers.js","webpack:///./resources/modules/front-app/src/js/store/menus-storage/actions.js","webpack:///./resources/modules/front-app/src/js/store/menus-storage/reducers.js","webpack:///./resources/modules/front-app/src/js/store/elements-settings/reducers.js","webpack:///./resources/modules/front-app/src/js/store/areas/reducers.js","webpack:///./resources/modules/front-app/src/js/store/reducers.js","webpack:///./resources/modules/front-app/src/js/store/current-model/actions.js","webpack:///./resources/modules/front-app/src/js/store/current-data-storage/actions.js","webpack:///./resources/modules/front-app/src/js/store/elements-storage/actions.js","webpack:///./resources/modules/front-app/src/js/store/responses-storage/actions.js","webpack:///./resources/modules/editor/src/js/store/altrp-dashboard/actions.js","webpack:///./resources/modules/front-app/src/js/store/user-local-storage/actions.js","webpack:///./resources/modules/front-app/src/js/store/altrp-dashboard-export/actions.js","webpack:///./resources/modules/front-app/src/js/store/media-screen-storage/actions.js","webpack:///./resources/modules/front-app/src/js/store/current-email-template/reducers.js","webpack:///./resources/modules/front-app/src/js/store/current-email-template/actions.js","webpack:///./resources/modules/front-app/src/js/store/current-page/actions.js","webpack:///./resources/modules/front-app/src/js/store/elements-settings/actions.js","webpack:///./resources/modules/front-app/src/js/store/store.js","webpack:///./resources/modules/front-app/src/js/classes/Routes.js"],"names":["CHANGE_APP_ROUTES","changeAppRoutes","routes","type","window","altrpPages","_data","push","Route","defaultState","_","isArray","model_data","defaultModel","altrpModelUpdated","defaultDataStorage","SET_SCROLL_TOP","initialState","TRIGGER_POPUP","popupID","defaultElementStorage","TOGGLE_TRIGGER","SET_DEFAULT_TRIGGERS","defaultResponsesStorage","global","require","REPLACE_ALTRP_META","REPLACE_ALTRP_META_FROM_LOCAL_STORAGE","altrpHelpers","AltrpModel","setAltrpIndex","saveDataToLocalStorage","isSSR","defaultAltrpMeta","getDataFromLocalStorage","addEventListener","altrpMeta","undefined","isObject","appStore","dispatch","metaValue","replaceAltrpMeta","defaultPageState","ADD_FONT","REMOVE_FONT","defaultFontsStorage","defaultLocalStorage","element","defaultScreen","CONSTANTS","screen","fullMediaQuery","query","replace","matchMedia","matches","isEditor","Cookies","set","name","document","defaultTitle","title","location","defaultPage","url","href","currentPage","ADD_MENU","defaultMenus","altrpMenus","defaultSettings","defaultAreas","page_areas","map","a","Area","areaFactory","combineReducers","appRoutes","state","action","currentModel","model","formsStore","formId","fieldName","value","changedField","get","cloneDeep","currentUser","currentUserReducer","currentDataStorage","dataStorage","data","setProperty","dataStorageName","scrollPosition","payload","popupTrigger","elements","elementStorage","elementComponent","hideTriggers","includes","filter","item","concat","altrpresponses","responsesStorage","editElement","metaName","getData","altrpPageState","stateValue","stateName","altrpFonts","fontsStorage","elementId","controllerName","fontName","clone","unsetProperty","userLocalStorage","result","exportDashboard","currentScreen","expires","currentTitle","currentEmailTemplate","template","altrpPage","page","propertyName","menus","find","menu","guid","elementsSettings","elementSettings","mutate","settings","elementName","childrenLength","areas","SET_AREAS","preloadedState","__PRELOADED_STATE__","createStore","rootReducer","ALTRP_DEBUG","_dis","console","trace","bind","this","resource","Resource","route","loadRoutes","getAll","then","routesData","pages","catch","err","error"],"mappings":"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","file":"961.admin.js","sourcesContent":["export const CHANGE_APP_ROUTES = 'CHANGE_APP_ROUTES';\r\n\r\nexport function changeAppRoutes(routes) {\r\n  return {\r\n    type: CHANGE_APP_ROUTES,\r\n    routes\r\n  };\r\n}\r\n\r\n","import {CHANGE_APP_ROUTES,} from './actions'\r\nimport Route from \"../../classes/Route\";\r\n\r\nlet routes = [];\r\nif(window.altrpPages){\r\n  for (let _data of window.altrpPages) {\r\n    routes.push(Route.routeFabric(_data));\r\n  }\r\n}\r\nconst defaultState = {\r\n  routes,\r\n};\r\n\r\nexport function appRoutesReducer(state, action) {\r\n  state = state || defaultState;\r\n  switch (action.type) {\r\n    case CHANGE_APP_ROUTES:{\r\n      state = {\r\n        routes: action.routes,\r\n      };\r\n    }break;\r\n  }\r\n  return state;\r\n}\r\n","import {CHANGE_CURRENT_MODEL} from './actions'\r\nimport AltrpModel from \"../../../../../editor/src/js/classes/AltrpModel\";\r\nif(_.isArray(window.model_data)){\r\n  window.model_data = {...window.model_data}\r\n}\r\nconst defaultModel = window.model_data || {\r\n\r\n};\r\nwindow.model_data && (defaultModel.altrpModelUpdated = true);\r\n\r\nexport function currentModelReducer(model, action) {\r\n  model = model || defaultModel;\r\n  switch (action.type) {\r\n    case CHANGE_CURRENT_MODEL:{\r\n      model = action.model;\r\n    }break;\r\n  }\r\n  if(model instanceof AltrpModel){\r\n    return model;\r\n  }\r\n  return new AltrpModel(model);\r\n}\r\n","export const CHANGE_FORM_FIELD_VALUE = 'CHANGE_FORM_FIELD_VALUE';\nexport const CLEAR_FORM_FIELD_VALUE = 'CHANGE_FORM_FIELD_VALUE';\n\n/**\n * Получает данные поля формы и сохраняет в хранилище\n * @param {string}fieldName\n * @param {*}value\n * @param {string}formId\n * @param {boolean}userInput\n * @return {{type: string, fieldName: *, value: *, formId: *}}\n */\nexport function changeFormFieldValue(fieldName, value, formId, userInput) {\n  return {\n    type: CHANGE_FORM_FIELD_VALUE,\n    fieldName,\n    value,\n    formId,\n    changedField: userInput ? `${formId}.${fieldName}` : null,\n  };\n}\n/**\n * Очистить данные поля формы и сохраняет в хранилище\n * @param {string | null}formId\n * @return {{type: string, fieldName: *, value: *, formId: *}}\n */\nexport function clearFormStorage(formId = null) {\n  return {\n    type: CLEAR_FORM_FIELD_VALUE,\n    formId,\n  };\n}\n\n","import {CHANGE_FORM_FIELD_VALUE, CLEAR_FORM_FIELD_VALUE} from './actions'\r\n\r\nconst defaultState = {\r\n\r\n};\r\n\r\nexport function formsStoreReducer(state, {type, formId, fieldName, value, changedField}) {\r\n  state = state || defaultState;\r\n  switch (type) {\r\n    case CHANGE_FORM_FIELD_VALUE:{\r\n      if(_.get(state, [formId, fieldName]) !== value){\r\n        state = _.cloneDeep(state);\r\n        state.changedField = changedField;\r\n        _.set(state, [formId, fieldName], value);\r\n      }\r\n\r\n    }break;\r\n    case CLEAR_FORM_FIELD_VALUE:{\r\n      if(formId){\r\n        state = _.cloneDeep(state);\r\n        _.set(state, [formId], {});\r\n      } else {\r\n        state = {};\r\n      }\r\n    }break;\r\n  }\r\n  return state;\r\n}","import {\r\n  CHANGE_CURRENT_DATASOURCE,\r\n  CLEAR_CURRENT_DATASOURCE,\r\n  SET_CURRENT_DATASOURCE_LOADED,\r\n  SET_CURRENT_DATASOURCE_LOADING\r\n} from './actions'\r\nimport AltrpModel from \"../../../../../editor/src/js/classes/AltrpModel\";\r\nimport {setAltrpIndex} from \"../../helpers\";\r\n\r\nconst defaultDataStorage = {\r\n\r\n};\r\n\r\nexport function currentDataStorageReducer(dataStorage, action) {\r\n  dataStorage = dataStorage || new AltrpModel(defaultDataStorage);\r\n  switch (action.type) {\r\n    case CHANGE_CURRENT_DATASOURCE:{\r\n      let data = action.data;\r\n      if(_.isArray(data)){\r\n        setAltrpIndex(data);\r\n      }\r\n      dataStorage = _.cloneDeep(dataStorage);\r\n      dataStorage.setProperty(action.dataStorageName, data);\r\n    }break;\r\n    case CLEAR_CURRENT_DATASOURCE:{\r\n      dataStorage = new AltrpModel({});\r\n      dataStorage.setProperty('currentDataStorageLoaded', false);\r\n    }break;\r\n    case SET_CURRENT_DATASOURCE_LOADED:{\r\n      dataStorage = _.cloneDeep(dataStorage);\r\n      dataStorage.setProperty('currentDataStorageLoaded', true);\r\n    }break;\r\n    case SET_CURRENT_DATASOURCE_LOADING:{\r\n      dataStorage = _.cloneDeep(dataStorage);\r\n      dataStorage.setProperty('currentDataStorageLoaded', false);\r\n    }break;\r\n  }\r\n  if(dataStorage instanceof AltrpModel){\r\n    return dataStorage;\r\n  }\r\n  return new AltrpModel(dataStorage);\r\n}\r\n","export const SET_SCROLL_TOP = \"SET_SCROLL_TOP\";\r\n/**\r\n *\r\n * @param {{\r\n *  top: int\r\n * }} payload\r\n * @return {{type: string, payload: {}}}\r\n */\r\nexport const setScrollValue = payload => {\r\n  if(payload.top) {\r\n\r\n    if(window.pageUpdater){\r\n      window.pageUpdater.startUpdating();\r\n    }\r\n  }\r\n  return {\r\n    type: SET_SCROLL_TOP,\r\n    payload\r\n  };\r\n};\r\n","import { SET_SCROLL_TOP } from \"./actions\";\r\n\r\nconst initialState = {}\r\n\r\nexport const scrollReducer = (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case SET_SCROLL_TOP:\r\n      return payload;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};","export const TRIGGER_POPUP = \"TRIGGER_POPUP\";\r\n\r\nexport const togglePopup = payload => ({\r\n  type: TRIGGER_POPUP,\r\n  payload\r\n});","import { TRIGGER_POPUP } from \"./actions\";\r\n\r\nconst initialState = { popupID: null };\r\n\r\nexport const popupReducer = (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case TRIGGER_POPUP: {\r\n      return {popupID: state.popupID === payload ? null : payload};\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};","import {CLEAR_ELEMENTS, ADD_ELEMENT} from \"./actions\";\r\n\r\nconst defaultElementStorage = [];\r\n\r\nexport function elementsStorageReducer(elementStorage, action) {\r\n  elementStorage = elementStorage || defaultElementStorage;\r\n  switch (action.type) {\r\n    case CLEAR_ELEMENTS: {\r\n      elementStorage = defaultElementStorage;\r\n    }\r\n    break;\r\n    case ADD_ELEMENT: {\r\n      if(! _.isArray(elementStorage)){\r\n        elementStorage = defaultElementStorage;\r\n      }\r\n      elementStorage.push(action.elementComponent);\r\n      elementStorage = [...elementStorage];\r\n    }\r\n    break;\r\n  }\r\n  return elementStorage;\r\n}","export const TOGGLE_TRIGGER = \"TOGGLE_TRIGGER\";\r\nexport const SET_DEFAULT_TRIGGERS = \"SET_DEFAULT_TRIGGERS\";\r\n\r\nexport const toggleTrigger = payload => ({\r\n  type: TOGGLE_TRIGGER,\r\n  payload\r\n});\r\n\r\nexport const setDefaultTriggers = payload => ({\r\n  type: SET_DEFAULT_TRIGGERS,\r\n  payload\r\n});\r\n","import { TOGGLE_TRIGGER } from \"./actions\";\r\nimport { SET_DEFAULT_TRIGGERS } from \"./actions\";\r\n\r\nconst initialState = [];\r\n\r\nexport const hideTriggersReducer = (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case TOGGLE_TRIGGER:      \r\n      return state.includes(payload) ? state.filter(item => item !== payload) : [...state, payload];\r\n    case SET_DEFAULT_TRIGGERS:\r\n      return state.concat(payload);\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};","import {ADD_RESPONSE_DATA, CLEAR_ALL_RESPONSE_DATA} from './actions'\r\nimport AltrpModel from \"../../../../../editor/src/js/classes/AltrpModel\";\r\nimport {setAltrpIndex} from \"../../helpers\";\r\n\r\nconst defaultResponsesStorage = {\r\n  \r\n};\r\n\r\nexport function responsesStorageReducer(responsesStorage, action) {\r\n  responsesStorage = responsesStorage || new AltrpModel(defaultResponsesStorage);\r\n  switch (action.type) {\r\n    case ADD_RESPONSE_DATA:{\r\n      let data = action.data;\r\n      if(_.isArray(data)){\r\n        setAltrpIndex(data);\r\n      }\r\n      responsesStorage = _.cloneDeep(responsesStorage);\r\n      responsesStorage.setProperty(action.formId, data);\r\n    }break;\r\n    case CLEAR_ALL_RESPONSE_DATA:{\r\n      responsesStorage = new AltrpModel({});\r\n    }break;\r\n  }\r\n  if(responsesStorage instanceof AltrpModel){\r\n    return responsesStorage;\r\n  }\r\n  return new AltrpModel(responsesStorage);\r\n}","import { EDIT_ELEMENT } from \"./actions\";\r\n\r\nif (typeof _ === \"undefined\") {\r\n  global._ = require(\"lodash\");\r\n}\r\n\r\nconst defaultState = {};\r\n\r\nexport function elementReducer(state, action) {\r\n  state = state || defaultState;\r\n  const data = _.cloneDeep(action.payload);\r\n  switch (action.type) {\r\n    case EDIT_ELEMENT:\r\n      {\r\n        state = data;\r\n      }\r\n      break;\r\n  }\r\n  return state;\r\n}\r\n","export const CHANGE_ALTRP_META = 'CHANGE_ALTRP_META';\r\nexport const REPLACE_ALTRP_META = 'REPLACE_ALTRP_META';\r\nexport const REPLACE_ALTRP_META_FROM_LOCAL_STORAGE = 'REPLACE_ALTRP_META_FROM_LOCAL_STORAGE';\r\n\r\n/**\r\n *\r\n * @param {string}metaName\r\n * @param {*} metaValue\r\n * @return {{}} -\r\n *   {\r\n *     type: {string},\r\n *     metaValue: {},\r\n *     metaName: {string},\r\n *   }\r\n */\r\nexport function changeAltrpMeta(metaName, metaValue) {\r\n  return {\r\n    type: CHANGE_ALTRP_META,\r\n    metaValue,\r\n    metaName\r\n  };\r\n}\r\n\r\n/**\r\n *\r\n * @param {{}} metaValue\r\n * @param {boolean} fromLocalStorage\r\n * @return {{}} -\r\n *   {\r\n *     type: {string},\r\n *     metaValue: {},\r\n *     metaName: {string},\r\n *   }\r\n */\r\nexport function replaceAltrpMeta(metaValue, fromLocalStorage = false) {\r\n  return {\r\n    type: fromLocalStorage ? REPLACE_ALTRP_META_FROM_LOCAL_STORAGE : REPLACE_ALTRP_META,\r\n    metaValue,\r\n  };\r\n}\r\n","import {CHANGE_ALTRP_META, REPLACE_ALTRP_META, REPLACE_ALTRP_META_FROM_LOCAL_STORAGE, replaceAltrpMeta} from './actions'\r\nconst { AltrpModel,setAltrpIndex, saveDataToLocalStorage, isSSR} = window.altrpHelpers;\r\n\r\nconst defaultAltrpMeta = isSSR() ? {} :window.altrpHelpers.getDataFromLocalStorage('altrpmeta', {});\r\n// console.log();\r\n/**\r\n *\r\n * @param {{}} altrpMeta\r\n * @param {{}}  action\r\n *   {\r\n *     type: {string},\r\n *     metaValue: {},\r\n *     metaName: {string},\r\n *   }\r\n */\r\nexport function altrpMetaReducer(altrpMeta, action) {\r\n  altrpMeta = altrpMeta || new AltrpModel(defaultAltrpMeta);\r\n  switch (action.type) {\r\n    case CHANGE_ALTRP_META:{\r\n      let {metaValue, metaName } = action;\r\n      altrpMeta = _.cloneDeep(altrpMeta);\r\n      if(_.isArray(metaValue)){\r\n        setAltrpIndex(metaValue);\r\n      }\r\n      altrpMeta.setProperty(metaName, metaValue);\r\n      saveDataToLocalStorage('altrpmeta', altrpMeta.getData())\r\n    }break;\r\n    case REPLACE_ALTRP_META:{\r\n      let {metaValue, } = action;\r\n      altrpMeta = new AltrpModel(metaValue);\r\n      if(_.isArray(metaValue)){\r\n        setAltrpIndex(metaValue);\r\n      }\r\n      saveDataToLocalStorage('altrpmeta', altrpMeta.getData())\r\n    }break;\r\n    case REPLACE_ALTRP_META_FROM_LOCAL_STORAGE:{\r\n      let {metaValue } = action;\r\n      altrpMeta = new AltrpModel(metaValue);\r\n      if(_.isArray(metaValue)){\r\n        setAltrpIndex(metaValue);\r\n      }\r\n    }break;\r\n  }\r\n  if(altrpMeta instanceof AltrpModel){\r\n    return altrpMeta;\r\n  }\r\n  return new AltrpModel(altrpMeta);\r\n}\r\n\r\nif(! isSSR()){\r\n  window.addEventListener('storage', ()=>{\r\n    const altrpMeta = window.altrpHelpers.getDataFromLocalStorage('altrpmeta', {});\r\n    if(altrpMeta !== undefined && _.isObject(altrpMeta)){\r\n      appStore.dispatch(replaceAltrpMeta(altrpMeta, true));\r\n    }\r\n  })\r\n}\r\n","export const CHANGE_PAGE_STATE = 'CHANGE_PAGE_STATE';\r\nexport const CLEAR_PAGE_STATE = 'CLEAR_PAGE_STATE';\r\n\r\n/**\r\n *\r\n * @param {string}stateName\r\n * @param {*} stateValue\r\n * @return {{}} -\r\n *   {\r\n *     type: {string},\r\n *     stateValue: {},\r\n *     stateName: {string},\r\n *   }\r\n */\r\nexport function changePageState(stateName, stateValue = {}) {\r\n  return {\r\n    type: CHANGE_PAGE_STATE,\r\n    stateName,\r\n    stateValue\r\n  };\r\n}\r\n/**\r\n * Очищает состояние страницы\r\n */\r\nexport function clearPageState() {\r\n  return {\r\n    type: CLEAR_PAGE_STATE,\r\n  };\r\n}\r\n","import {CHANGE_PAGE_STATE, CLEAR_PAGE_STATE} from './actions'\r\nimport AltrpModel from \"../../../../../editor/src/js/classes/AltrpModel\";\r\nimport {setAltrpIndex} from \"../../helpers\";\r\n\r\nconst defaultPageState = {\r\n  \r\n};\r\n/**\r\n *\r\n * @param {{}|AltrpModel} altrpPageState\r\n * @param {{}}  action\r\n *   {\r\n *     type: {string},\r\n *     metaValue: {},\r\n *     metaName: {string},\r\n *   }\r\n * @return {AltrpModel}\r\n */\r\nexport function altrpPageStateReducer(altrpPageState, action) {\r\n  altrpPageState = altrpPageState || new AltrpModel(defaultPageState);\r\n  switch (action.type) {\r\n    case CHANGE_PAGE_STATE:{\r\n      let stateValue = action.stateValue;\r\n      altrpPageState = _.cloneDeep(altrpPageState);\r\n      if(_.isArray(stateValue)){\r\n        setAltrpIndex(stateValue);\r\n      }\r\n      altrpPageState.setProperty(action.stateName, stateValue);\r\n    }break;\r\n    case CLEAR_PAGE_STATE:{\r\n      altrpPageState = new AltrpModel(defaultPageState);\r\n    }break;\r\n  }\r\n  if(altrpPageState instanceof AltrpModel){\r\n    return altrpPageState;\r\n  }\r\n  return new AltrpModel(altrpPageState);\r\n}","export const ADD_FONT = 'ADD_FONT';\r\nexport const REMOVE_FONT = 'REMOVE_FONT';\r\n\r\n/**\r\n *\r\n * @param {string} elementId\r\n * @param {string} controllerName\r\n * @param {string} fontName\r\n * @return {{}} -\r\n *   {\r\n *     type: {string},\r\n *     metaValue: {},\r\n *     metaName: {string},\r\n *   }\r\n */\r\nexport function addFont(elementId, controllerName, fontName) {\r\n  return {\r\n    type: ADD_FONT,\r\n    elementId,\r\n    controllerName,\r\n    fontName\r\n  };\r\n}\r\n\r\n/**\r\n *\r\n * @param {string} elementId\r\n * @param {string} controllerName\r\n * @return {{}} -\r\n *   {\r\n *     type: {string},\r\n *     metaValue: {},\r\n *     metaName: {string},\r\n *   }\r\n */\r\nexport function removeFont(elementId, controllerName, ) {\r\n  return {\r\n    type: REMOVE_FONT,\r\n    elementId,\r\n    controllerName,\r\n\r\n  };\r\n}\r\n","import {ADD_FONT, REMOVE_FONT} from './actions'\r\nimport AltrpModel from \"../../../../../editor/src/js/classes/AltrpModel\";\r\n\r\nconst defaultFontsStorage = new AltrpModel({\r\n  \r\n});\r\n/**\r\n *\r\n * @param {AltrpModel} fontsStorage\r\n * @param {{}}  action\r\n *   {\r\n *     type: {string},\r\n *     metaValue: {},\r\n *     metaName: {string},\r\n *   }\r\n */\r\nexport function fontsReducer(fontsStorage = defaultFontsStorage, action) {\r\n  switch (action.type) {\r\n    case ADD_FONT:{\r\n      const{\r\n        elementId,\r\n        controllerName,\r\n        fontName,\r\n      } = action;\r\n      fontsStorage.setProperty(`${elementId}_${controllerName}`, fontName);\r\n      fontsStorage = _.clone(fontsStorage);\r\n    }break;\r\n    case REMOVE_FONT:{\r\n      const{\r\n        elementId,\r\n        controllerName,\r\n      } = action;\r\n      fontsStorage.unsetProperty(`${elementId}_${controllerName}`);\r\n      fontsStorage = _.clone(fontsStorage);\r\n    }break;\r\n  }\r\n\r\n  return fontsStorage;\r\n}\r\n","import { CHANGE_USER_LOCAL_STORAGE } from \"./actions\";\r\n\r\nconst defaultLocalStorage = {\r\n  element: \"test\"\r\n};\r\n\r\nexport function changeLocalStorageReducer(data, action) {\r\n  let result = data || defaultLocalStorage;\r\n  switch (action.type) {\r\n    case CHANGE_USER_LOCAL_STORAGE:\r\n      {\r\n        result = data;\r\n      }\r\n      break;\r\n  }\r\n  return result;\r\n}\r\n","import { DASHBOARD_EXPORT } from \"./actions\";\r\n\r\nconst defaultState = {};\r\n\r\nexport function exportDashboard(state, action) {\r\n  state = state || defaultState;\r\n  const data = _.cloneDeep(action.payload);\r\n  switch (action.type) {\r\n    case DASHBOARD_EXPORT:\r\n      {\r\n        state = data;\r\n      }\r\n      break;\r\n  }\r\n  return state;\r\n}\r\n","if (typeof window === \"undefined\") {\r\n  global.window = {};\r\n}\r\nimport { SET_CURRENT_SCREEN } from \"./actions\";\r\nimport CONSTANTS from \"../../../../../editor/src/js/consts\";\r\n\r\nconst defaultScreen =\r\n  CONSTANTS.SCREENS.find(screen => {\r\n    if (!screen.fullMediaQuery) {\r\n      return false;\r\n    }\r\n    let query = screen.fullMediaQuery;\r\n    query = query.replace(\"@media\", \"\");\r\n    return typeof window.matchMedia !== \"undefined\"\r\n      ? window?.matchMedia(query).matches\r\n      : false;\r\n  }) || CONSTANTS.SCREENS[0];\r\nif(!window.altrpHelpers.isEditor()){\r\n  window.Cookies.set('__altrp_current_device', defaultScreen.name);\r\n}\r\nexport function mediaScreenReducer(currentScreen, action) {\r\n  currentScreen = currentScreen || defaultScreen;\r\n  switch (action.type) {\r\n    case SET_CURRENT_SCREEN:\r\n      {\r\n        window.Cookies.set('__altrp_current_device', action.screen.name, { expires: 365 });\r\n        currentScreen = action.screen;\r\n      }\r\n      break;\r\n  }\r\n  return currentScreen;\r\n}\r\n","export const CHANGE_CURRENT_TITLE = 'CHANGE_CURRENT_TITLE';\r\n\r\nexport function changeCurrentTitle(title) {\r\n  return {\r\n    type: CHANGE_CURRENT_TITLE,\r\n    title\r\n  };\r\n}\r\n\r\n","if (typeof document === \"undefined\") {\r\n  global.document = {};\r\n}\r\nimport { CHANGE_CURRENT_TITLE } from \"./actions\";\r\n\r\nconst defaultTitle = document?.title || \"\";\r\n\r\nexport function currentTitleReducer(title, action) {\r\n  title = title || defaultTitle;\r\n  switch (action.type) {\r\n    case CHANGE_CURRENT_TITLE:\r\n      {\r\n        title = action.title;\r\n      }\r\n      break;\r\n  }\r\n  return title;\r\n}\r\n","import { CHANGE_CURRENT_PAGE, CHANGE_CURRENT_PAGE_PROPERTY } from \"./actions\";\r\nimport AltrpModel from \"../../../../../editor/src/js/classes/AltrpModel\";\r\n\r\nif (typeof location === \"undefined\") {\r\n  global.location = {};\r\n}\r\n\r\nconst defaultPage = {\r\n  url: location?.href || \"\",\r\n  title: window?.currentPage?.title || \"\",\r\n};\r\n\r\nexport function currentPageReducer(page, action) {\r\n  page = page || defaultPage;\r\n  switch (action.type) {\r\n    case CHANGE_CURRENT_PAGE:\r\n      {\r\n        page = action.page;\r\n      }\r\n      break;\r\n    case CHANGE_CURRENT_PAGE_PROPERTY:\r\n      {\r\n        page = _.clone(page);\r\n        page.setProperty(action.propertyName, action.value);\r\n      }\r\n      break;\r\n  }\r\n\r\n  if (page instanceof AltrpModel) {\r\n    return page;\r\n  }\r\n  return new AltrpModel(page);\r\n}\r\n","export const ADD_MENU = 'ADD_MENU';\r\n/**\r\n *\r\n * @param {{}} menu\r\n * @return {{}} -\r\n *   {\r\n *     type: {string},\r\n *     menu: {},\r\n *   }\r\n */\r\nexport function addMenu(menu) {\r\n  return {\r\n    type: ADD_MENU,\r\n    menu,\r\n  };\r\n}\r\n","import {ADD_MENU, } from './actions'\r\n\r\nconst defaultMenus = window.altrpMenus || [];\r\n/**\r\n *\r\n * @param {[]} menus\r\n * @param {{\r\n *  components: {},\r\n *  type: string\r\n * }}  action\r\n */\r\nexport function menusReducer(menus = defaultMenus, action) {\r\n  switch (action.type) {\r\n    case ADD_MENU:{\r\n      if(menus.find(menu=>menu.guid === action.menu.guid)){\r\n        return menus;\r\n      }\r\n      menus = [...menus];\r\n      menus.push(action.menu)\r\n    }break;\r\n  }\r\n\r\n  return menus;\r\n}\r\n","import { CHANGE_SETTINGS, REPLACE_SETTINGS} from \"./actions\";\r\nimport mutate from \"dot-prop-immutable\";\r\n\r\nconst defaultSettings = {};\r\n\r\nexport function elementsSettingsReducer(elementSettings, action) {\r\n  elementSettings = elementSettings || defaultSettings;\r\n  switch (action.type) {\r\n    case CHANGE_SETTINGS: {\r\n      if(elementSettings[action.elementId]){\r\n        mutate.delete( elementSettings,action.elementId);\r\n      }\r\n\r\n      elementSettings = mutate.set(elementSettings, action.elementId, {\r\n        settings: {...action.settings},\r\n        name: action.elementName,\r\n        childrenLength: action.childrenLength,\r\n      });\r\n    }\r\n    break;\r\n    case REPLACE_SETTINGS: {\r\n      elementSettings = action.settings;\r\n    }\r\n    break;\r\n  }\r\n  return elementSettings;\r\n}\r\n","import { SET_AREAS,} from \"./actions\";\r\n\r\nlet defaultAreas = [];\r\nif(window['h-altrp']){\r\n  defaultAreas = window.page_areas.map(a=> new window.altrpHelpers.Area.areaFactory(a));\r\n}\r\nexport function areasReducer(areas, action) {\r\n  areas = areas || defaultAreas;\r\n  switch (action.type) {\r\n    case SET_AREAS: {\r\n      areas = action.areas;\r\n    }\r\n    break;\r\n  }\r\n  return areas;\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport { appRoutesReducer } from \"./routes/reducers\";\r\nimport { currentModelReducer } from \"./current-model/reducers\";\r\nimport { formsStoreReducer } from \"./forms-data-storage/reducers\";\r\nimport { currentUserReducer } from \"./current-user/reducers\";\r\nimport { currentDataStorageReducer } from \"./current-data-storage/reducers\";\r\nimport { scrollReducer } from \"./scroll-position/reducers\";\r\nimport { popupReducer } from \"./popup-trigger/reducers\";\r\nimport { elementsStorageReducer } from \"./elements-storage/reducers\";\r\nimport { hideTriggersReducer } from \"./hide-triggers/reducers\";\r\nimport { responsesStorageReducer } from \"./responses-storage/reducers\";\r\nimport { elementReducer } from \"../../../../editor/src/js/store/altrp-dashboard/reducers\";\r\nimport { altrpMetaReducer } from \"./altrp-meta-storage/reducers\";\r\nimport { altrpPageStateReducer } from \"./altrp-page-state-storage/reducers\";\r\nimport { fontsReducer } from \"./fonts-storage/reducers\";\r\nimport { changeLocalStorageReducer } from \"./user-local-storage/reducers\";\r\nimport { exportDashboard } from \"./altrp-dashboard-export/reducers\";\r\nimport { mediaScreenReducer } from \"./media-screen-storage/reducers\";\r\nimport { currentTitleReducer } from \"./current-title/reducers\";\r\nimport { currentEmailTemplateReducer } from \"./current-email-template/reducers\";\r\nimport { currentPageReducer } from \"./current-page/reducers\";\r\nimport {menusReducer} from \"./menus-storage/reducers\";\r\nimport {elementsSettingsReducer} from \"./elements-settings/reducers\";\r\nimport {areasReducer} from \"./areas/reducers\";\r\n\r\nexport default combineReducers({\r\n  appRoutes: appRoutesReducer,\r\n  currentModel: currentModelReducer,\r\n  formsStore: formsStoreReducer,\r\n  currentUser: currentUserReducer,\r\n  currentDataStorage: currentDataStorageReducer,\r\n  scrollPosition: scrollReducer,\r\n  popupTrigger: popupReducer,\r\n  elements: elementsStorageReducer,\r\n  hideTriggers: hideTriggersReducer,\r\n  altrpresponses: responsesStorageReducer,\r\n  editElement: elementReducer,\r\n  altrpMeta: altrpMetaReducer,\r\n  altrpPageState: altrpPageStateReducer,\r\n  altrpFonts: fontsReducer,\r\n  userLocalStorage: changeLocalStorageReducer,\r\n  exportDashboard: exportDashboard,\r\n  currentScreen: mediaScreenReducer,\r\n  currentTitle: currentTitleReducer,\r\n  currentEmailTemplate: currentEmailTemplateReducer,\r\n  altrpPage: currentPageReducer,\r\n  altrpMenus: menusReducer,\r\n  elementsSettings: elementsSettingsReducer,\r\n  areas: areasReducer,\r\n});\r\n","export const CHANGE_CURRENT_MODEL = 'CHANGE_CURRENT_MODEL';\r\n\r\nexport function changeCurrentModel(model) {\r\n  return {\r\n    type: CHANGE_CURRENT_MODEL,\r\n    model\r\n  };\r\n}\r\n\r\n","export const CHANGE_CURRENT_DATASOURCE = 'CHANGE_CURRENT_DATASOURCE';\r\nexport const CLEAR_CURRENT_DATASOURCE = 'CLEAR_CURRENT_DATASOURCE';\r\nexport const SET_CURRENT_DATASOURCE_LOADED = 'SET_CURRENT_DATASOURCE_LOADED';\r\nexport const SET_CURRENT_DATASOURCE_LOADING = 'SET_CURRENT_DATASOURCE_LOADING';\r\n\r\n/**\r\n *\r\n * @param {string}dataStorageName\r\n * @param {{}} data\r\n * @return {{}} -\r\n *   {\r\n *     type: {string},\r\n *     dataStorage: {},\r\n *     dataStorageName: {string},\r\n *   }\r\n */\r\nexport function changeCurrentDataStorage(dataStorageName, data = {}) {\r\n  return {\r\n    type: CHANGE_CURRENT_DATASOURCE,\r\n    data,\r\n    dataStorageName\r\n  };\r\n}\r\n\r\n/**\r\n * Перед загрузкой новых данных, старые удаляем\r\n * @return {{}} - type: string\r\n */\r\nexport function clearCurrentDataStorage() {\r\n  return {\r\n    type: CLEAR_CURRENT_DATASOURCE,\r\n  };\r\n}\r\n\r\n/**\r\n * После загрузки сообщаем, что данный обновились, для вызовы _componentDidMount в компонентах элементов\r\n * @return {{type: string}}\r\n */\r\nexport function currentDataStorageLoaded(){\r\n  return {\r\n    type: SET_CURRENT_DATASOURCE_LOADED,\r\n  };\r\n}\r\n/**\r\n * После загрузки сообщаем, что данный обновились, для вызовы _componentDidMount в компонентах элементов\r\n * @return {{type: string}}\r\n */\r\nexport function currentDataStorageLoading(){\r\n  return {\r\n    type: SET_CURRENT_DATASOURCE_LOADING,\r\n  };\r\n}\r\n\r\n","export const ADD_ELEMENT = 'ADD_ELEMENT';\r\nexport const CLEAR_ELEMENTS = 'CLEAR_ELEMENTS';\r\n\r\n/**\r\n *\r\n * @param {React.Component}elementComponent\r\n * @return {{}} - {\r\n *     type: {string},\r\n *     sectionComponent: {React.Component},\r\n *   }\r\n */\r\nexport function addElement(elementComponent) {\r\n  return {\r\n    type: ADD_ELEMENT,\r\n    elementComponent\r\n  };\r\n}\r\n\r\n/**\r\n * Перед загрузкой новых данных, старые удаляем\r\n * @return {{type: string}}\r\n */\r\nexport function clearElements() {\r\n  return {\r\n    type: CLEAR_ELEMENTS,\r\n  };\r\n}\r\n\r\n","export const ADD_RESPONSE_DATA = 'ADD_RESPONSE_DATA';\r\nexport const CLEAR_ALL_RESPONSE_DATA = 'CLEAR_ALL_RESPONSE_DATA';\r\n\r\n/**\r\n * Сохраняет ответ сервера при отправке формы в хранилище\r\n * @param {string}formId\r\n * @param {{}} data\r\n * @return {{}} -\r\n *   {\r\n *     type: {string},\r\n *     dataStorage: {object},\r\n *     dataStorageName: {string},\r\n *   }\r\n */\r\nexport function addResponseData(formId, data = {}) {\r\n  if(data.data) {\r\n    data = data.data;\r\n  }\r\n  return {\r\n    type: ADD_RESPONSE_DATA,\r\n    data,\r\n    formId\r\n  };\r\n}\r\n\r\n\r\n/**\r\n * Очищает хранилище\r\n * @return {{type: string}}\r\n */\r\nexport function clearAllResponseData(){\r\n  return {\r\n    type: CLEAR_ALL_RESPONSE_DATA,\r\n  };\r\n}\r\n\r\n","export const EDIT_ELEMENT = \"EDIT_ELEMENT\";\r\n\r\nexport function editElement(payload) {\r\n  return {\r\n    type: EDIT_ELEMENT,\r\n    payload\r\n  };\r\n}\r\n","export const CHANGE_USER_LOCAL_STORAGE = \"CHANGE_USER_LOCAL_STORAGE\";\r\n\r\nexport function changeStorageData(user) {\r\n  return {\r\n    type: CHANGE_USER_LOCAL_STORAGE,\r\n    user: user || {}\r\n  };\r\n}\r\n","export const DASHBOARD_EXPORT = \"DASHBOARD_EXPORT\";\r\n\r\nexport function exportDashboard(payload) {\r\n  return {\r\n    type: DASHBOARD_EXPORT,\r\n    payload\r\n  };\r\n}\r\n","export const SET_CURRENT_SCREEN = 'SET_CURRENT_SCREEN';\r\n\r\n/**\r\n * Меняем текущий экран из списка CONSTANTS.SCREENS\r\n *\r\n */\r\nexport function setCurrentScreen(screen){\r\n  return {\r\n    type: SET_CURRENT_SCREEN,\r\n    screen,\r\n  };\r\n}\r\n\r\n","import {\r\n  CHANGE_CURRENT_EMAIL_TEMPLATE\r\n} from \"./actions\";\r\n\r\n\r\nconst defaultTemplate = null;\r\n\r\nexport function currentEmailTemplateReducer(template, action) {\r\n  template = template || defaultTemplate;\r\n  switch (action.type) {\r\n    case CHANGE_CURRENT_EMAIL_TEMPLATE:\r\n      {\r\n        template = action.template;\r\n      }\r\n      break;\r\n  }\r\n  return template;\r\n}\r\n","export const CHANGE_CURRENT_EMAIL_TEMPLATE = \"CHANGE_CURRENT_EMAIL_TEMPLATE\";\r\n\r\n\r\nexport function changeCurrentEmailTemplate(template) {\r\n  return {\r\n    type: CHANGE_CURRENT_EMAIL_TEMPLATE,\r\n    template\r\n  };\r\n}\r\n","export const CHANGE_CURRENT_PAGE = \"CHANGE_CURRENT_PAGE\";\r\nexport const CHANGE_CURRENT_PAGE_PROPERTY = \"CHANGE_CURRENT_PAGE_PROPERTY\";\r\n\r\nexport function changeCurrentPage(pageData) {\r\n  return {\r\n    type: CHANGE_CURRENT_PAGE,\r\n    pageData: pageData || {}\r\n  };\r\n}\r\n\r\nexport function changeCurrentPageProperty(propertyName, value) {\r\n  return {\r\n    type: CHANGE_CURRENT_PAGE_PROPERTY,\r\n    propertyName,\r\n    value,\r\n  };\r\n}\r\n\r\n","export const CHANGE_SETTINGS = 'CHANGE_SETTINGS';\r\nexport const REPLACE_SETTINGS = 'REPLACE_SETTINGS';\r\n\r\n/**\r\n *\r\n * @param {string} elementId\r\n * @param {string} elementName\r\n * @param {{}} settings\r\n * @param {int} childrenLength\r\n * @return {{}} - {\r\n *     type: {string},\r\n *     elementId: {string},\r\n *     settings: {{}},\r\n *     elementName: {string},\r\n *   }\r\n */\r\nexport function addSettings(elementId, elementName, settings, childrenLength) {\r\n  return {\r\n    type: CHANGE_SETTINGS,\r\n    elementId,\r\n    elementName,\r\n    settings,\r\n    childrenLength,\r\n  };\r\n}\r\n/**\r\n *\r\n * @param {{}} settings\r\n * @return {{}} - {\r\n *     type: {string},\r\n *     settings: {{}},\r\n *   }\r\n */\r\nexport function replaceAllSettings(settings){\r\n  return {\r\n    type: REPLACE_SETTINGS,\r\n    settings,\r\n  };\r\n}\r\n\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers\";\r\n// Grab the state from a global variable injected into the server-generated HTML\r\nconst preloadedState = window.__PRELOADED_STATE__;\r\n\r\n// Allow the passed state to be garbage-collected\r\ndelete window.__PRELOADED_STATE__;\r\nlet appStore = createStore(rootReducer, preloadedState);\r\nwindow.appStore = appStore;\r\nif (window.ALTRP_DEBUG) {\r\n  let _dis = appStore.dispatch;\r\n  appStore.dispatch = function(action) {\r\n    console.trace(action);\r\n    _dis.bind(appStore)(action);\r\n  };\r\n}\r\nexport default appStore;\r\n","import Resource from \"../../../../editor/src/js/classes/Resource\";\r\nimport Route from \"./Route\";\r\nimport appStore from \"../store/store\";\r\nimport { changeAppRoutes } from \"../store/routes/actions\";\r\n\r\nclass Routes {\r\n  constructor() {\r\n    this.resource = new Resource({\r\n      route: \"/ajax/routes\"\r\n    });\r\n    this.loadRoutes();\r\n  }\r\n  loadRoutes() {\r\n    if(window.altrpPages){\r\n      let routes = [];\r\n      for (let _data of window.altrpPages) {\r\n        routes.push(Route.routeFabric(_data));\r\n      }\r\n      appStore.dispatch(changeAppRoutes(routes));\r\n      return\r\n    }\r\n    this.resource\r\n      .getAll()\r\n      .then(routesData => {\r\n        let routes = [];\r\n        for (let _data of routesData.pages) {\r\n          routes.push(Route.routeFabric(_data));\r\n        }\r\n        appStore.dispatch(changeAppRoutes(routes));\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n      });\r\n  }\r\n}\r\nexport default new Routes();\r\n"],"sourceRoot":""}