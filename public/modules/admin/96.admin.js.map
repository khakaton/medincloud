{"version":3,"sources":["webpack:///./resources/modules/admin/src/js/store/ace-editor/actions.js","webpack:///./resources/modules/admin/src/js/store/admin-logo/actions.js","webpack:///./resources/modules/admin/src/js/store/admin-state/actions.js","webpack:///./resources/modules/admin/src/js/store/custom-fonts/actions.js","webpack:///./resources/modules/admin/src/js/store/modal-settings/actions.js","webpack:///./resources/modules/admin/src/js/store/modal-settings/reducers.js","webpack:///./resources/modules/admin/src/js/store/admin-state/reducers.js","webpack:///./resources/modules/admin/src/js/store/admin-logo/reducers.js","webpack:///./resources/modules/editor/src/js/store/assets-browser/reducers.js","webpack:///./resources/modules/admin/src/js/store/ace-editor/reducers.js","webpack:///./resources/modules/admin/src/js/store/websockets-storage/reducers.js","webpack:///./resources/modules/admin/src/js/store/custom-fonts/reducers.js","webpack:///./resources/modules/admin/src/js/store/reducers.js","webpack:///./resources/modules/admin/src/js/store/store.js","webpack:///./resources/modules/admin/src/js/store/websockets-storage/actions.js","webpack:///./resources/modules/editor/src/js/classes/AltrpModel.js","webpack:///./resources/modules/editor/src/js/classes/Resource.js","webpack:///./resources/modules/editor/src/js/consts.js","webpack:///./resources/modules/editor/src/js/store/assets-browser/actions.js","webpack:///./resources/modules/front-app/src/js/classes/Template.js","webpack:///./resources/modules/front-app/src/js/classes/Area.js","webpack:///./resources/modules/front-app/src/js/classes/Datasource.js","webpack:///./resources/modules/front-app/src/js/classes/Route.js","webpack:///./resources/modules/editor/src/js/components/altrp-svg/AltrpSVG.js","webpack:///./resources/modules/front-app/src/js/classes/converters/DataConverter.js","webpack:///./resources/modules/front-app/src/js/helpers.js","webpack:///./resources/modules/front-app/src/js/store/areas/actions.js","webpack:///./resources/modules/front-app/src/js/store/current-user/actions.js","webpack:///./resources/modules/editor/src/js/classes/AltrpUser.js","webpack:///./resources/modules/front-app/src/js/store/current-user/reducers.js"],"names":["SET_ACE","setAceEditor","AceEditor","type","SET_LOGO","setAdminLogo","logoData","SET_DISABLED","SET_ENABLE","SET_PROPERTY","setAdminDisable","setAdminEnable","setAdminProperty","propertyName","value","GET_CUSTOM_FONTS","getCustomFonts","metaValue","SET_MODAL_SETTINGS","TOGGLE_MODAL","setModalSettings","settings","toggleModal","defaultState","fields","active","title","submitButton","submit","data","console","log","success","res","adminEnable","window","admin_logo","onChoose","media","initialState","combineReducers","modalSettings","state","action","adminState","_","set","adminLogo","assetsManagerSettings","ASSETS_SHOW","ASSETS_TOGGLE","aceEditorReducer","currentUser","currentUserReducer","websocketStore","item","WEBSOCKETS_SERVER_ENABLED","enabled","WEBSOCKETS_SERVER_KEY","key","WEBSOCKETS_SERVER_PORT","port","customFonts","createStore","rootReducer","setWebsocketsEnabled","setWebsocketsKey","setWebsocketsPort","AltrpModel","this","cloneDeep","clone","isEmpty","name","defaultValue","get","has","getData","unset","queryString","MAX_FILE_SIZE","Resource","route","dynamicURL","replaceContentWithData","fetch","method","headers","then","ok","Promise","reject","text","status","json","id","error","url","getRoute","length","replace","searchString","indexOf","assign","_token","formData","FormData","hasFile","each","isArray","i","File","size","append","options","body","JSON","stringify","files","file","customHeaders","params","_params","forEach","paramValue","paramName","join","query","TEMPLATE_UPDATED","TEMPLATE_NEED_UPDATE","TEMPLATE_SAVING","DEFAULT_BREAKPOINT","DEFAULT_AREAS","SCREENS","icon","width","fullMediaQuery","mediaQuery","assetsShow","assetsToggle","templates","CSSclasses","push","sidebar_type","sidebar_location","styles","isString","custom_css","settingName","getSetting","component","setState","currentRouteComponent","updateToken","Math","random","appStore","dispatch","setAreas","getState","areas","_default","areaData","area","Area","template","Template","parse","area_name","_t","guid","template_settings","triggers","getProperty","excludePath","parsedTemplate","currentModel","currentDataStorage","isJSON","mbParseJSON","map","param","split","filter","line","trim","left","right","match","getDataByPath","path","model","models","parent_page_id","data_sources","data_source","Datasource","allowed","redirect","lazy","Route","_area","props","assetsCache","regex","RegExp","_props","svg","rawSVG","propsString","exec","content","resource","altrpHelpers","getAsText","prevProps","prevState","componentDidMount","divElement","SSR","childNodes","removeAttribute","outerHTML","document","createElement","innerHTML","children","dangerouslySetInnerHTML","__html","Component","isSSR","e","iconsManager","renderAsset","asset","dataUrl","React","src","refImg","createRef","fr","FileReader","readAsDataURL","onload","current","result","alt","ref","assetType","renderIcon","style","backgroundImage","undefined","parseParamsFromString","string","context","allowObject","replaceRight","urlParams","currentRouterMatch","lines","isObject","trueValue","falseValue","altrpCheck","_path","_right","altrpresponses","formsStore","altrpPageState","altrpPage","altrpMeta","queryData","location","href","getTimeValue","pathElements","elementId","updateType","propName","getComponentByElementId","element","getSettings","getDataFromLocalStorage","areaName","page_areas","find","extractPathFromString","CONDITIONS_OPTIONS","label","now","startOfMonth","Date","startOfYear","getPrevWeekStart","getNextWeekStart","getWeekStart","moment","format","date","monthShift","getFullYear","getMonth","yearShift","elements","el","elementWrapperRef","toString","today","daystoMonday","isoWeekday","add","subtract","daystoLastMonday","modelContext","paths","escapeRegExp","localStorage","getItem","Number","setAltrpIndex","array","idx","setProperty","altrpIndex","altrpRandomId","substr","JSONString","altrphelpers","sumFields","fieldName","sum","c","SET_AREAS","CHANGE_CURRENT_USER","SET_NOTICE_FOR_USER","SET_USERS_ONLINE","CHANGE_CURRENT_USER_PROPERTY","changeCurrentUser","user","permissions","ownPermissions","ownPermission","permission","parseInt","roles","ownRoles","ownRole","role","isAuth","hasPermissions","hasRoles","defaultModel","current_user","local_storage","Array","form","put","catch","newNotice","notice","members","AltrpUser","rootElement","getElementById","classList","remove"],"mappings":"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","file":"96.admin.js","sourcesContent":["export const SET_ACE = 'SET_ACE';\r\n\r\nexport function setAceEditor(AceEditor){\r\n  return {\r\n    AceEditor,\r\n    type: SET_ACE,\r\n  }\r\n}\r\n\r\n","export const SET_LOGO = 'SET_LOGO';\r\n\r\nexport function setAdminLogo(logoData){\r\n  return {\r\n    logoData,\r\n    type: SET_LOGO,\r\n  }\r\n}\r\n\r\n","export const SET_DISABLED = 'SET_DISABLED';\r\nexport const SET_ENABLE = 'SET_ENABLE';\r\nexport const SET_PROPERTY = 'SET_PROPERTY';\r\n\r\nexport function setAdminDisable(){\r\n  return {\r\n    type: SET_DISABLED,\r\n  }\r\n}\r\n\r\nexport function setAdminEnable(){\r\n  return {\r\n    type: SET_ENABLE,\r\n  }\r\n}\r\n\r\n/**\r\n * Устанавлевает свойство админки\r\n * @param propertyName\r\n * @param value\r\n * @return {{type: string, propertyName: *, value: *}}\r\n */\r\nexport function setAdminProperty(propertyName, value){\r\n\r\n  return {\r\n    type: SET_PROPERTY,\r\n    propertyName,\r\n    value,\r\n  }\r\n}","export const GET_CUSTOM_FONTS = 'GET_CUSTOM_FONTS';\r\n\r\nexport function getCustomFonts(metaValue){\r\n  return {\r\n    type: GET_CUSTOM_FONTS,\r\n    metaValue,\r\n  }\r\n}\r\n","export const SET_MODAL_SETTINGS = 'SET_MODAL_SETTINGS';\r\nexport const TOGGLE_MODAL = 'TOGGLE_MODAL';\r\n\r\nexport function setModalSettings(settings){\r\n  return {\r\n    ...settings,\r\n    type: SET_MODAL_SETTINGS,\r\n  }\r\n}\r\n\r\nexport function toggleModal(){\r\n  return {\r\n    type: TOGGLE_MODAL,\r\n  }\r\n}\r\n","import {SET_MODAL_SETTINGS, TOGGLE_MODAL} from \"./actions\";\r\n\r\nconst defaultState = {\r\n  fields: [],\r\n  active: false,\r\n  title: 'Modal',\r\n  submitButton: 'Submit',\r\n  submit: function(data){\r\n    console.log(data);\r\n  },\r\n  success: (res)=>{\r\n    console.log(res);\r\n  }\r\n};\r\n\r\nexport function modalSettingsReducer(state, action) {\r\n  state = state || defaultState;\r\n  switch (action.type){\r\n    case SET_MODAL_SETTINGS:{\r\n      state = {\r\n        fields: action.fields,\r\n        title: action.title || defaultState.title,\r\n        submit: action.submit || defaultState.submit,\r\n        submitButton: action.submitButton || defaultState.submitButton,\r\n        success: action.success || defaultState.success,\r\n        active: action.active,\r\n      };\r\n    }break;\r\n    case TOGGLE_MODAL:{\r\n      state = {\r\n        ...defaultState,\r\n        active: ! state.active,\r\n      };\r\n    }break;\r\n  }\r\n  return state;\r\n}","import {SET_DISABLED, SET_ENABLE, SET_PROPERTY} from \"./actions\";\r\n\r\nconst defaultState = {\r\n  adminEnable: true\r\n};\r\n\r\nexport function changeEnableState(state, action) {\r\n  state = state || defaultState;\r\n  switch (action.type){\r\n    case SET_DISABLED:{\r\n      state = {\r\n          ...state,\r\n        adminEnable: false\r\n      };\r\n    }break;\r\n    case SET_ENABLE:{\r\n      state = {\r\n        ...state,\r\n        adminEnable: true\r\n      };\r\n    }break;\r\n    case SET_PROPERTY:{\r\n      const {propertyName, value} = action;\r\n      if(propertyName){\r\n\r\n        state = {\r\n          ...state,\r\n        };\r\n        _.set(state, propertyName, value);\r\n      }\r\n    }break;\r\n  }\r\n  return state;\r\n}","import {SET_LOGO} from \"./actions\";\r\n\r\nconst defaultState = window.admin_logo ? window.admin_logo : {};\r\n\r\nexport function adminLogoReducer(state, action) {\r\n  state = state || defaultState;\r\n  switch (action.type){\r\n    case SET_LOGO:{\r\n      state = {\r\n          ...action.logoData\r\n      };\r\n    }break;\r\n  }\r\n  return state;\r\n}","import { ASSETS_SHOW, ASSETS_TOGGLE } from \"./actions\";\r\n\r\nconst defaultState = {\r\n  onChoose: function (media) {\r\n    // console.log(media);\r\n  },\r\n  active: false,\r\n};\r\n\r\nexport function assetsSettingsReducer(state, action) {\r\n  state = state || defaultState;\r\n  switch (action.type) {\r\n    case ASSETS_SHOW: {\r\n      state = {\r\n        ...action.settings,\r\n      };\r\n    } break;\r\n    case ASSETS_TOGGLE: {\r\n      state = { ...state };\r\n      state.active = false;\r\n    } break;\r\n  }\r\n  return state;\r\n}","import {SET_ACE} from \"./actions\";\r\n\r\nconst defaultState = {\r\n  AceEditor: null\r\n};\r\n\r\nexport function aceEditorReducer(state, action) {\r\n  state = state || defaultState;\r\n  switch (action.type){\r\n    case SET_ACE:{\r\n      state = {\r\n        AceEditor: action.AceEditor\r\n      };\r\n    }break;\r\n  }\r\n  return state;\r\n}","import {\r\n  WEBSOCKETS_SERVER_ENABLED,\r\n  WEBSOCKETS_SERVER_KEY,\r\n  WEBSOCKETS_SERVER_PORT\r\n} from './actions'\r\n\r\nconst initialState = {};\r\n\r\nexport const websocketsReducer = (state = initialState, { type, item }) => {\r\n  switch (type) {\r\n    case WEBSOCKETS_SERVER_ENABLED:{\r\n\r\n      state = { ...state,\r\n        enabled: item,\r\n      };\r\n\r\n    }break;\r\n    case WEBSOCKETS_SERVER_KEY:{\r\n\r\n      state = { ...state,\r\n        key: item\r\n      };\r\n\r\n    }break;\r\n    case WEBSOCKETS_SERVER_PORT:{\r\n\r\n      state = { ...state,\r\n        port: item,\r\n      };\r\n\r\n    }break;\r\n  }\r\n  return state;\r\n}","import {GET_CUSTOM_FONTS} from \"./actions\";\r\n\r\nconst defaultState = {\r\n    metaValue: []\r\n};\r\n\r\nexport function customFontsReduser(state, action) {\r\n  state = state || defaultState;\r\n  switch (action.type){\r\n    case GET_CUSTOM_FONTS:{\r\n      state = {\r\n          ...state,\r\n        metaValue: action.metaValue\r\n      };\r\n    }break;\r\n  }\r\n  return state;\r\n}","import {combineReducers} from 'redux';\r\nimport {modalSettingsReducer} from \"./modal-settings/reducers\";\r\nimport {changeEnableState} from \"./admin-state/reducers\";\r\nimport {adminLogoReducer} from \"./admin-logo/reducers\";\r\nimport {assetsSettingsReducer} from \"../../../../editor/src/js/store/assets-browser/reducers\";\r\nimport {aceEditorReducer} from \"./ace-editor/reducers\";\r\nimport {currentUserReducer} from \"../../../../front-app/src/js/store/current-user/reducers\";\r\nimport { websocketsReducer } from \"./websockets-storage/reducers\";\r\nimport {customFontsReduser} from \"./custom-fonts/reducers\";\r\n\r\n\r\nexport default combineReducers({\r\n  modalSettings: modalSettingsReducer,\r\n  adminState: changeEnableState,\r\n  adminLogo: adminLogoReducer,\r\n  assetsManagerSettings: assetsSettingsReducer,\r\n  aceEditorReducer: aceEditorReducer,\r\n  currentUser: currentUserReducer,\r\n  websocketStore: websocketsReducer,\r\n  customFonts: customFontsReduser,\r\n});\r\n","import {createStore} from 'redux';\r\nimport rootReducer from './reducers'\r\n\r\nconst store = createStore(rootReducer);\r\nexport default store;","export const WEBSOCKETS_SERVER_ENABLED = 'WEBSOCKETS_SERVER_ENABLED';\r\nexport const WEBSOCKETS_SERVER_KEY = 'WEBSOCKETS_SERVER_KEY';\r\nexport const WEBSOCKETS_SERVER_PORT = 'WEBSOCKETS_SERVER_PORT';\r\n\r\nexport function setWebsocketsEnabled(item){\r\n  return { type: WEBSOCKETS_SERVER_ENABLED, item }\r\n}\r\nexport function setWebsocketsKey(item){\r\n  return { type: WEBSOCKETS_SERVER_KEY, item }\r\n}\r\nexport function setWebsocketsPort(item){\r\n  return { type: WEBSOCKETS_SERVER_PORT, item }\r\n}\r\n","/**\r\n * Имеет интерфейс для доступы к свойствам data (любой вложенности)\r\n * @class AltrpModel\r\n */\r\nimport cloneDeep from 'lodash.clonedeep';\r\nimport get from 'lodash.get';\r\nimport set from 'lodash.set';\r\nimport has from 'lodash.has';\r\nimport unset from 'lodash.unset';\r\nimport isEmpty from 'lodash.isempty';\r\n// import {cloneDeep, get, set, has, unset, isString, isEmpty} from \"lodash\";\r\n\r\nclass AltrpModel {\r\n  constructor(data = {}) {\r\n    this.data = cloneDeep(data);\r\n  }\r\n\r\n  /**\r\n   * Возваращает объект данных\r\n   * @params {boolean} clone - клонировать или ссылку на данные\r\n   * @return {{}}\r\n   */\r\n  getData(clone = true) {\r\n    if(clone){\r\n      return cloneDeep(this.data);\r\n    }\r\n    return this.data;\r\n  }\r\n\r\n  /**\r\n   * Пустой ли объект\r\n   */\r\n  isEmpty(){\r\n    return isEmpty(this.data);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  getProperty(name, defaultValue = '') {\r\n    return get(this.data, name, defaultValue);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  hasProperty(name, defaultValue = '') {\r\n    return has(this.data, name);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {{}}\r\n   */\r\n  setProperty(name, value = '') {\r\n    if(value instanceof AltrpModel){\r\n      value = value.getData(false);\r\n    }\r\n    return set(this.data, name, value);\r\n  }\r\n  /**\r\n   * Удаляет свойства name\r\n   * @params {string} name\r\n   * @return {*}\r\n   */\r\n  unsetProperty(name) {\r\n    return unset(this.data, name);\r\n  }\r\n}\r\nwindow.AltrpModel = AltrpModel;\r\nexport default AltrpModel\r\n","import queryString from \"query-string\";\r\nimport { replaceContentWithData } from \"../../../../front-app/src/js/helpers\";\r\nwindow.queryString = queryString;\r\n/**\r\n * @class Resource\r\n * */\r\nexport const MAX_FILE_SIZE = 83886080;\r\n\r\nclass Resource {\r\n  /**\r\n   * @member {Object} routes\r\n   * @member {string} routes.get\r\n   * @member {string} routes.post\r\n   * @member {string} routes.create\r\n   * @member {string} routes.getAll\r\n   */\r\n  constructor(data) {\r\n    this.route = data.route;\r\n    /**\r\n     * Нужно ли при каждом запросе подставлять в URL данные\r\n     * @type {*|boolean}\r\n     */\r\n    this.dynamicURL = data.dynamicURL || false;\r\n    if (!this.route) {\r\n      throw \"Нужен route\";\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Получить роут\r\n   * @return {string}\r\n   */\r\n  getRoute() {\r\n    return this.dynamicURL ? replaceContentWithData(this.route) : this.route;\r\n  }\r\n  /**\r\n   * @return {Promise}\r\n   * */\r\n\r\n  getAuthorList() {\r\n    let options = {\r\n      method: \"get\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    };\r\n    return fetch(\"/admin/ajax/users\", options).then(res => {\r\n      if (res.ok === false) {\r\n        return Promise.reject({ res: res.text(), status: res.status });\r\n      }\r\n      return res.json();\r\n    });\r\n  }\r\n\r\n  get(id) {\r\n    if (!id) {\r\n      console.error('Get only by \"id\"');\r\n    }\r\n\r\n    let options = {\r\n      method: \"get\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    };\r\n    let route = this.getRoute();\r\n    let url;\r\n    if (route[route.length - 1] === \"/\") {\r\n      url = route + id;\r\n    } else {\r\n      url = route + \"/\" + id;\r\n    }\r\n    return fetch(url, options).then(res => {\r\n      if (res.ok === false) {\r\n        return Promise.reject({ res: res.text(), status: res.status });\r\n      }\r\n      return res.json();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Делает GET запрос в роуты по типу /route/{id}/somedata\r\n   * @return {Promise}\r\n   * */\r\n  getInContext(id) {\r\n    if (!id) {\r\n      console.error('Get only by \"id\"');\r\n    }\r\n\r\n    let options = {\r\n      method: \"get\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    };\r\n    let route = this.getRoute();\r\n\r\n    let url = route.replace(`{id}`, id);\r\n    return fetch(url, options).then(res => {\r\n      if (res.ok === false) {\r\n        return Promise.reject({ res: res.text(), status: res.status });\r\n      }\r\n      return res.json();\r\n    });\r\n  }\r\n  /**\r\n   * простой запрос\r\n   * @return {Promise}\r\n   * */\r\n  getAll() {\r\n    let options = {\r\n      method: \"get\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    };\r\n\r\n    let url = this.getRoute();\r\n    return fetch(url, options).then(res => {\r\n      if (res.ok === false) {\r\n        return Promise.reject({ res: res.text(), status: res.status });\r\n      }\r\n      return res.json();\r\n    });\r\n  }\r\n  /**\r\n   * простой запрос\r\n   * @return {Promise}\r\n   * */\r\n  getAsText() {\r\n    let options = {\r\n      method: \"get\",\r\n      headers: {\r\n        \"Content-Type\": \"text/plain\"\r\n      }\r\n    };\r\n\r\n    let url = this.getRoute();\r\n    return fetch(url, options).then(res => {\r\n      if (res.ok === false) {\r\n        return Promise.reject({ res: res.text(), status: res.status });\r\n      }\r\n      return res.text();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Запрос со строкой для поиска вхождений\r\n   * @param {string} searchString\r\n   * @return {Promise}\r\n   * */\r\n  search(searchString) {\r\n    let options = {\r\n      method: \"get\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    };\r\n    let url;\r\n    if (this.getRoute().indexOf(\"?\") === -1) {\r\n      url = this.getRoute() + `?s=${searchString}`;\r\n    } else {\r\n      url = this.getRoute() + `&s=${searchString}`;\r\n    }\r\n    return fetch(url, options).then(res => {\r\n      if (res.ok === false) {\r\n        return Promise.reject({ res: res.text(), status: res.status });\r\n      }\r\n      return res.json();\r\n    });\r\n  }\r\n  /**\r\n   * @param {any} data\r\n   * @param {object | null} headers\r\n   * @return {Promise}\r\n   * */\r\n  post(data = {}, headers) {\r\n    headers = _.assign(\r\n      {\r\n        \"X-CSRF-TOKEN\": _token\r\n        // 'Content-Type': 'application/json',\r\n        // 'Accept': 'application/json',\r\n      },\r\n      headers\r\n    );\r\n    let formData = new FormData();\r\n    let hasFile = false;\r\n    _.each(data, (value, key) => {\r\n      if (_.isArray(value)) {\r\n        for (let i = 0; i < value.length; i++) {\r\n          if (value[i] instanceof File) {\r\n            hasFile = true;\r\n          }\r\n          if (value[i].size > MAX_FILE_SIZE) {\r\n            continue;\r\n          }\r\n          formData.append(`${key}[${i}]`, value[i]);\r\n        }\r\n      } else {\r\n        formData.append(key, value);\r\n      }\r\n    });\r\n    if (!hasFile) {\r\n      headers[\"Content-Type\"] = \"application/json\";\r\n      headers[\"Accept\"] = \"application/json\";\r\n    }\r\n    let options = {\r\n      method: \"POST\",\r\n      body: hasFile ? formData : JSON.stringify(data),\r\n      headers\r\n    };\r\n    return fetch(this.getRoute(), options).then(res => {\r\n      if (res.ok === false) {\r\n        return Promise.reject({ res: res.text(), status: res.status });\r\n      }\r\n      return res.json();\r\n    });\r\n    // .catch(err => {\r\n    //   console.error(err);\r\n    //   return Promise.reject(err.then(), err.status);\r\n    //   return err.then();\r\n    // });\r\n  }\r\n  /**\r\n   * @param {FileList | File[]} files\r\n   * @return {Promise}\r\n   * */\r\n  postFiles(files) {\r\n    // fileTypes = fileTypes || \"image\";\r\n    let headers = {\r\n      \"X-CSRF-TOKEN\": _token\r\n    };\r\n    let formData = new FormData();\r\n    // fileTypes = fileTypes.split(\",\");\r\n    // fileTypes.forEach(fileType => {\r\n    //   if (!fileType) {\r\n    //     return;\r\n    //   }\r\n    //   fileType = fileType.trim();\r\n    //\r\n    // });\r\n    for (let i = 0; i < files.length; i++) {\r\n      if (\r\n        files[i].size > MAX_FILE_SIZE\r\n        // ||          files[i].type.indexOf(fileType) === -1\r\n      ) {\r\n        continue;\r\n      }\r\n      formData.append(`files[${i}]`, files[i]);\r\n    }\r\n    let options = {\r\n      method: \"POST\",\r\n      body: formData,\r\n      headers\r\n    };\r\n    return fetch(this.getRoute(), options).then(res => {\r\n      if (res.ok === false) {\r\n        return Promise.reject({ res: res.text(), status: res.status });\r\n      }\r\n      return res.json();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @param {File} file\r\n   * @return {Promise}\r\n   * */\r\n  postFile(file) {\r\n    let headers = {\r\n      \"X-CSRF-TOKEN\": _token\r\n    };\r\n    let formData = new FormData();\r\n    formData.append(\"favicon\", file);\r\n    let options = {\r\n      method: \"POST\",\r\n      body: formData,\r\n      headers\r\n    };\r\n    return fetch(this.getRoute(), options).then(res => {\r\n      if (res.ok === false) {\r\n        return Promise.reject({ res: res.text(), status: res.status });\r\n      }\r\n      return res.json();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @return {Promise}\r\n   * */\r\n  put(id, data, headers = null) {\r\n    headers = _.assign(\r\n      {\r\n        \"X-CSRF-TOKEN\": _token\r\n        // 'Content-Type': 'application/json',\r\n        // 'Accept': 'application/json',\r\n      },\r\n      headers\r\n    );\r\n    let formData = new FormData();\r\n    let hasFile = false;\r\n\r\n    _.each(data, (value, key) => {\r\n      if (_.isArray(value)) {\r\n        for (let i = 0; i < value.length; i++) {\r\n          if (value[i] instanceof File) {\r\n            hasFile = true;\r\n          }\r\n          if (value[i].size > MAX_FILE_SIZE) {\r\n            console.log(value[i]);\r\n            continue;\r\n          }\r\n          formData.append(`${key}[${i}]`, value[i]);\r\n        }\r\n      } else {\r\n        formData.append(key, value);\r\n      }\r\n    });\r\n\r\n    if (!hasFile) {\r\n      headers[\"Content-Type\"] = \"application/json\";\r\n      headers[\"Accept\"] = \"application/json\";\r\n    }\r\n    let options = {\r\n      method: \"put\",\r\n      // body: JSON.stringify(data),\r\n      body: hasFile ? formData : JSON.stringify(data),\r\n      headers: headers\r\n    };\r\n    let url = this.getRoute() + (id ? \"/\" + id : \"\");\r\n    return fetch(url, options).then(res => {\r\n      if (res.ok === false) {\r\n        return Promise.reject(res.text(), res.status);\r\n      }\r\n      return res.json();\r\n    });\r\n  }\r\n  /**\r\n   * @param {string} id\r\n   * @param {{}} data\r\n   * @param {string | {}} customHeaders\r\n   * @return {Promise}\r\n   * */\r\n  delete(id = \"\", data = {}, customHeaders) {\r\n    let options = {\r\n      method: \"delete\",\r\n      headers: _.assign(\r\n        {\r\n          \"X-CSRF-TOKEN\": _token,\r\n          \"Content-Type\": \"application/json\",\r\n          \"Accept\": \"application/json\",\r\n        },\r\n        customHeaders\r\n      )\r\n    };\r\n    if (!_.isEmpty(data)) {\r\n      options.body = JSON.stringify(data);\r\n    }\r\n    let url = this.getRoute() + (id ? \"/\" + id : \"\");\r\n    return fetch(url, options).then(res => {\r\n      if (res.ok === false) {\r\n        return Promise.reject({ res: res.text(), status: res.status });\r\n      }\r\n      return res.json();\r\n    });\r\n  }\r\n  /**\r\n   * @return {Promise}\r\n   * */\r\n  getOptions() {\r\n    let options = {\r\n      method: \"get\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    };\r\n    let url = this.getRoute() + \"/options\";\r\n    return fetch(url, options).then(res => {\r\n      if (res.ok === false) {\r\n        return Promise.reject({ res: res.text(), status: res.status });\r\n      }\r\n      return res.json();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * GET запрос с параметрами\r\n   * @param {object} params\r\n   * @param {string | {}} customHeaders\r\n   * @return {Promise}\r\n   * */\r\n  async getQueried(params, customHeaders = null) {\r\n    let options = {\r\n      method: \"get\",\r\n      headers: _.assign(\r\n        {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        customHeaders\r\n      )\r\n    };\r\n    let _params = {};\r\n    _.forEach(params, (paramValue, paramName) => {\r\n      if (_.isArray(paramValue)) {\r\n        paramValue = paramValue.join(\",\");\r\n      }\r\n      _params[paramName] = paramValue;\r\n    });\r\n    let url = queryString.parseUrl(this.getRoute()).url;\r\n    _params = _.assign(queryString.parseUrl(this.route).query, _params);\r\n    url = `${url}?${queryString.stringify(_params)}`;\r\n    let res = await fetch(url, options).then(res => {\r\n      if (res.ok === false) {\r\n        return Promise.reject({ res: res.text(), status: res.status });\r\n      }\r\n      return res.json();\r\n    });\r\n    // console.log(res)\r\n    return res;\r\n  }\r\n}\r\n\r\nexport default Resource;\r\n","const CONSTANTS = {\r\n  TEMPLATE_UPDATED: \"TEMPLATE_UPDATED\",\r\n  TEMPLATE_NEED_UPDATE: \"TEMPLATE_NEED_UPDATE\",\r\n  TEMPLATE_SAVING: \"TEMPLATE_SAVING\",\r\n  DEFAULT_BREAKPOINT: \"DEFAULT_BREAKPOINT\",\r\n  DEFAULT_AREAS: [\r\n    'content',\r\n    'footer',\r\n    'header',\r\n    'popup',\r\n    'email',\r\n    'card',\r\n    'reports',\r\n  ],\r\n  SCREENS: [\r\n    {\r\n      icon: \"wide_screen\",\r\n      name: \"DEFAULT_BREAKPOINT\",\r\n      id: 1,\r\n      width: \"100%\",\r\n      fullMediaQuery: \"\",\r\n      mediaQuery: \"\"\r\n    },\r\n    {\r\n      icon: \"desktop\",\r\n      name: \"Desktop\",\r\n      id: 2,\r\n      width: \"1440px\",\r\n      fullMediaQuery:\r\n        \"@media screen and (max-width: 1440px) and (min-width: 1025px)\",\r\n      mediaQuery: \"@media screen and (max-width: 1440px)\"\r\n    },\r\n    {\r\n      icon: \"laptop\",\r\n      name: \"Laptop\",\r\n      id: 3,\r\n      fullMediaQuery:\r\n        \"@media screen and (max-width: 1024px) and (min-width: 769px)\",\r\n      width: \"1024px\",\r\n      mediaQuery: \"@media screen and (max-width: 1024px)\"\r\n    },\r\n    {\r\n      icon: \"tablet\",\r\n      name: \"Tablet\",\r\n      id: 4,\r\n      fullMediaQuery:\r\n        \"@media screen and (max-width: 768px) and (min-width: 451px)\",\r\n      width: \"768px\",\r\n      mediaQuery: \"@media screen and (max-width: 768px)\"\r\n    },\r\n    {\r\n      icon: \"big_phone\",\r\n      name: \"Big-Phone\",\r\n      id: 5,\r\n      width: \"450px\",\r\n      fullMediaQuery:\r\n        \"@media screen and (max-width: 450px) and (min-width: 321px)\",\r\n      mediaQuery: \"@media screen and (max-width: 450px)\"\r\n    },\r\n    {\r\n      icon: \"small_phone\",\r\n      name: \"Small-Phone\",\r\n      id: 6,\r\n      fullMediaQuery: \"@media screen and (max-width: 320px)\",\r\n      width: \"320px\",\r\n      mediaQuery: \"@media screen and (max-width: 320px)\"\r\n    }\r\n  ]\r\n};\r\nexport default CONSTANTS;\r\n","export const ASSETS_SHOW = 'ASSETS_SHOW';\r\nexport const ASSETS_TOGGLE = 'ASSETS_TOGGLE';\r\n\r\nexport function assetsShow(settings) {\r\n  settings.active = true;\r\n  return {\r\n    type: ASSETS_SHOW,\r\n    settings\r\n  };\r\n}\r\n\r\nexport function assetsToggle() {\r\n  return {\r\n    type: ASSETS_TOGGLE,\r\n  };\r\n}\r\n\r\n","/**\r\n * @property {Int} id\r\n * @property {Object} data\r\n * */\r\nclass Template {\r\n\r\n}\r\n\r\nexport default Template","import Template from \"./Template\";\r\nimport {setAreas} from \"../store/areas/actions\";\r\n/**\r\n * @property {Template} template\r\n * @property {Object} settings\r\n * */\r\nclass Area {\r\n  static areaFactory(areaData) {\r\n    let area = new Area();\r\n    area.settings = areaData.settings;\r\n    area.id = areaData.id;\r\n    area.template = new Template();\r\n    area.template.data = areaData.template\r\n      ? areaData.template.data\r\n      : null;\r\n    if(_.isString(area.template.data)){\r\n      area.template.data = JSON.parse(area.template.data);\r\n    }\r\n    area.template.id = areaData.template ? areaData.template.id : null;\r\n    area.template.name =  areaData.template ?  areaData.template.name : '';\r\n    if (areaData.area_name === \"popups\") {\r\n      // area.templates = [];\r\n      // area.templates = new Template();\r\n      area.templates = [];\r\n      areaData.templates = areaData.templates || [];\r\n      areaData.templates.forEach(_t => {\r\n        let template = new Template();\r\n        template.data = _t ? _t.data : null;\r\n        if(_.isString(template.data)){\r\n          template.data = JSON.parse(template.data);\r\n        }\r\n        template.name = _t ? _t.name : '';\r\n        template.id = _t ? JSON.parse(_t.id) : null;\r\n        template.guid = _t ? _t.guid : null;\r\n        template.template_settings = _t ? _t.template_settings : [];\r\n        template.triggers = _t ? _t.triggers : {};\r\n        area.templates.push(template);\r\n      });\r\n    }\r\n    return area;\r\n  }\r\n\r\n  /**\r\n   * Массив шаблонов\r\n   * @return {*|Array}\r\n   */\r\n  getTemplates() {\r\n    this.templates = this.templates || [];\r\n    return this.templates;\r\n  }\r\n\r\n  /**\r\n   * Проверка является ли область пользовательской\r\n   * @return {boolean}\r\n   */\r\n  isCustomArea(){\r\n    return ! ! _.get(this.settings, 'area_type');\r\n  }\r\n  /**\r\n   * Проверка является ли область пользовательской\r\n   * @return {[string]}\r\n   */\r\n  getAreaClasses(){\r\n    if(this.CSSclasses){\r\n      return this.CSSclasses;\r\n    }\r\n    this.CSSclasses = [];\r\n    this.CSSclasses.push(`app-area_id-${this.id}`);\r\n    this.settings.sidebar_type && this.CSSclasses.push(`app-area_${this.settings.sidebar_type}`);\r\n    this.settings.sidebar_location && this.CSSclasses.push(`app-area_sidebar-location-${this.settings.sidebar_location}`);\r\n    return this.CSSclasses;\r\n  }\r\n\r\n  /**\r\n   * Получить пользовательские стили, если они есть\r\n   * @return {string}\r\n   */\r\n  getCustomCSS(){\r\n    let styles = '';\r\n\r\n    if(! _.isString(this.settings.custom_css)){\r\n      return styles;\r\n    }\r\n    styles = this.settings.custom_css.replace(/__selector__/g, `.app-area_id-${this.id}`);\r\n    return  styles;\r\n  }\r\n\r\n  /**\r\n   * Обновить значение настройки\r\n   */\r\n  setSetting(settingName, value){\r\n    if(this.getSetting(settingName) === value){\r\n      return;\r\n    }\r\n    _.set(this.settings, settingName, value);\r\n    if(this.component){\r\n      this.component.setState(state=>({...state, settings: {...this.settings}}))\r\n    }\r\n    if(window.currentRouteComponent){\r\n      window.currentRouteComponent.setState(state=>({...state, updateToken: Math.random()}));\r\n      appStore.dispatch(setAreas([...appStore.getState().areas]))\r\n    } else {\r\n      appStore.dispatch(setAreas([...appStore.getState().areas]))\r\n    }\r\n  }\r\n  /**\r\n   * Получить значение настройки\r\n   */\r\n  getSetting(settingName, _default){\r\n    return _.get(this.settings, settingName, _default);\r\n  }\r\n}\r\n\r\nexport default Area;\r\n","/**\r\n * @class Datasource\r\n */\r\nimport AltrpModel from \"../../../../editor/src/js/classes/AltrpModel\";\r\nimport {getDataByPath, isJSON, mbParseJSON} from \"../helpers\";\r\n\r\nclass Datasource extends AltrpModel{\r\n  /**\r\n   * получить url для вэба\r\n   * @return {string}\r\n   */\r\n  getWebUrl(){\r\n    return this.getProperty('source.web_url').replace(/{([\\s\\S]+?)}/g, '');\r\n  }\r\n  /**\r\n   * получить тип ресурса\r\n   * @return {string}\r\n   */\r\n  getType(){\r\n    return this.getProperty('source.type');\r\n  }\r\n  /**\r\n   * получить url для вэба\r\n   * @return {string}\r\n   */\r\n  getAlias(){\r\n    return this.getProperty('alias');\r\n  }\r\n\r\n  /**\r\n   * Получить параметры для запроса к ресурсу\r\n   * @params {{}} urlParams\r\n   * @params {string} excludePath - исключение из параметров, которые должны браться динамически\r\n   * @return{null | {}}\r\n   */\r\n  getParams(urlParams = {}, excludePath = ''){\r\n    const {currentModel, currentDataStorage} = appStore.getState();\r\n    let parsedTemplate = this.getProperty('parameters');\r\n    const params = {};\r\n    if(! parsedTemplate){\r\n      return null;\r\n    }\r\n    if(isJSON(parsedTemplate)){\r\n      parsedTemplate = mbParseJSON(parsedTemplate, []);\r\n      parsedTemplate = parsedTemplate.map(param=>{\r\n        return [param.paramName, param.paramValue];\r\n      });\r\n\r\n    } else {\r\n      parsedTemplate = parsedTemplate.split('\\n');\r\n      parsedTemplate = parsedTemplate.filter(line => line);\r\n      parsedTemplate = parsedTemplate.map(line=> {\r\n        line = line.split('|');\r\n        line[0] = line[0].trim();\r\n        if(line.length === 1){\r\n          line.push(line[0]);\r\n        } else {\r\n          line[1] = line[1].trim();\r\n        }\r\n        return line\r\n      });\r\n    }\r\n    parsedTemplate.forEach(([left, right])=>{\r\n      if(right.match(/{{([\\s\\S]+?)(?=}})/g)){\r\n        right = right.trim();\r\n        right = right.match(/{{([\\s\\S]+?)(?=}})/g)[0].replace('{{', '');\r\n        if(excludePath && right.indexOf(excludePath) === 0){\r\n          right = right;\r\n        } else {\r\n          right = getDataByPath(right);\r\n        }\r\n\r\n      }\r\n      if(right || right === 0){\r\n        params[left] = right;\r\n      }\r\n\r\n    });\r\n    return params;\r\n  }\r\n}\r\n\r\nexport default Datasource\r\n","/**\r\n * @property {Area[]} areas\r\n * */\r\nimport Area from \"./Area\";\r\nimport Datasource from \"./Datasource\";\r\n\r\nclass Route {\r\n  constructor(data) {\r\n    this.id = data.id;\r\n    this.path = data.path;\r\n    this.icon = data.icon;\r\n    this.model = data.model;\r\n    this.models = data.models;\r\n    this.parent_page_id = data.parent_page_id;\r\n    if (!this.models) {\r\n      this.models = data.model ? [data.model] : [];\r\n    }\r\n    this.model = data.model;\r\n    this.data_sources = data.data_sources || [];\r\n    this.data_sources = this.data_sources.map(\r\n      data_source => new Datasource(data_source)\r\n    );\r\n    this.title = data.title || \"\";\r\n    this.allowed = data.allowed;\r\n    this.redirect = data.redirect;\r\n    this.lazy = data.lazy;\r\n  }\r\n  static routeFabric(data) {\r\n    let route = new Route(data);\r\n    route.areas = [];\r\n    data.areas = data.areas || [];\r\n    for (let _area of data.areas) {\r\n      route.areas.push(Area.areaFactory(_area));\r\n    }\r\n    return route;\r\n  }\r\n}\r\n\r\nexport default Route;\r\n","\r\n\r\nclass AltrpSVG extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    window.assetsCache = window.assetsCache || {};\r\n    this.regex = new RegExp('[\\\\s\\\\r\\\\t\\\\n]*([a-z0-9\\\\-_]+)[\\\\s\\\\r\\\\t\\\\n]*=[\\\\s\\\\r\\\\t\\\\n]*([\\'\"])((?:\\\\\\\\\\\\2|(?!\\\\2).)*)\\\\2', 'ig'); //для работы с циклом\r\n\r\n    let _props = {};\r\n    let svg = '';\r\n    if(this.props.rawSVG){\r\n      window.assetsCache[this.props.url] = this.props.rawSVG;\r\n      svg = this.props.rawSVG;\r\n      let propsString = svg.match(/<svg(.*?)=\\\"(.*?)\\\">/gi)?svg.match(/<svg(.*?)=\\\"(.*?)\\\">/gi)[0] : '';\r\n\r\n      let match;\r\n      while (match = this.regex.exec(propsString)) {\r\n        _props[match[1]] = match[3];\r\n      }\r\n\r\n      svg = svg.replace(/<!--[\\s\\S]*?-->/g, '')\r\n      svg = svg.replace(/<![\\s\\S]*?>/g, '')\r\n      svg = svg.replace(/<\\?[\\s\\S]*?\\?>/g, '')\r\n      svg = svg.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, \"\");\r\n      // svg = svg.replace(/<svg[\\s\\S]*?>/gi, \"\").replace(/<\\/svg>/gi, \"\");\r\n    }\r\n    this.state = {\r\n      svg: svg || '',\r\n      props: _props,\r\n    };\r\n  }\r\n  async componentDidMount() {\r\n    window.assetsCache = window.assetsCache || {};\r\n    if(this.props.rawSVG){\r\n      window.assetsCache[this.props.url] = this.props.rawSVG;\r\n    }\r\n    if(! this.props.url){\r\n      return;\r\n    }\r\n    let content = (window.assetsCache[this.props.url]);\r\n\r\n    if(! content) {\r\n      let resource = new window.altrpHelpers.Resource({route: this.props.url});\r\n      content = await resource.getAsText();\r\n      window.assetsCache[this.props.url] = content;\r\n    }\r\n    let propsString = content.match(/<svg(.*?)=\\\"(.*?)\\\">/gi)?content.match(/<svg(.*?)=\\\"(.*?)\\\">/gi)[0] : '';\r\n    let props = {};\r\n    let match;\r\n    while (match = this.regex.exec(propsString)) {\r\n      props[match[1]] = match[3];\r\n    }\r\n    this.setState(state => ({...state, props}));\r\n\r\n    content = content.replace(/<!--[\\s\\S]*?-->/g, '')\r\n    content = content.replace(/<![\\s\\S]*?>/g, '')\r\n    content = content.replace(/<\\?[\\s\\S]*?\\?>/g, '')\r\n    content = content.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, \"\");\r\n    // content = content.replace(/<svg[\\s\\S]*?>/gi, \"\").replace(/<\\/svg>/gi, \"\");\r\n\r\n    this.setState(state=>({...state, svg: content}));\r\n  }\r\n\r\n  /**\r\n   * Обновиим если url в пропсах изменился\r\n   * @param prevProps\r\n   * @param prevState\r\n   */\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if(this.props.url !== prevProps.url){\r\n      this.componentDidMount();\r\n    }\r\n  }\r\n  render(){\r\n    let props = _.assign(this.state.props, this.props);\r\n    _.unset(props, 'url');\r\n    _.unset(props, 'rawSVG');\r\n    if(! this.state.svg){\r\n      return '';\r\n    }\r\n    let divElement;\r\n    let svg = '';\r\n    if(window.SSR){\r\n      divElement = parse(`<div>${this.state.svg}</div>`)\r\n      divElement.childNodes[1]?.removeAttribute('width')\r\n      divElement.childNodes[1]?.removeAttribute('height')\r\n      svg = divElement.childNodes[1]?.outerHTML;\r\n    } else {\r\n      divElement = document.createElement('div');\r\n      divElement.innerHTML = this.state.svg;\r\n      divElement.children[0]?.removeAttribute('width')\r\n      divElement.children[0]?.removeAttribute('height')\r\n      svg = divElement.children[0]?.outerHTML;\r\n    }\r\n    return <svg {...props}  dangerouslySetInnerHTML={{__html: svg || this.state.svg}}/>\r\n  }\r\n}\r\n\r\nexport default AltrpSVG;\r\n","import AltrpModel from \"../../../../../editor/src/js/classes/AltrpModel\";\r\n// import ArrayConverter from \"./ArrayConverter\";\r\n/**\r\n * @class DataConverter\r\n */\r\nclass DataConverter extends AltrpModel {\r\n  /**\r\n   * Изменяем данные\r\n   * если тип не соответствует, то возращаем исходные данные\r\n   * @param {*} data\r\n   * @return {*}\r\n   */\r\n  convertData(data) {\r\n    if (!this.checkData(data)) {\r\n      return data;\r\n    }\r\n    return this.doConvert(data);\r\n  }\r\n\r\n  /**\r\n   * Выполняем изменение данных\r\n   */\r\n  doConvert(data) {\r\n    const convertType = this.getConvertType();\r\n    if (_.isFunction(this[convertType])) {\r\n      return this[convertType](data);\r\n    }\r\n    return data;\r\n  }\r\n\r\n  checkData() {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Тип получаемых данных\r\n   * @return {string}\r\n   */\r\n  getDataType() {\r\n    return this.getProperty(\"data_type\");\r\n  }\r\n  /**\r\n   * Тип получаемых данных\r\n   * @return {string}\r\n   */\r\n  getConvertType() {\r\n    return this.getProperty(\"convert_type\");\r\n  }\r\n  /**\r\n   * Тип получаемых данных\r\n   * @param {number} index\r\n   * @return {string}\r\n   */\r\n  getArgument(index = 1) {\r\n    return this.getProperty(`argument${index || 1}`);\r\n  }\r\n}\r\n\r\nexport default DataConverter;\r\n","import CONSTANTS from \"../../../editor/src/js/consts\";\r\nimport AltrpModel from \"../../../editor/src/js/classes/AltrpModel\";\r\nimport Resource from \"../../../editor/src/js/classes/Resource\";\r\nimport { changeCurrentUser } from \"./store/current-user/actions\";\r\nimport { changeCurrentUserProperty } from \"./store/current-user/actions\";\r\nimport { changeAppRoutes } from \"./store/routes/actions\";\r\nimport Route from \"./classes/Route\";\r\nimport { changePageState } from \"./store/altrp-page-state-storage/actions\";\r\nimport { changeAltrpMeta } from \"./store/altrp-meta-storage/actions\";\r\nimport queryString from \"query-string\";\r\nimport AltrpSVG from \"../../../editor/src/js/components/altrp-svg/AltrpSVG\";\r\nimport ArrayConverter from \"./classes/converters/ArrayConverter\";\r\nimport DataConverter from \"./classes/converters/DataConverter\";\r\nimport { changeFormFieldValue } from \"./store/forms-data-storage/actions\";\r\nimport { addResponseData } from \"./store/responses-storage/actions\";\r\nimport {getOffsetTopInElement} from \"./helpers/elements\";\r\nimport Area from \"./classes/Area\";\r\nimport {altrpFontsSet, GOOGLE_FONT} from \"./constants/fonts\";\r\nimport {addSettings} from \"./store/elements-settings/actions\";\r\nimport mutate from \"dot-prop-immutable\";\r\nexport function getRoutes() {\r\n\r\n  return import(/* webpackChunkName: 'Routes' */\"./classes/Routes.js\");\r\n}\r\n\r\nexport function isSSR(){\r\n  try {\r\n    return window.SSR;\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n}\r\n/**\r\n * @return {IconsManager}\r\n * */\r\nexport function iconsManager() {\r\n  return window.iconsManager;\r\n}\r\n\r\n/**\r\n * Устанавливает заголовок страницы на фронтенде\r\n * @param {string} title\r\n */\r\nexport function setTitle(title) {\r\n  let titleElement = document.title;\r\n  if (!defaultTitle) {\r\n    defaultTitle = titleElement.innerHTML;\r\n  }\r\n  if (!title) {\r\n    title = defaultTitle;\r\n  }\r\n  if (document.title !== title) {\r\n    document.title = title;\r\n  }\r\n}\r\n\r\n/**\r\n * @return {boolean}\r\n * */\r\nexport function isEditor() {\r\n  const path = window.location?.pathname;\r\n  return path?.includes(\"/admin/editor\") || false;\r\n}\r\n\r\n/**\r\n * Переменная, в которой храниться изначальный заголовок\r\n * @let {string}\r\n */\r\nlet defaultTitle;\r\n\r\n/**\r\n * Парсит стрку вводимую пользователем для опций селекта\r\n * @param string\r\n */\r\nexport function parseOptionsFromSettings(string) {\r\n  if (!string) {\r\n    return [];\r\n  }\r\n  let options = string.split(\"\\n\");\r\n  let path = extractPathFromString(string);\r\n  let _optionsFromData = getDataByPath(path);\r\n  if (_.isArray(_optionsFromData)) {\r\n    return _optionsFromData;\r\n  }\r\n  options = options.map(option => {\r\n    let value = option.split(\"|\")[0];\r\n    value = value.trim();\r\n    let valuePath = extractPathFromString(value);\r\n    if (valuePath) {\r\n      value = getDataByPath(valuePath);\r\n    }\r\n    let label = option.split(\"|\")[1] || value || \"\";\r\n    !_.isString(label) && (label = \"\");\r\n    label = label.trim();\r\n    let labelPath = extractPathFromString(label);\r\n    if (labelPath) {\r\n      label = getDataByPath(labelPath);\r\n    }\r\n    return {\r\n      value,\r\n      label\r\n    };\r\n  });\r\n  return options;\r\n}\r\n\r\n/**\r\n * Получает медиа запрос для css по имени настройки\r\n * @param {string} screenSettingName\r\n * @return {string}\r\n */\r\nexport function getMediaQueryByName(screenSettingName) {\r\n  let mediaQuery = \"\";\r\n  CONSTANTS.SCREENS.forEach(screen => {\r\n    if (screen.name === screenSettingName) {\r\n      mediaQuery = screen.mediaQuery;\r\n    }\r\n  });\r\n  return mediaQuery;\r\n}\r\n/**\r\n * Получает медиа запрос для css по имени настройки\r\n * @param {string} screenSettingName\r\n * @return {string}\r\n */\r\nexport function getMediaSettingsByName(screenSettingName) {\r\n  let screen = CONSTANTS.SCREENS[0];\r\n  CONSTANTS.SCREENS.forEach(_screen => {\r\n    if (_screen.name === screenSettingName) {\r\n      screen = _screen;\r\n    }\r\n  });\r\n  return screen;\r\n}\r\n\r\n/**\r\n * Возвращает брейкпоинт относительно текущего размера экрана\r\n */\r\nexport function getCurrentBreakpoint() {\r\n  const currentWidth = getWindowWidth();\r\n  const breakPoints = CONSTANTS.SCREENS;\r\n  const breakPointsSizes = breakPoints.map(item => ({\r\n    name: item.name,\r\n    size: Number(item.width.split(\"px\")[0])\r\n  }));\r\n  for (let breakpoint of breakPointsSizes) {\r\n    if (breakpoint.size < currentWidth) {\r\n      return breakpoint.name;\r\n    }\r\n  }\r\n}\r\n/**\r\n *@param {string} URLTemplate\r\n *@param {{} | null} object\r\n */\r\nexport function parseURLTemplate(URLTemplate = \"\", object = null) {\r\n  let url = URLTemplate;\r\n  let protocol = \"\";\r\n  if (!isEditor()) {\r\n    object = _.assign(\r\n      _.cloneDeep(currentRouterMatch.getProperty(\"params\")),\r\n      object\r\n    );\r\n  }\r\n  url = url.trim();\r\n  if (url.indexOf(\"{{\") !== -1) {\r\n    url = replaceContentWithData(url, object);\r\n  }\r\n  if (url.indexOf(\"https://\") === 0) {\r\n    protocol = \"https://\";\r\n    url = url.replace(\"https://\", \"\");\r\n  }\r\n  if (url.indexOf(\"http://\") === 0) {\r\n    protocol = \"http://\";\r\n    url = url.replace(\"http://\", \"\");\r\n  }\r\n  if (url.indexOf(\"mailto:\") === 0) {\r\n    protocol = \"mailto:\";\r\n    url = url.replace(\"mailto:\", \"\");\r\n  }\r\n  if (url.indexOf(\"tel:\") === 0) {\r\n    protocol = \"tel:\";\r\n    url = url.replace(\"tel:\", \"\");\r\n  }\r\n  // columnEditUrl = columnEditUrl.replace(':id', row.original.id);\r\n  let idTemplates = url.match(/:([\\s\\S]+?)(\\/|$)/g);\r\n  if (!idTemplates) {\r\n    return protocol + url;\r\n  }\r\n  idTemplates.forEach(idTemplate => {\r\n    let replace = object[idTemplate.replace(/:|\\//g, \"\")] || \"\";\r\n    idTemplate = idTemplate.replace(\"/\", \"\");\r\n    url = url.replace(new RegExp(idTemplate, \"g\"), replace);\r\n  });\r\n  return protocol + url;\r\n}\r\n\r\nexport function getWindowWidth() {\r\n  let window;\r\n  if (isEditor()) {\r\n    window = document.getElementById(\"editorWindow\").offsetWidth;\r\n  } else {\r\n    window = document.getElementById(\"front-app\").offsetWidth;\r\n  }\r\n  return window;\r\n}\r\n\r\nexport function renderAssetIcon(asset, props = null) {\r\n  if (asset) {\r\n    if (asset.url && asset.type === \"svg\") {\r\n      return <AltrpSVG {...props} url={asset.url} />;\r\n    }\r\n    switch (asset.assetType) {\r\n      case \"icon\": {\r\n        return iconsManager().renderIcon(asset.name);\r\n      }\r\n      case \"image\": {\r\n        return React.createElement(\"img\", { ...props, src: asset.url });\r\n      }\r\n      case \"media\": {\r\n        return React.createElement(\"img\", { ...props, src: asset.url });\r\n      }\r\n    }\r\n  }\r\n  return \"\";\r\n}\r\n\r\n/**\r\n * @param {object} asset\r\n * @param {object} props\r\n * @return {React.DetailedReactHTMLElement<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement> | React.DetailedReactHTMLElement<React.HTMLAttributes<T>, HTMLElement> | React.ReactSVGElement | React.DOMElement<React.DOMAttributes<T>, Element> | React.FunctionComponentElement<{}> | React.CElement<{}, React.ClassicComponent<{}, React.ComponentState>> | React.CElement<{}, React.Component<P, React.ComponentState>> | React.ReactElement<{}> | string}\r\n * @throws Исключение если иконка не найдена\r\n * */\r\nexport function renderAsset(asset, props = null) {\r\n  if(_.isEmpty(asset)){\r\n    return  ''\r\n  }\r\n  if(asset.type === 'image' && asset.dataUrl){\r\n    return React.createElement(\"img\", {\r\n      ...props,\r\n      src: asset.dataUrl,\r\n    });\r\n  }\r\n  if (asset.url && asset.type === \"svg\") {\r\n    return <AltrpSVG {...props} url={asset.url} rawSVG={asset.rawSVG} />;\r\n  }\r\n  if (! isSSR() && asset instanceof File) {\r\n    let refImg = React.createRef();\r\n    let fr = new FileReader();\r\n    fr.readAsDataURL(asset);\r\n    fr.onload = () => {\r\n      if (refImg.current) {\r\n        refImg.current.src = fr.result;\r\n        refImg.current.alt = asset.name;\r\n      }\r\n    };\r\n    return React.createElement(\"img\", {\r\n      ...props,\r\n      src: asset.url,\r\n      ref: refImg\r\n    });\r\n  }\r\n  switch (asset.assetType) {\r\n    case \"icon\": {\r\n      return iconsManager().renderIcon(asset.name, props);\r\n    }\r\n    case \"image\": {\r\n      return React.createElement(\"img\", { ...props, src: asset.url });\r\n    }\r\n    case \"media\": {\r\n      return React.createElement(\"img\", { ...props, src: asset.url });\r\n    }\r\n    case \"mediaBackground\": {\r\n      return React.createElement(\"div\", {\r\n        ...props,\r\n        style: { backgroundImage: `url(${asset.url})` }\r\n      });\r\n    }\r\n    case undefined: {\r\n      return React.createElement(\"img\", {\r\n        ...props,\r\n        src: \"/img/nullImage.png\"\r\n      });\r\n    }\r\n  }\r\n  return \"\";\r\n}\r\n\r\n/**\r\n * Парсим данный из строки в объект, если значение - путь, то берем значение из context\r\n * (если в context нет свойства, то не записываем)\r\n * @param {string} string\r\n * @param {AltrpModel} context\r\n * @param {boolean} allowObject\r\n * @param {boolean} replaceRight - нужно ли подставлять в значение параметра данные или оставить сырой шаблон\r\n * @param {boolean} replace - нужно ли подставлять в значение параметра данные или оставить сырой шаблон\r\n * @return {{}}\r\n */\r\nexport function parseParamsFromString(\r\n  string,\r\n  context = {},\r\n  allowObject = false,\r\n  replaceRight = true,\r\n  replace = true,\r\n) {\r\n  if (!(context instanceof AltrpModel)) {\r\n    context = new AltrpModel(context);\r\n  }\r\n  const params = {};\r\n  const urlParams =\r\n    window.currentRouterMatch instanceof AltrpModel\r\n      ? window.currentRouterMatch.getProperty(\"params\")\r\n      : {};\r\n\r\n  if (!string) {\r\n    return params;\r\n  }\r\n  const lines = string.split(\"\\n\");\r\n  lines.forEach(line => {\r\n    let [left, right] = line.split(\"|\");\r\n    if (!left || !right) {\r\n      return;\r\n    }\r\n    left = left.trim();\r\n    right = right.trim();\r\n    if (replace && left.indexOf(\"{{\") !== -1) {\r\n      left = replaceContentWithData(left);\r\n    }\r\n    if (replace && right.match(/{{([\\s\\S]+?)(?=}})/g)) {\r\n      if (\r\n        context.getProperty(\r\n          right.match(/{{([\\s\\S]+?)(?=}})/g)[0].replace(\"{{\", \"\")\r\n        ) ||\r\n        getDataByPath(right.match(/{{([\\s\\S]+?)(?=}})/g)[0].replace(\"{{\", \"\"))\r\n      ) {\r\n        //todo ошибка в IOS\r\n        params[left] =\r\n          context.getProperty(\r\n            right.match(/{{([\\s\\S]+?)(?=}})/g)[0].replace(\"{{\", \"\")\r\n          ) ||\r\n          getDataByPath(\r\n            right.match(/{{([\\s\\S]+?)(?=}})/g)[0].replace(\"{{\", \"\")\r\n          ) ||\r\n          \"\";\r\n      } else {\r\n        replaceRight\r\n          ? (params[left] = urlParams[\r\n              right.match(/{{([\\s\\S]+?)(?=}})/g)[0].replace(\"{{\", \"\")\r\n            ]\r\n              ? urlParams[\r\n                  right.match(/{{([\\s\\S]+?)(?=}})/g)[0].replace(\"{{\", \"\")\r\n                ]\r\n              : \"\")\r\n          : (params[left] = right);\r\n      }\r\n    } else {\r\n      params[left] = right;\r\n    }\r\n    if (!allowObject && _.isObject(params[left])) {\r\n      delete params[left];\r\n    }\r\n  });\r\n  return params;\r\n}\r\n\r\n/**\r\n * Функция для проверки условий\r\n * @param {array} conditions\r\n * @param {boolean} AND - логичекое И или ИЛИ\r\n * @param {AltrpModel} model\r\n * @param {boolean} dataByPath - брать ли данные из getDataByPath\r\n * @return {boolean}\r\n */\r\nexport function conditionsChecker(\r\n  conditions = [],\r\n  AND = true,\r\n  model,\r\n  dataByPath = true\r\n) {\r\n  if (!conditions.length) {\r\n    return true;\r\n  }\r\n  let result = AND;\r\n  _.each(conditions, c => {\r\n    if (AND) {\r\n      result *= conditionChecker(c, model, dataByPath);\r\n    } else {\r\n      result += conditionChecker(c, model, dataByPath);\r\n    }\r\n  });\r\n  return !!result;\r\n}\r\n\r\n/**\r\n * Функция для проверки одного условия\r\n * @param c\r\n * @param {AltrpModel} model\r\n * @param {boolean} dataByPath - брать ли данный из getDataByPath\r\n * @return {boolean}\r\n */\r\nfunction conditionChecker(c, model, dataByPath = true) {\r\n  let result = 0;\r\n  const { operator } = c;\r\n  let { modelField: left, value } = c;\r\n  if (dataByPath) {\r\n    value = getDataByPath(value, \"\", model, true);\r\n    left = getDataByPath(left, \"\", model);\r\n    return altrpCompare(left, value, operator);\r\n  }\r\n  return altrpCompare(model.getProperty(left), value, operator);\r\n  switch (operator) {\r\n    case \"empty\": {\r\n      return !model.getProperty(modelField, \"\");\r\n    }\r\n    case \"not_empty\": {\r\n      return !!model.getProperty(modelField, \"\");\r\n    }\r\n    case \"==\": {\r\n      return _.isEqual(model.getProperty(modelField, \"\"), value);\r\n    }\r\n    case \"<>\": {\r\n      return !_.isEqual(model.getProperty(modelField, \"\"), value);\r\n    }\r\n    case \">\": {\r\n      return Number(model.getProperty(modelField, \"\")) > Number(value);\r\n    }\r\n    case \">=\": {\r\n      return Number(model.getProperty(modelField, \"\")) >= Number(value);\r\n    }\r\n    case \"<\": {\r\n      return Number(model.getProperty(modelField, \"\")) < Number(value);\r\n    }\r\n    case \"<=\": {\r\n      return Number(model.getProperty(modelField, \"\")) <= Number(value);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Установить данные\r\n * @param {string} path\r\n * @param {*} value\r\n * @param {function | null} dispatch\r\n * @return {boolean}\r\n */\r\nexport function setDataByPath(path = \"\", value, dispatch = null) {\r\n  if (!path) {\r\n    return false;\r\n  }\r\n  if (path.indexOf(\",\") !== -1) {\r\n    let result = path\r\n      .split(\",\")\r\n      .map(path => setDataByPath(path, value, dispatch));\r\n    return true;\r\n  }\r\n  path = path.replace(\"{{\", \"\").replace(\"}}\", \"\");\r\n  path = path.trim();\r\n  switch (value) {\r\n    case \"true\":\r\n      value = true;\r\n      break;\r\n    case \"false\":\r\n      value = false;\r\n      break;\r\n    case \"null\":\r\n      value = null;\r\n      break;\r\n    case \"undefined\":\r\n      value = undefined;\r\n      break;\r\n  }\r\n\r\n  if (path.indexOf(\"altrppagestate.\") === 0) {\r\n    path = path.replace(\"altrppagestate.\", \"\");\r\n    if (!path) {\r\n      return false;\r\n    }\r\n    const oldValue = appStore.getState().altrpPageState.getProperty(path);\r\n    if (_.isEqual(oldValue, value)) {\r\n      return true;\r\n    }\r\n    if (_.isFunction(dispatch)) {\r\n      dispatch(changePageState(path, value));\r\n    } else {\r\n      appStore.dispatch(changePageState(path, value));\r\n    }\r\n    return true;\r\n  }\r\n  if (path.indexOf(\"altrpmeta.\") === 0) {\r\n    path = path.replace(\"altrpmeta.\", \"\");\r\n    if (!path) {\r\n      return false;\r\n    }\r\n    const oldValue = appStore.getState().altrpMeta.getProperty(path);\r\n    if (_.isEqual(oldValue, value)) {\r\n      return true;\r\n    }\r\n    if (_.isFunction(dispatch)) {\r\n      dispatch(changeAltrpMeta(path, value));\r\n    } else {\r\n      appStore.dispatch(changeAltrpMeta(path, value));\r\n    }\r\n    return true;\r\n  }\r\n  if (path.indexOf(\"altrpuser.local_storage.\") === 0) {\r\n    path = path.replace(\"altrpuser.\", \"\");\r\n    if (!path) {\r\n      return false;\r\n    }\r\n    const oldValue = appStore.getState().currentUser.getProperty(path);\r\n    if (_.isEqual(oldValue, value)) {\r\n      return true;\r\n    }\r\n    if (_.isFunction(dispatch)) {\r\n      dispatch(changeCurrentUserProperty(path, value));\r\n    } else {\r\n      appStore.dispatch(changeCurrentUserProperty(path, value));\r\n    }\r\n    return true;\r\n  }\r\n  if (path.indexOf(\"altrpforms.\") === 0) {\r\n    path = path.replace(\"altrpforms.\", \"\");\r\n    if (!path) {\r\n      return false;\r\n    }\r\n    const [formId, fieldName] = path.split(\".\");\r\n    const { formsStore } = appStore.getState();\r\n\r\n    const oldValue = _.get(formsStore, path);\r\n    if (_.isEqual(oldValue, value)) {\r\n      return true;\r\n    }\r\n    if (_.isFunction(dispatch)) {\r\n      dispatch(changeFormFieldValue(path, value));\r\n    } else {\r\n      appStore.dispatch(changeFormFieldValue(fieldName, value, formId, true));\r\n    }\r\n  } else\r\n  if (path.indexOf(\"altrpelements.\") === 0) {\r\n    const pathElements = path.split(\".\");\r\n    let [prefix, elementId, updateType, ...propName] = pathElements;\r\n    const component = getComponentByElementId(elementId);\r\n    if (!component) {\r\n      return true;\r\n    }\r\n    propName =  propName.join('.');\r\n    switch (updateType) {\r\n      case \"settings\": {\r\n        component.props.element.updateSetting(value, propName);\r\n        if(window['h-altrp']){\r\n          let settings = component.props.element.settings;\r\n          settings = mutate.set(settings, propName, value)\r\n          appStore.dispatch(addSettings(component.props.element.getId(), component.props.element.getName(), settings));\r\n        }\r\n        return true;\r\n      }\r\n      default: {\r\n        return true;\r\n      }\r\n    }\r\n  } else\r\n  if (path.indexOf(\"altrpareas.\") === 0) {\r\n    const pathElements = path.split(\".\");\r\n    const [prefix,  areaName,  updateType, propName] = pathElements;\r\n    let area = window.page_areas.find(area => area.id === areaName);\r\n    if(area && updateType === 'settings'){\r\n      if(! (area instanceof Area)){\r\n        area = Area.areaFactory(area);\r\n      }\r\n      area.setSetting(propName, value);\r\n    }\r\n  } else\r\n  if (path.indexOf(\"altrpstorage.\") === 0) {\r\n    path = path.replace(\"altrpstorage.\", \"\");\r\n    const currentStorage = getDataFromLocalStorage(\"altrpstorage\", {});\r\n    _.set(currentStorage, path, value);\r\n    saveDataToLocalStorage(\"altrpstorage\", currentStorage);\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * Получить данные из окружения\r\n * @param {string} path\r\n * @param {*} _default\r\n * @param {{} | AltrpModel | null} context\r\n * @param {boolean} altrpCheck - проверять ли altrp\r\n * @return {*}\r\n */\r\nexport function getDataByPath(\r\n  path = \"\",\r\n  _default = null,\r\n  context = null,\r\n  altrpCheck = false\r\n) {\r\n  if (!path) {\r\n    return _default;\r\n  }\r\n  if (path.indexOf(\"{{\") !== -1) {\r\n    path = replaceContentWithData(path, context);\r\n  }\r\n  /**\r\n   * проверим путь\r\n   */\r\n  if (altrpCheck && path.trim().indexOf(\"altrp\") !== 0) {\r\n    return path;\r\n  }\r\n  path = path.trim();\r\n  let trueValue, falseValue;\r\n  if (path.indexOf(\"?\") !== -1 && path.indexOf(\":\") !== -1) {\r\n    let [_path, _right] = path.split(\"?\");\r\n    [trueValue, falseValue] = _right.split(\":\");\r\n    trueValue = trueValue.trim();\r\n    if (trueValue.indexOf(\".\") !== -1) {\r\n      trueValue = getDataByPath(trueValue, _default, context);\r\n    }\r\n\r\n    falseValue = falseValue.trim();\r\n    if (falseValue.indexOf(\".\") !== -1) {\r\n      falseValue = getDataByPath(falseValue, _default, context);\r\n    }\r\n    path = _path.trim();\r\n  }\r\n  /**\r\n   * @type {AltrpModel} currentModel\r\n   */\r\n  let {\r\n    currentModel,\r\n    currentDataStorage,\r\n    altrpresponses,\r\n    formsStore,\r\n    altrpPageState,\r\n    altrpPage,\r\n    currentUser,\r\n    altrpMeta\r\n  } = appStore.getState();\r\n  if (context) {\r\n    currentModel =\r\n      context instanceof AltrpModel ? context : new AltrpModel(context);\r\n  }\r\n  let urlParams =\r\n    window.currentRouterMatch instanceof AltrpModel\r\n      ? window.currentRouterMatch.getProperty(\"params\")\r\n      : {};\r\n\r\n  let queryData = queryString.parseUrl(window.location.href).query;\r\n\r\n  urlParams = _.assign(queryData, urlParams);\r\n\r\n  let value = _default;\r\n  if (!_.isString(path)) {\r\n    return value;\r\n  }\r\n  if (path.indexOf(\"altrpdata.\") === 0) {\r\n    path = path.replace(\"altrpdata.\", \"\");\r\n    value = currentDataStorage\r\n      ? currentDataStorage.getProperty(path, _default)\r\n      : \"\";\r\n  } else if (path.indexOf(\"altrpresponses.\") === 0) {\r\n    path = path.replace(\"altrpresponses.\", \"\");\r\n    value = altrpresponses ? altrpresponses.getProperty(path, _default) : \"\";\r\n  } else if (path.indexOf(\"altrpmeta.\") === 0) {\r\n    path = path.replace(\"altrpmeta.\", \"\");\r\n    value = altrpMeta ? altrpMeta.getProperty(path, _default) : \"\";\r\n  } else if (path.indexOf(\"altrppagestate.\") === 0) {\r\n    path = path.replace(\"altrppagestate.\", \"\");\r\n    value = altrpPageState ? altrpPageState.getProperty(path, _default) : \"\";\r\n  } else if (path.indexOf(\"altrpuser.\") === 0) {\r\n    path = path.replace(\"altrpuser.\", \"\");\r\n    value = currentUser ? currentUser.getProperty(path, _default) : \"\";\r\n  } else if (path === \"altrpuser\") {\r\n    value = currentUser.getData();\r\n  } else if (path === \"altrpmodel\") {\r\n    value = currentModel.getData();\r\n  } else if (path.indexOf(\"altrptime.\") === 0) {\r\n    value = getTimeValue(path.replace(\"altrptime.\", \"\"));\r\n  } else if (path.indexOf(\"altrpforms.\") === 0) {\r\n    value = _.get(formsStore, path.replace(\"altrpforms.\", \"\"), _default);\r\n  } else if (path.indexOf(\"altrppage.\") === 0) {\r\n    value = altrpPage\r\n      ? altrpPage.getProperty(path.replace(\"altrppage.\", \"\"), _default)\r\n      : \"\";\r\n  } else if (path.indexOf(\"altrpelements.\") === 0) {\r\n    const pathElements = path.split(\".\");\r\n    const [prefix, elementId, updateType, propName] = pathElements;\r\n    const component = getComponentByElementId(elementId);\r\n    if (!component) {\r\n      value = \"\";\r\n    } else {\r\n      switch (updateType) {\r\n        case \"settings\":\r\n          {\r\n            value = component.props.element.getSettings(propName);\r\n          }\r\n          break;\r\n        default: {\r\n          value = \"\";\r\n        }\r\n      }\r\n    }\r\n  } else if (path.indexOf(\"altrpstorage.\") === 0) {\r\n    path = path.replace(\"altrpstorage.\", \"\");\r\n    value = getDataFromLocalStorage(\"altrpstorage\", {});\r\n    value = _.get(value, path, _default);\r\n  } else if (path.indexOf(\"altrpareas.\") === 0) {\r\n    const pathElements = path.split(\".\");\r\n    const [prefix,  areaName,  updateType, propName] = pathElements;\r\n    let area = window.page_areas.find(area => area.id === areaName);\r\n    if(area && updateType === 'settings'){\r\n      if(! (area instanceof Area)){\r\n        area = Area.areaFactory(area);\r\n      }\r\n      value = area.getSetting(propName, _default);\r\n    }\r\n  } else {\r\n    value = currentModel.getProperty(path)\r\n      ? currentModel.getProperty(path)\r\n      : urlParams[path];\r\n    if (!value) {\r\n      value = _default;\r\n    }\r\n  }\r\n  if (trueValue || falseValue) {\r\n    value = value ? trueValue : falseValue;\r\n  }\r\n  return value;\r\n}\r\n\r\n/**\r\n * Извелкает путь из строки\r\n * @param {string} string\r\n * @return {string}\r\n */\r\nexport function extractPathFromString(string = \"\") {\r\n  let path = \"\";\r\n  if (_.isString(string)) {\r\n    // path = string.match(/(?<={{)([\\s\\S]+?)(?=}})/g)[0]\r\n    path = _.get(string.match(/{{([\\s\\S]+?)(?=}})/g), \"0\", \"\").replace(\r\n      \"{{\",\r\n      \"\"\r\n    );\r\n  }\r\n  return path;\r\n}\r\n/**\r\n * Возвращает новый объект из свояств объекта, в именах которых присутствует префикс prefix\r\n * @param {string} prefix - строка для поиска (например 'test')\r\n * @param {{}} object - если в объекте есть свойство test__test то вернет {test: test__test_value}\r\n * @return {{}}\r\n */\r\nexport function getObjectByPrefix(prefix = \"\", object = {}) {\r\n  let result = {};\r\n  if (!prefix) {\r\n    return result;\r\n  }\r\n  _.forEach(object, (value, key) => {\r\n    if (key.indexOf(`${prefix}__`, \"\") === 0) {\r\n      result[key.replace(`${prefix}__`, \"\")] = value;\r\n    }\r\n  });\r\n  return result;\r\n}\r\n\r\n/**\r\n * Возвращает объект из json-строки если возможно\r\n * @param {string} string\r\n * @param {*} _default\r\n * @return {*}\r\n */\r\nexport function mbParseJSON(string, _default = null) {\r\n  try {\r\n    return JSON.parse(string);\r\n  } catch (e) {\r\n    return _default === null ? string : _default;\r\n  }\r\n}\r\n\r\n/**\r\n * Функция для сравнения значений\r\n * @param leftValue\r\n * @param rightValue\r\n * @param operator\r\n * @return {boolean}\r\n */\r\nexport function altrpCompare(\r\n  leftValue = \"\",\r\n  rightValue = \"\",\r\n  operator = \"empty\"\r\n) {\r\n  switch (operator) {\r\n    case \"empty\": {\r\n      return _.isEmpty(leftValue);\r\n    }\r\n    case \"not_empty\": {\r\n      return !_.isEmpty(leftValue);\r\n    }\r\n    case \"null\": {\r\n      return !leftValue;\r\n    }\r\n    case \"not_null\": {\r\n      return !!leftValue;\r\n    }\r\n    case \"==\": {\r\n      if (!leftValue && !rightValue) {\r\n        return true;\r\n      }\r\n      if (!(_.isObject(leftValue) || _.isObject(rightValue))) {\r\n        return leftValue == rightValue;\r\n      } else {\r\n        return _.isEqual(leftValue, rightValue);\r\n      }\r\n    }\r\n    case \"===\": {\r\n      return _.isEqual(leftValue, rightValue);\r\n    }\r\n    case \"<>\": {\r\n      return !_.isEqual(leftValue, rightValue);\r\n    }\r\n    case \">\": {\r\n      return Number(leftValue) > Number(rightValue);\r\n    }\r\n    case \">=\": {\r\n      return Number(leftValue) >= Number(rightValue);\r\n    }\r\n    case \"<\": {\r\n      return Number(leftValue) < Number(rightValue);\r\n    }\r\n    case \"<=\": {\r\n      return Number(leftValue) <= Number(rightValue);\r\n    }\r\n    case \"in\": {\r\n      if (_.isString(rightValue)) {\r\n        return rightValue.indexOf(leftValue) !== -1;\r\n      }\r\n      if (!_.isArray(rightValue)) {\r\n        return false;\r\n      }\r\n      let result = false;\r\n      rightValue.forEach(item => {\r\n        if (!result) {\r\n          result = altrpCompare(leftValue, item, \"==\");\r\n        }\r\n      });\r\n      return result;\r\n    }\r\n    case \"not_in\": {\r\n      return !altrpCompare(leftValue, rightValue, \"in\");\r\n    }\r\n    case \"contain\": {\r\n      if (_.isString(leftValue)) {\r\n        return leftValue.indexOf(rightValue) !== -1;\r\n      }\r\n      if (!_.isArray(leftValue)) {\r\n        return false;\r\n      }\r\n      let result = false;\r\n      leftValue.forEach(item => {\r\n        if (!result) {\r\n          result = altrpCompare(rightValue, item, \"contain\");\r\n        }\r\n      });\r\n      return result;\r\n    }\r\n    case \"not_contain\": {\r\n      return !altrpCompare(leftValue, rightValue, \"contain\");\r\n    }\r\n  }\r\n}\r\n\r\nexport const CONDITIONS_OPTIONS = [\r\n  {\r\n    value: \"empty\",\r\n    label: \"Empty\"\r\n  },\r\n  {\r\n    value: \"not_empty\",\r\n    label: \"Not Empty\"\r\n  },\r\n  {\r\n    value: \"null\",\r\n    label: \"Null\"\r\n  },\r\n  {\r\n    value: \"not_null\",\r\n    label: \"Not Null\"\r\n  },\r\n  {\r\n    value: \"==\",\r\n    label: \"Equals\"\r\n  },\r\n  {\r\n    value: \"<>\",\r\n    label: \"Not Equals\"\r\n  },\r\n  {\r\n    value: \"between\",\r\n    label: \"Between\"\r\n  },\r\n  {\r\n    value: \">\",\r\n    label: \">\"\r\n  },\r\n  {\r\n    value: \">=\",\r\n    label: \">=\"\r\n  },\r\n  {\r\n    value: \"<\",\r\n    label: \"<\"\r\n  },\r\n  {\r\n    value: \"<=\",\r\n    label: \"<=\"\r\n  },\r\n  {\r\n    value: \"in\",\r\n    label: \"In\"\r\n  },\r\n  {\r\n    value: \"not_in\",\r\n    label: \"Not In\"\r\n  },\r\n  {\r\n    value: \"contain\",\r\n    label: \"Contain\"\r\n  },\r\n  {\r\n    value: \"not_contain\",\r\n    label: \"Not Contain\"\r\n  }\r\n];\r\n\r\nexport function isElementTopInViewport(top, scrollTop, clientHeight) {\r\n  return top > scrollTop && top < scrollTop + clientHeight;\r\n}\r\n\r\nexport function getTopPosition(element) {\r\n  let top = element.offsetTop;\r\n\r\n  while (element.offsetParent) {\r\n    element = element.offsetParent;\r\n    top += element.offsetTop;\r\n  }\r\n\r\n  return top;\r\n}\r\n\r\n/**\r\n * Получить какое-то время по шаблону `YYYY-MM-DD`\r\n * @param {string} path\r\n * @param {string | null} defaultValue\r\n */\r\nexport function getTimeValue(path, defaultValue = null) {\r\n  let value = defaultValue;\r\n\r\n  switch (path) {\r\n    case \"now\":\r\n      {\r\n        value = _.now();\r\n      }\r\n      break;\r\n    case \"month_start\":\r\n      {\r\n        value = startOfMonth(new Date());\r\n      }\r\n      break;\r\n    case \"prev_month_start\":\r\n      {\r\n        value = startOfMonth(new Date(), -1);\r\n      }\r\n      break;\r\n    case \"year_start\":\r\n      {\r\n        value = startOfYear(new Date());\r\n      }\r\n      break;\r\n    case \"prev_year_start\":\r\n      {\r\n        value = startOfYear(new Date(), -1);\r\n      }\r\n      break;\r\n    case \"prev_week_start\":\r\n      {\r\n        value = getPrevWeekStart();\r\n      }\r\n      break;\r\n    case \"next_week_start\":\r\n      {\r\n        value = getNextWeekStart();\r\n      }\r\n      break;\r\n    case \"week_start\":\r\n      {\r\n        value = getWeekStart();\r\n      }\r\n      break;\r\n  }\r\n  const {moment} = window.altrpHelpers;\r\n  value = moment(value).format(\"YYYY-MM-DD\");\r\n  return value;\r\n}\r\n\r\n/**\r\n * Получить начало месяца\r\n * @param {Date} date\r\n * @param {int} monthShift\r\n * @return {Date}\r\n */\r\nexport function startOfMonth(date, monthShift = 0) {\r\n  return new Date(date.getFullYear(), date.getMonth() + monthShift, 1);\r\n}\r\n/**\r\n * Получить начало месяца\r\n * @param {Date} date\r\n * @param {int} yearShift\r\n * @return {Date}\r\n */\r\nexport function startOfYear(date, yearShift = 0) {\r\n  return new Date(date.getFullYear() + yearShift, 0, 1);\r\n}\r\n/**\r\n * Получить начало месяца\r\n * @param {Date} date\r\n * @param {int} weekShift\r\n * @return {Date}\r\n */\r\nexport function startOfWeek(date, weekShift = 0) {\r\n  const {moment} = window.altrpHelpers;\r\n  return moment(\r\n    new Date(\r\n      date.getFullYear(),\r\n      date.getMonth(),\r\n      date.getDate() + weekShift * 7\r\n    )\r\n  ).firstDayOfWeek();\r\n}\r\n\r\n/**\r\n * Получить ссылку на состояние хранилища\r\n * @return {*}\r\n */\r\nexport function getCurrentStoreState() {\r\n  return appStore.getState();\r\n}\r\n\r\n/**\r\n * Скроллит к элементу\r\n * @param {{} | HTMLElement}scrollbars\r\n * @param {{}}element\r\n */\r\nexport function scrollToElement(scrollbars, element) {\r\n  let { container } = scrollbars;\r\n  if(scrollbars instanceof HTMLElement){\r\n    container = scrollbars;\r\n    let scroll = getOffsetTopInElement(element, scrollbars);\r\n    if(scroll){\r\n      scrollbars.scrollTop =scroll;\r\n    }\r\n\r\n  }\r\n  /**\r\n   * @member {HTMLElement} container\r\n   */\r\n  if (!container) {\r\n    return;\r\n  }\r\n  if (!_.isFunction(scrollbars.scrollTop)) {\r\n    return;\r\n  }\r\n\r\n  let parent = element.offsetParent;\r\n  let top = element.offsetTop;\r\n\r\n  while (parent !== container) {\r\n    if (! parent) {\r\n      /**\r\n       * ушли в самый корень ДОМ и контейнер не встретился\r\n       */\r\n      return;\r\n    }\r\n    top += parent.offsetTop;\r\n    parent = parent.offsetParent;\r\n  }\r\n  /**\r\n   * не получили каеое-либо значение\r\n   */\r\n  if (! top) {\r\n    return;\r\n  }\r\n  scrollbars.scrollTop(top);\r\n}\r\n\r\n/**\r\n * Вернет HTML элемент React компонента, у которого id = elementId\r\n * @param {string} elementId\r\n * @return {null | HTMLElement}\r\n */\r\nexport function getHTMLElementById(elementId = \"\") {\r\n  let HTMLElement = null;\r\n  if (!elementId || !elementId.trim()) {\r\n    return HTMLElement;\r\n  }\r\n  elementId = elementId.trim();\r\n  appStore.getState().elements.forEach(el => {\r\n    if (!el.elementWrapperRef.current) {\r\n      return;\r\n    }\r\n    if (!el.elementWrapperRef.current.id) {\r\n      return;\r\n    }\r\n    if (\r\n      el.elementWrapperRef.current.id\r\n        .toString()\r\n        .split(\" \")\r\n        .indexOf(elementId) !== -1\r\n    ) {\r\n      HTMLElement = el.elementWrapperRef.current;\r\n    }\r\n  });\r\n  return HTMLElement;\r\n}\r\n\r\n/**\r\n * Вернет HTML  React компонента, у которого props.element = element\r\n * @param {FrontElement} element\r\n * @return {null | HTMLElement}\r\n */\r\nexport function getWrapperHTMLElementByElement(element) {\r\n  if (!element) {\r\n    return null;\r\n  }\r\n  let HTMLElement = null;\r\n  appStore.getState().elements.forEach(el => {\r\n    if (element === el.props.element) {\r\n      HTMLElement = el.elementWrapperRef.current;\r\n    }\r\n  });\r\n  return HTMLElement;\r\n}\r\n/**\r\n * Вернет HTML  React компонент, у которого elementWrapperRef.current.id = elementId\r\n * @param {string} elementId\r\n * @return {null | HTMLElement}\r\n */\r\nexport function getComponentByElementId(elementId = \"\") {\r\n  let component = null;\r\n  if (!elementId || !elementId.trim()) {\r\n    return component;\r\n  }\r\n  elementId = elementId.trim();\r\n  appStore.getState().elements.forEach(el => {\r\n    if (!el.elementWrapperRef.current) {\r\n      return;\r\n    }\r\n    if (!el.elementWrapperRef.current.id) {\r\n      return;\r\n    }\r\n    if (\r\n      el.elementWrapperRef.current.id\r\n        .toString()\r\n        .split(\" \")\r\n        .indexOf(elementId) !== -1\r\n    ) {\r\n      component = el;\r\n    }\r\n  });\r\n  return component;\r\n}\r\n\r\n/**\r\n * Начало следующей недели\r\n * @return {moment.Moment}\r\n */\r\nfunction getNextWeekStart() {\r\n  const {moment} = window.altrpHelpers;\r\n  let today = moment();\r\n  let daystoMonday = 7 - (today.isoWeekday() - 1);\r\n  return today.add(daystoMonday, \"days\");\r\n}\r\n\r\n/**\r\n * Начало текущей недели\r\n * @return {moment.Moment}\r\n */\r\nfunction getWeekStart() {\r\n  const {moment} = window.altrpHelpers;\r\n  let today = moment();\r\n  let daystoMonday = today.isoWeekday() - 1;\r\n  return today.subtract(daystoMonday, \"days\");\r\n}\r\n\r\n/**\r\n * Конец Следующей недели\r\n * @return {moment.Moment}\r\n */\r\nfunction getNextWeekEnd() {\r\n  let nextMonday = getNextWeekStart();\r\n  return nextMonday.add(\"days\", 6);\r\n}\r\n\r\n/**\r\n * Начало предыдущей недели\r\n * @return {moment.Moment}\r\n */\r\nfunction getPrevWeekStart() {\r\n  const {moment} = window.altrpHelpers;\r\n  let today = moment();\r\n  let daystoLastMonday = today.isoWeekday() - 1 + 7;\r\n  return today.subtract(daystoLastMonday, \"days\");\r\n}\r\n\r\n/**\r\n * Конец предыдущей недели\r\n * @return {moment.Moment}\r\n */\r\nfunction getPrevWeekEnd() {\r\n  let lastMonday = getPrevWeekStart();\r\n  return lastMonday.add(\"days\", 6);\r\n}\r\n\r\n/**\r\n * Удаляет пустые свойства в объектах\r\n */\r\nexport function clearEmptyProps() {}\r\n\r\n/**\r\n * Заменяет в тексте конструкции типа {{altrpdata...}} на данные\r\n * @param content\r\n * @param {{} | null} modelContext\r\n */\r\n\r\nexport function replaceContentWithData(content = \"\", modelContext = null) {\r\n  if(window.SSR){\r\n    return  content;\r\n  }\r\n  let paths = _.isString(content) ? content.match(/{{([\\s\\S]+?)(?=}})/g) : null;\r\n  if (_.isArray(paths)) {\r\n    paths.forEach(path => {\r\n      path = path.replace(\"{{\", \"\");\r\n      let value = getDataByPath(path, \"\", modelContext);\r\n      if (value === 0) {\r\n        value = \"0\";\r\n      }\r\n      path = escapeRegExp(path);\r\n      content = content.replace(new RegExp(`{{${path}}}`, \"g\"), value || \"\");\r\n    });\r\n  }\r\n  return content;\r\n}\r\n\r\n/**\r\n * Вспомогательные функции для работы с данными виджетов\r\n */\r\nwindow.altrphelpers = {\r\n  /**\r\n   * Возвращает сумму полей в массиве объектов\r\n   * @param {string}fieldName\r\n   * @return {number}\r\n   */\r\n  sumFields: function sumFields(fieldName) {\r\n    let sum = 0;\r\n    if (!_.isObject(this.context)) {\r\n      return sum;\r\n    }\r\n    if (!_.isArray(this.context)) {\r\n      this.context = [this.context];\r\n    }\r\n    this.context.forEach(c => {\r\n      sum += Number(_.get(c, fieldName)) || 0;\r\n    });\r\n    return sum;\r\n  }\r\n};\r\n\r\n/**\r\n * Функция выводит определенный элемент на печать\r\n * @params {HTMLElement[]} elements\r\n * @params {null || HTMLElement} stylesTag\r\n */\r\nexport function printElements(elements, title = \"\") {\r\n  let myWindow = window.open(\"\", \"my div\", \"height=400,width=1200\");\r\n  myWindow.document.write(`<html><head><title>${title}</title></head>`);\r\n  myWindow.document.write(\"<body >\");\r\n  elements = _.isArray(elements) ? elements : [elements];\r\n  let headContent = '';\r\n  myWindow.document.write(\"</body></html>\");\r\n  let bodyContent = '';\r\n  elements.forEach(element => {\r\n    if(element instanceof HTMLHeadElement){\r\n      headContent = element.innerHTML;\r\n      return\r\n    }\r\n    bodyContent += element.outerHTML;\r\n  });\r\n  myWindow.document.close(); // necessary for IE >= 10\r\n  myWindow.document.head.innerHTML = headContent;\r\n  bodyContent = bodyContent\r\n    .replace(/<tr/g, '<div className=\"altrp-table-tr\"')\r\n    .replace(/<th/g, '<div')\r\n    .replace(/<\\/tr>/g, '</div>')\r\n    .replace(/<\\/th>/g, '</div>')\r\n  myWindow.document.body.innerHTML = bodyContent;\r\n  myWindow.focus(); // necessary for IE >= 10\r\n  delay(250).then(()=>{\r\n    myWindow.print();\r\n    myWindow.close();\r\n  })\r\n  return true;\r\n}\r\n\r\n/**\r\n * Функция конвертирует HTML в PDF\r\n * @params {HTMLElement[]} element\r\n * @params {string} filename\r\n */\r\nexport async function elementsToPdf(elements, filename = \"\") {\r\n  let html2pdf = (await import(/* webpackChunkName: 'html2pdf' */\"html2pdf.js\")).default;\r\n  elements = elements.body ? elements.body : elements;\r\n  if (!elements) {\r\n    return {\r\n      success: true\r\n    };\r\n  }\r\n  let myWindow = window.open(\"\", \"my div\", \"height=400,width=1440\");\r\n  myWindow.document.write(`<html><head><title></title></head>`);\r\n  myWindow.document.write(\"</head><body >\");\r\n  elements = _.isArray(elements) ? elements : [elements];\r\n  elements.forEach(element => {\r\n    myWindow.document.write(element.outerHTML);\r\n  });\r\n  myWindow.document.write(\"</body></html>\");\r\n  return new Promise((resolve, reject) => {\r\n    html2pdf()\r\n      .from(myWindow.document.body)\r\n      .save(filename);\r\n    myWindow.close();\r\n    resolve({ success: true });\r\n  });\r\n}\r\n\r\n/**\r\n * Забирает данные из HTML таблицы\r\n * @param {{}}HTMLElement\r\n */\r\nexport function dataFromTable(HTMLElement) {\r\n  const data = [];\r\n  const headers = [];\r\n  if (!(HTMLElement && HTMLElement.querySelectorAll)) {\r\n    return data;\r\n  }\r\n  let table = HTMLElement.querySelector(\".altrp-table\");\r\n  if (!table && HTMLElement.querySelector(\".altrp-table-tr\")) {\r\n    table = HTMLElement;\r\n  }\r\n  if (!table) {\r\n    return data;\r\n  }\r\n  const ths = table.querySelectorAll(\".altrp-table-th\");\r\n  _.each(ths, th => {\r\n    // if (th.innerText) {\r\n    headers.push(th.innerText || \"\");\r\n    // }\r\n  });\r\n  const rows = table.querySelectorAll(\".altrp-table-tbody .altrp-table-tr\");\r\n  _.each(rows, row => {\r\n    const cells = row.querySelectorAll(\".altrp-table-td\");\r\n    const part = {};\r\n    headers.forEach((header, idx) => {\r\n      if (!header) {\r\n        return;\r\n      }\r\n      part[header] = cells[idx].innerText || \"\";\r\n    });\r\n    data.push(part);\r\n  });\r\n  return data;\r\n}\r\n\r\n/**\r\n * Создать csv-файл из данных и скачать\r\n * @param {{}} data\r\n * @param {string} filename\r\n */\r\nexport async function dataToCSV(data = {}, filename) {\r\n  filename = filename || \"File\";\r\n  if (!data) {\r\n    return { success: false };\r\n  }\r\n  if (_.isObject() && !_.isArray(data)) {\r\n    data = [data];\r\n  }\r\n  if (!_.isArray(data)) {\r\n    return { success: false };\r\n  }\r\n\r\n  let headers = _.toPairs(data[0]).map(([name, value]) => name);\r\n  let csvContent =\r\n    // 'data:text/csv;charset=utf-8,'\r\n    \"\" +\r\n    headers.join(\";\") +\r\n    \"\\n\" +\r\n    data\r\n      .map(item => {\r\n        let line = \"\";\r\n        headers.forEach((h, idx) => {\r\n          let value = _.get(item, h) || \"\";\r\n          if (_.isObject(value)) {\r\n            value = JSON.stringify(value);\r\n          }\r\n\r\n          line +=\r\n            (_.isString(value) ? value.replace(/\\s/g, \" \") : value) +\r\n            (headers.length === idx + 1 ? \"\" : \";\");\r\n        });\r\n        return line;\r\n      })\r\n      .join(\"\\n\");\r\n  let blob = new Blob([csvContent], {\r\n    type: \"text/csv\",\r\n    charset: \"windows-1251\"\r\n    // charset: 'utf-8',\r\n  });\r\n  let link = document.createElement(\"a\");\r\n  link.setAttribute(\"href\", window.URL.createObjectURL(blob));\r\n  link.setAttribute(\"download\", filename + \".csv\");\r\n  document.body.appendChild(link);\r\n  link.click();\r\n  document.body.removeChild(link);\r\n  return { success: true };\r\n}\r\n\r\n/**\r\n * Генерация и загрузка XLS-файла\r\n * @param {Object data} Объект данных\r\n * @param {String} filename Имя файла\r\n */\r\nexport async function dataToXLS(data, filename = \"table\", templateName = \"\") {\r\n  const formData = new FormData();\r\n  formData.append(\"filename\", filename);\r\n  formData.append(\"data\", JSON.stringify(data));\r\n  formData.append(\"template\", templateName);\r\n\r\n  const response = await fetch(\"/api/export-excel\", {\r\n    method: \"POST\",\r\n    body: formData\r\n  });\r\n\r\n  return await response.blob();\r\n}\r\n\r\n/**\r\n * Генерация и загрузка XML-файла\r\n * @param {Object data} Объект данных\r\n * @param {String} filename Имя файла\r\n */\r\nexport async function dataToXML(data, filename = \"table\") {\r\n  const formData = new FormData();\r\n  formData.append(\"filename\", filename);\r\n  formData.append(\"data\", JSON.stringify(data));\r\n\r\n  const response = await fetch(\"/api/export-xml\", {\r\n    method: \"POST\",\r\n    body: formData\r\n  });\r\n\r\n  return await response.blob();\r\n}\r\n\r\n/**\r\n * Логиним пользователя\r\n * @param {{}} data\r\n * @param {string} formId\r\n * @return {Promise<{}>}\r\n */\r\nexport async function altrpLogin(data = {}, formId = \"login\") {\r\n  data.altrpLogin = true;\r\n  let res;\r\n  try {\r\n    res = await new Resource({ route: \"/login\" }).post(data);\r\n  } catch (error) {\r\n    let status = error.status;\r\n    if (error.res instanceof Promise) {\r\n      res = await error.res;\r\n    }\r\n    if (error instanceof Promise) {\r\n      res = await error;\r\n    }\r\n    res = mbParseJSON(res, {});\r\n    status && (res.__status = status);\r\n  }\r\n  appStore.dispatch(addResponseData(formId, res));\r\n  if (!(res.success || res._token)) {\r\n    return {\r\n      success: false\r\n    };\r\n  }\r\n  _token = res._token;\r\n\r\n  let currentUser = await new Resource({\r\n    route: \"/ajax/current-user\"\r\n  }).getAll();\r\n  currentUser = currentUser.data;\r\n  appStore.dispatch(changeCurrentUser(currentUser));\r\n  let routes = [];\r\n  try {\r\n    let routesData = await new Resource({\r\n      route: \"/ajax/routes\"\r\n    }).getAll();\r\n\r\n    for (let _data of routesData.pages) {\r\n      routes.push(Route.routeFabric(_data));\r\n    }\r\n    appStore.dispatch(changeAppRoutes(routes));\r\n  } catch (err) {\r\n    console.error(err);\r\n    return { success: false };\r\n  }\r\n  return { success: true };\r\n}\r\n\r\n/**\r\n * Выход\r\n * @return {Promise<{}>}\r\n */\r\nexport async function altrpLogout() {\r\n  let res = await new Resource({ route: \"/logout\" }).post();\r\n  if (!(res.success || res._token)) {\r\n    return {\r\n      success: false\r\n    };\r\n  }\r\n  _token = res._token;\r\n\r\n  let currentUser = await new Resource({\r\n    route: \"/ajax/current-user\"\r\n  }).getAll();\r\n  currentUser = currentUser.data;\r\n  appStore.dispatch(changeCurrentUser(currentUser));\r\n  let routes = [];\r\n  try {\r\n    let routesData = await new Resource({\r\n      route: \"/ajax/routes\"\r\n    }).getAll();\r\n\r\n    for (let _data of routesData.pages) {\r\n      routes.push(Route.routeFabric(_data));\r\n    }\r\n    appStore.dispatch(changeAppRoutes(routes));\r\n  } catch (err) {\r\n    console.error(err);\r\n    return { success: false };\r\n  }\r\n  return { success: true };\r\n}\r\n\r\nexport function cutString(string, maxLength = 80) {\r\n  if (string.length <= maxLength) return string;\r\n  return string.slice(0, maxLength) + \"...\";\r\n}\r\n\r\nexport function sortOptions(options, sortDirection) {\r\n  options.sort((a, b) =>\r\n    a.label.toLowerCase() > b.label.toLowerCase()\r\n      ? 1\r\n      : b.label.toLowerCase() > a.label.toLowerCase()\r\n      ? -1\r\n      : 0\r\n  );\r\n  return sortDirection === \"asc\" ? options : options.reverse();\r\n}\r\n/**\r\n * рекурсивно считает общую длину по пути\r\n * @param {{}} object\r\n * @param {string} path\r\n * @return {number}\r\n */\r\nexport function recurseCount(object = {}, path = \"\") {\r\n  let count = 0;\r\n  if (!path) {\r\n    return count;\r\n  }\r\n  let array = _.get(object, path, []);\r\n  if (!array.length) {\r\n    count++;\r\n    return count;\r\n  }\r\n  array.forEach(item => {\r\n    count += recurseCount(item, path);\r\n  });\r\n  return count;\r\n}\r\n\r\n/**\r\n * Вовращает AltrpModel, в котором храняться все источники данных на странице\r\n * @param {{}} model\r\n * @return {AltrpModel}\r\n */\r\nexport function getAppContext(model = null) {\r\n  const { currentModel } = appStore.getState();\r\n  if(model instanceof AltrpModel){\r\n    model = model.getData();\r\n  }\r\n  const currentModelData = model ? model : currentModel.getData();\r\n  const urlParams = _.cloneDeep(\r\n    window.currentRouterMatch instanceof AltrpModel\r\n      ? window.currentRouterMatch.getProperty(\"params\")\r\n      : {}\r\n  );\r\n  const context = new AltrpModel(_.assign(urlParams, currentModelData));\r\n  const {\r\n    altrpPageState,\r\n    altrpPage,\r\n    altrpMeta,\r\n    currentDataStorage,\r\n    currentUser,\r\n    altrpresponses,\r\n    formsStore\r\n  } = appStore.getState();\r\n\r\n  context.setProperty(\"altrpdata\", currentDataStorage);\r\n  context.setProperty(\"altrppagestate\", altrpPageState);\r\n  context.setProperty(\"altrpmeta\", altrpMeta);\r\n  context.setProperty(\"altrpuser\", currentUser);\r\n  context.setProperty(\"altrpresponses\", altrpresponses);\r\n  context.setProperty(\"altrpforms\", formsStore);\r\n  context.setProperty(\"altrppage\", altrpPage);\r\n  return context;\r\n}\r\n\r\n/**\r\n * Сохраняет состояние виджет в localStorage\r\n * Для виджетов ,которые могут сохранять состояния при смене страниц\r\n * @param {string} widgetId\r\n * @param {*} state\r\n * @return {boolean}\r\n */\r\nexport function storeWidgetState(widgetId, state = null) {\r\n  if (!widgetId) {\r\n    return false;\r\n  }\r\n  const path = `widget_state${widgetId}`;\r\n  return saveDataToLocalStorage(path, state);\r\n}\r\n/**\r\n * Забирает состояние из localStorage\r\n * Для виджетов ,которые могут сохранять состояния при смене страниц\r\n * @param {string} widgetId\r\n * @param {*} _default\r\n * @return {boolean}\r\n */\r\nexport function getWidgetState(widgetId, _default = null) {\r\n  if (!widgetId) {\r\n    return _default;\r\n  }\r\n  const path = `widget_state${widgetId}`;\r\n  return getDataFromLocalStorage(path, _default);\r\n}\r\n\r\n/**\r\n * Сохранить данные в localStorage\r\n * @param {string} name\r\n * @param {*} data\r\n * @return {boolean}\r\n */\r\nexport function saveDataToLocalStorage(name, data) {\r\n  if (!name) {\r\n    return false;\r\n  }\r\n  if (_.isObject(data)) {\r\n    data = JSON.stringify(data);\r\n  }\r\n  localStorage.setItem(name, data);\r\n  return true;\r\n}\r\n/**\r\n * Сохранить данные в localStorage\r\n * @param {string} name\r\n * @param {*} _default\r\n * @return {*}\r\n */\r\nexport function getDataFromLocalStorage(name, _default = undefined) {\r\n  if (!name) {\r\n    return _default;\r\n  }\r\n  let value = localStorage.getItem(name);\r\n  if (!value) {\r\n    return _default;\r\n  }\r\n  try {\r\n    value = JSON.parse(value);\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n  if (_.isString(value) && Number(value)) {\r\n    value = Number(value);\r\n  }\r\n  return value || _default;\r\n}\r\nexport function scrollbarWidth() {\r\n  // thanks too https://davidwalsh.name/detect-scrollbar-width\r\n  const scrollDiv = document.createElement(\"div\");\r\n  scrollDiv.setAttribute(\r\n    \"style\",\r\n    \"width: 100px; height: 100px; overflow: scroll; position:absolute; top:-9999px;\"\r\n  );\r\n  document.body.appendChild(scrollDiv);\r\n  const scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;\r\n  document.body.removeChild(scrollDiv);\r\n  return scrollbarWidth;\r\n}\r\n\r\n/**\r\n * Добавляем свойство altrpIndex для всех эементов-объектов массива\r\n * для их идентификации внутри повторяющихся карточек\r\n * @param {[]} array\r\n */\r\nexport function setAltrpIndex(array = []) {\r\n  if (!_.isArray(array)) {\r\n    return;\r\n  }\r\n  array.forEach((item, idx) => {\r\n    if (!_.isObject(item)) {\r\n      return;\r\n    }\r\n    if (item instanceof AltrpModel) {\r\n      item.setProperty(\"altrpIndex\", idx);\r\n      return;\r\n    }\r\n    item.altrpIndex = idx;\r\n  });\r\n}\r\n\r\n/**\r\n *\r\n * @param {string} font\r\n * @return {*}\r\n */\r\nexport function renderFontLink(font) {\r\n  if (altrpFontsSet[font] !== GOOGLE_FONT) {\r\n    return null;\r\n  }\r\n  font = font.replace(/ /g, \"+\");\r\n  font +=\r\n    \":100,100italic,200,200italic,300,300italic,400,400italic,500,500italic,600,600italic,700,700italic,800,800italic,900,900italic\";\r\n  let fontUrl =\r\n    \"https://fonts.googleapis.com/css?family=\" + font + \"&subset=cyrillic\";\r\n  fontUrl = encodeURI(fontUrl);\r\n  return <link rel=\"stylesheet\" key={fontUrl} href={fontUrl} />;\r\n}\r\n\r\n/**\r\n * Включен ли режим тестирования\r\n */\r\nexport function isAltrpTestMode() {\r\n  return window.location.href.indexOf(\"altrp-test=true\") > 0;\r\n}\r\n\r\n/**\r\n * случайная строка\r\n * @return {string}\r\n */\r\nexport function altrpRandomId() {\r\n  return Math.random()\r\n    .toString(36)\r\n    .substr(2, 9);\r\n}\r\n\r\n/**\r\n * Кнопки для пагинации\r\n * @param pageIndex\r\n * @param pageCount\r\n * @param first_last_buttons_count\r\n * @param middle_buttons_count\r\n * @return {*[]}\r\n */\r\nexport function generateButtonsArray(\r\n  pageIndex,\r\n  pageCount,\r\n  first_last_buttons_count,\r\n  middle_buttons_count\r\n) {\r\n  const buttonsSum = first_last_buttons_count + middle_buttons_count;\r\n  const lastButtons = Array.from(\r\n    { length: first_last_buttons_count },\r\n    (_, i) => pageCount - i - 1\r\n  ).reverse();\r\n  const middleButtons = Array.from(\r\n    { length: middle_buttons_count },\r\n    (_, i) => pageIndex - Math.floor(middle_buttons_count / 2) + i\r\n  );\r\n\r\n  if (pageIndex + 1 < buttonsSum) {\r\n    return [...Array(buttonsSum).keys(), \"ellipsis\", ...lastButtons];\r\n  }\r\n  if (\r\n    pageIndex >=\r\n    pageCount -\r\n      first_last_buttons_count -\r\n      1 -\r\n      Math.floor(middle_buttons_count / 2)\r\n  ) {\r\n    return [\r\n      ...Array(first_last_buttons_count).keys(),\r\n      \"ellipsis\",\r\n      ...Array.from(\r\n        { length: first_last_buttons_count + middle_buttons_count },\r\n        (_, i) => pageCount - i - 1\r\n      ).reverse()\r\n    ];\r\n  }\r\n\r\n  return [\r\n    ...Array(first_last_buttons_count).keys(),\r\n    \"ellipsis\",\r\n    ...middleButtons,\r\n    \"ellipsis\",\r\n    ...lastButtons\r\n  ];\r\n}\r\n\r\n/**\r\n * Проверяем текст на соответствие маске\r\n * @param {string} value\r\n * @param {[]} mask\r\n * @return {boolean}\r\n */\r\nexport function isValueMatchMask(value, mask) {\r\n  if (!value || value.length !== mask.length) {\r\n    return false;\r\n  }\r\n  return (\r\n    value.length &&\r\n    value\r\n      .split(\"\")\r\n      .every((char, index) => char === mask[index] || char.match(mask[index]))\r\n  );\r\n}\r\n\r\n/**\r\n * Вернуть экземпляр конвертера необходимого типа (array - ArrayConverter и т. д.)\r\n * @return {DataConverter}\r\n */\r\nexport function getConverter(data) {\r\n  switch (data.data_type) {\r\n    case \"array\":\r\n      return new ArrayConverter(data);\r\n  }\r\n  return new DataConverter();\r\n}\r\n\r\n/**\r\n * Конвертируются данные\r\n * @param {{} | []} settings\r\n * @param {*} data\r\n */\r\nexport function convertData(settings, data) {\r\n  if (_.isArray(settings)) {\r\n    settings.forEach(item => {\r\n      const converter = getConverter(item);\r\n      data = converter.convertData(data);\r\n    });\r\n  }\r\n  if (settings.data_type) {\r\n    const converter = getConverter(settings);\r\n    data = converter.convertData(data);\r\n  }\r\n  return data;\r\n}\r\nexport function renderIcon(isHidden, icon, defaultIcon, className) {\r\n  if (isHidden) return null;\r\n\r\n  return (\r\n    <span className={className}>\r\n      {icon && icon.assetType ? renderAssetIcon(icon) : defaultIcon}\r\n    </span>\r\n  );\r\n  // if()\r\n}\r\n\r\n/**\r\n * Перенаправление на другую страницу по настройкам LinkController\r\n * @param {{}} linkSettings\r\n * @param {{}} e\r\n * @param {{}} context\r\n */\r\nexport function redirect(linkSettings, e, context = {}) {\r\n  if (_.get(linkSettings, \"toPrevPage\")) {\r\n    if(window.frontAppRouter){\r\n      frontAppRouter.history.goBack();\r\n    } else {\r\n      history.back();\r\n    }\r\n    return;\r\n  }\r\n  if (!_.get(linkSettings, \"url\")) {\r\n    return;\r\n  }\r\n  e.preventDefault();\r\n  e.stopPropagation();\r\n  let { url } = linkSettings;\r\n  url = replaceContentWithData(url, context);\r\n  if (linkSettings.openInNew) {\r\n    window.open(url, \"_blank\");\r\n    return;\r\n  }\r\n  if (linkSettings.tag === \"a\" || ! window.frontAppRouter) {\r\n    window.location.assign(url);\r\n  } else {\r\n    frontAppRouter.history.push(url);\r\n  }\r\n\r\n}\r\n\r\nexport function validateEmail(email) {\r\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@']+(\\.[^<>()[\\]\\\\.,;:\\s@']+)*)|('.+'))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n  return re.test(String(email).toLowerCase());\r\n}\r\n\r\n/**\r\n * значение настройки в зависимости от разрешения можно использовать вне виджетов с объектом настроек\r\n * @param {{}} settings - объект настроек\r\n * @param {string} settingName\r\n * @param {string} elementState\r\n * @param {*} _default\r\n * @return {*}\r\n */\r\nexport function getResponsiveSetting(\r\n  settings,\r\n  settingName,\r\n  elementState = \"\",\r\n  _default = null\r\n) {\r\n  let { currentScreen } = window.parent.appStore.getState();\r\n  let _settingName = `${settingName}_${elementState}_`;\r\n  if (currentScreen.name === CONSTANTS.DEFAULT_BREAKPOINT) {\r\n    let setting = settings[_settingName];\r\n    if (setting === undefined) {\r\n      setting = _.get(settings, settingName, _default);\r\n    }\r\n    return setting;\r\n  }\r\n  let suffix = currentScreen.name;\r\n  _settingName = `${settingName}_${elementState}_${suffix}`;\r\n  let setting = settings[_settingName];\r\n  if (setting === undefined) {\r\n    for (let screen of [...CONSTANTS.SCREENS].reverse()) {\r\n      if (\r\n        currentScreen.id < screen.id ||\r\n        screen.name === CONSTANTS.DEFAULT_BREAKPOINT\r\n      ) {\r\n        continue;\r\n      }\r\n\r\n      _settingName = `${settingName}_${elementState}_${screen.name}`;\r\n\r\n      if (settings[_settingName] !== undefined) {\r\n        setting = settings[_settingName];\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  if (setting === undefined) {\r\n    setting = _.get(settings, settingName, _default);\r\n  }\r\n  return setting;\r\n}\r\n\r\n/**\r\n * Заменяет false, null, true в строке на соответствующие значения\r\n * @param {string} value\r\n * @return {*}\r\n */\r\nexport function valueReplacement(value) {\r\n  switch (value) {\r\n    case \"true\":\r\n      return true;\r\n    case \"false\":\r\n      return false;\r\n    case \"null\":\r\n      return null;\r\n  }\r\n  return value;\r\n}\r\n\r\n/**\r\n * Задержка и с интерфейсом промиса\r\n * @param ms\r\n * @return {Promise}\r\n */\r\nexport function delay(ms) {\r\n  if (_.isString(ms)) {\r\n    ms = Number(ms);\r\n  }\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(resolve, ms);\r\n  });\r\n}\r\n\r\n/**\r\n * Подготавливает URL для шаблона письма\r\n * @param {string} url\r\n * @param {{} | null} context\r\n * @return {string}\r\n */\r\nexport function prepareURLForEmail(url, context = null) {\r\n  if (!_.isString(url) || !url) {\r\n    return url;\r\n  }\r\n  url = url.trim();\r\n  if (url.indexOf(\"http\") !== 0) {\r\n    url = location.origin + url;\r\n  }\r\n  return parseURLTemplate(url, context);\r\n}\r\n\r\nexport function parseIDFromYoutubeURL(youtubeURL) {\r\n  const startIndex = youtubeURL.indexOf(\"v=\") + 2;\r\n  const endIndex = youtubeURL.indexOf(\"&\", startIndex);\r\n\r\n  return youtubeURL.substring(startIndex, endIndex);\r\n}\r\n\r\n/**\r\n *\r\n * @param {{}} context\r\n * @return {{}}\r\n */\r\nexport function prepareContext(context) {\r\n  context.altrpdata = appStore.getState().currentDataStorage.getData();\r\n  context.altrpmodel = appStore.getState().currentModel.getData();\r\n  context.altrpuser = appStore.getState().currentUser.getData();\r\n  context.altrppagestate = appStore.getState().altrpPageState.getData();\r\n  context.altrpresponses = appStore.getState().altrpresponses.getData();\r\n  context.altrpmeta = appStore.getState().altrpMeta.getData();\r\n  return context;\r\n}\r\n\r\n/**\r\n *\r\n * Определеят явлется ли строка валидным JSON\r\n * @param {string} JSONString\r\n * @return {boolean}\r\n */\r\nexport function isJSON(JSONString = \"\") {\r\n  try {\r\n    JSON.parse(JSONString);\r\n    return true;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Парсит xml строку в объект\r\n * @param xml\r\n * @param arrayTags\r\n */\r\nfunction parseXml(xml, arrayTags) {\r\n  let dom = null;\r\n  if (window.DOMParser) dom = new DOMParser().parseFromString(xml, \"text/xml\");\r\n  else if (window.ActiveXObject) {\r\n    dom = new ActiveXObject(\"Microsoft.XMLDOM\");\r\n    dom.async = false;\r\n    if (!dom.loadXML(xml))\r\n      throw dom.parseError.reason + \" \" + dom.parseError.srcText;\r\n  } else throw new Error(\"cannot parse xml string!\");\r\n\r\n  function parseNode(xmlNode, result) {\r\n    if (xmlNode.nodeName === \"#text\") {\r\n      let v = xmlNode.nodeValue;\r\n      if (v.trim()) result[\"#text\"] = v;\r\n      return;\r\n    }\r\n\r\n    let jsonNode = {},\r\n      existing = result[xmlNode.nodeName];\r\n    if (existing) {\r\n      if (!Array.isArray(existing))\r\n        result[xmlNode.nodeName] = [existing, jsonNode];\r\n      else result[xmlNode.nodeName].push(jsonNode);\r\n    } else {\r\n      if (arrayTags && arrayTags.indexOf(xmlNode.nodeName) !== -1)\r\n        result[xmlNode.nodeName] = [jsonNode];\r\n      else result[xmlNode.nodeName] = jsonNode;\r\n    }\r\n\r\n    if (xmlNode.attributes)\r\n      for (let attribute of xmlNode.attributes)\r\n        jsonNode[attribute.nodeName] = attribute.nodeValue;\r\n\r\n    for (let node of xmlNode.childNodes) parseNode(node, jsonNode);\r\n  }\r\n\r\n  let result = {};\r\n  for (let node of dom.childNodes) parseNode(node, result);\r\n\r\n  return result;\r\n}\r\nfunction escapeRegExp(string) {\r\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"); // $& means the whole matched string\r\n}\r\n\r\n/**\r\n * Вернуть значение из строки\r\n * @param string\r\n */\r\nexport function parseStringValue(string) {\r\n  let value = string;\r\n\r\n  if (Number(value)) {\r\n    return Number(value);\r\n  }\r\n  switch (value) {\r\n    case \"true\": {\r\n      return true;\r\n    }\r\n    case \"false\": {\r\n      return false;\r\n    }\r\n    case \"null\": {\r\n      return null;\r\n    }\r\n    case \"undefined\": {\r\n      return undefined;\r\n    }\r\n    case \"0\": {\r\n      return 0;\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\n/**\r\n *\r\n * @return {*[]}\r\n */\r\nexport function getBreadcrumbsItems(){\r\n  if(window['h-altrp'] && window.breadcrumbsItems){\r\n    return window.breadcrumbsItems;\r\n  }\r\n  let items = [];\r\n  if(isEditor(0)){\r\n    return items;\r\n  }\r\n  const currentId = window['h-altrp'] ? window.page_id : window.currentPageId\r\n  const {routes} = appStore.getState().appRoutes\r\n  let breadcrumbsClone = [];\r\n  let idCurrent = 0;\r\n  routes.forEach((route, idx) => {\r\n    if(currentId === route.id) {\r\n      idCurrent = idx\r\n    }\r\n  })\r\n\r\n  breadcrumbsClone.push(routes[idCurrent])\r\n\r\n  function getParent(parentId) {\r\n    routes.forEach(route => {\r\n      if(route.id === parentId) {\r\n        breadcrumbsClone.push(route)\r\n        if(route.parent_page_id) {\r\n          getParent(route.parent_page_id)\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  if(routes[idCurrent].parent_page_id) {\r\n    getParent(routes[idCurrent].parent_page_id)\r\n  }\r\n\r\n  items = breadcrumbsClone.reverse()\r\n  if(window['h-altrp']){\r\n    window.breadcrumbsItems = items;\r\n  }\r\n  return items;\r\n}\r\n","export const SET_AREAS = 'SET_AREAS';\r\n\r\n/**\r\n *\r\n * @param {Area[]} areas\r\n * @return {{}} - {\r\n *     type: {string},\r\n *     areas: {Area[]},\r\n *   }\r\n */\r\nexport function setAreas(areas) {\r\n  return {\r\n    type: SET_AREAS,\r\n    areas,\r\n  };\r\n}\r\n","export const CHANGE_CURRENT_USER = 'CHANGE_CURRENT_USER';\r\nexport const SET_NOTICE_FOR_USER = 'SET_NOTICE_FOR_USER';\r\nexport const SET_USERS_ONLINE = 'SET_USERS_ONLINE';\r\nexport const CHANGE_CURRENT_USER_PROPERTY = \"CHANGE_CURRENT_USER_PROPERTY\";\r\n\r\nexport function changeCurrentUser(user) {\r\n  return {\r\n    type: CHANGE_CURRENT_USER,\r\n    user: user || {}\r\n  };\r\n}\r\n\r\nexport function setUserNotice(notice){\r\n  return { type: SET_NOTICE_FOR_USER, notice }\r\n}\r\n\r\nexport function setUsersOnline(members){\r\n  return { type: SET_USERS_ONLINE, members }\r\n}\r\n\r\nexport function changeCurrentUserProperty(path, value) {\r\n  return {\r\n    type: CHANGE_CURRENT_USER_PROPERTY,\r\n    path: path || \"\",\r\n    value: value || \"\"\r\n  };\r\n}\r\n","/**\r\n * Имеет интерфейс пользователя\r\n * @class AltrpUser\r\n */\r\n\r\nimport AltrpModel from \"./AltrpModel\";\r\n\r\nclass AltrpUser extends AltrpModel{\r\n  /**\r\n   * Проверяет является ли пользователь гостем\r\n   * @return {boolean}\r\n   */\r\n  isGuest(){\r\n    return this.getProperty('is_guest', false)\r\n  }\r\n  /**\r\n   * Проверяет является ли авторизованным пользователем\r\n   * @return {boolean}\r\n   */\r\n  isAuth(){\r\n    return this.getProperty('created_at', false)\r\n  }\r\n\r\n  /**\r\n   * Проверяет наличие permission у пользователя\r\n   * @param {array} permissions\r\n   * $return {boolean}\r\n   */\r\n  hasPermissions(permissions = []){\r\n    if(! _.isArray(permissions)){\r\n      permissions = [permissions];\r\n    }\r\n    let ownPermissions = this.getProperty('permissions', []);\r\n    return _.find(ownPermissions, ownPermission => {\r\n      return _.find(permissions, permission => {\r\n        if(parseInt(permission)){\r\n          return parseInt(permission) === parseInt(ownPermission.id);\r\n        }\r\n        if(_.isString(permission)){\r\n          return permission === ownPermission.name;\r\n        }\r\n      });\r\n    });\r\n  }\r\n  /**\r\n   * Проверяет наличие роли у пользователя\r\n   * @param {array} roles\r\n   * $return {boolean}\r\n   */\r\n  hasRoles(roles = []){\r\n    if(! _.isArray(roles)){\r\n      roles = [roles];\r\n    }\r\n    let ownRoles = this.getProperty('roles', []);\r\n    return _.find(ownRoles, ownRole => {\r\n      return _.find(roles, role => {\r\n        if(parseInt(role)){\r\n          return parseInt(role) === parseInt(ownRole.id);\r\n        }\r\n        if(_.isString(role)){\r\n          return role === ownRole.name;\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Проверяет доступ пользователя по необходимым роля и разрешениям\r\n   * @param {array} permissions\r\n   * @param {array} roles\r\n   * $return {boolean}\r\n   *\r\n   */\r\n  checkUserAllowed(permissions = [], roles = []){\r\n    if(! this.isAuth()){\r\n      return false;\r\n    }\r\n    roles = _.isArray(roles) ? roles : [];\r\n    permissions = _.isArray(permissions) ? permissions : [];\r\n    if(! (permissions.length || roles.length)){\r\n      return true;\r\n    }\r\n    if(this.hasPermissions(permissions)){\r\n      return true;\r\n    }\r\n    if(this.hasRoles(roles)){\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\nexport default AltrpUser","import {\r\n  changeCurrentUser,\r\n  changeUpdateUserNotification,\r\n  CHANGE_CURRENT_USER,\r\n  SET_USERS_ONLINE,\r\n  CHANGE_CURRENT_USER_PROPERTY,\r\n  SET_NOTICE_FOR_USER,\r\n} from \"./actions\";\r\nimport AltrpUser from \"../../../../../editor/src/js/classes/AltrpUser\";\r\nimport Resource from \"../../../../../editor/src/js/classes/Resource\";\r\n\r\nconst defaultModel = window.current_user || {};\r\nexport function currentUserReducer(user, action) {\r\n  user = user || defaultModel;\r\n  let localStorage = action.user?.local_storage;\r\n  switch (action.type) {\r\n    case CHANGE_CURRENT_USER:\r\n      {\r\n        user = action.user;\r\n        if (Array.isArray(user.local_storage)) {\r\n          user.local_storage = {};\r\n        }\r\n      }\r\n      break;\r\n    case CHANGE_CURRENT_USER_PROPERTY:\r\n      {\r\n        let path = action.path;\r\n        let value = action.value;\r\n        user.setProperty(path, value);\r\n        const data = _.cloneDeep(user.getProperty(\"local_storage\"));\r\n        const form = {\r\n          local_storage: data\r\n        };\r\n        new Resource({ route: `/ajax/current-user` })\r\n          .put(\"\", form)\r\n          .then(res => {\r\n            appStore.dispatch(changeCurrentUser(res.data));\r\n          })\r\n          .catch(error => console.error(error));\r\n      }\r\n      break;\r\n    case SET_NOTICE_FOR_USER:\r\n      {\r\n        let newNotice = action.notice;\r\n        user = { ...user, notice: [...user.data?.notice || [], newNotice] };\r\n      }\r\n      break;\r\n    case SET_USERS_ONLINE:\r\n      {\r\n        user = { ...user, members: action.members };\r\n      }\r\n      break;\r\n  }\r\n  if (! (user instanceof AltrpUser)) {\r\n    user = new AltrpUser(user);\r\n  }\r\n  if(! window.SSR){\r\n    const rootElement = document.getElementById('front-app');\r\n    if(user.hasRoles('admin')){\r\n      rootElement && rootElement.classList.add('front-app_admin')\r\n    } else{\r\n      rootElement && rootElement.classList.remove('front-app_admin');\r\n    }\r\n  }\r\n  return user;\r\n}\r\n"],"sourceRoot":""}